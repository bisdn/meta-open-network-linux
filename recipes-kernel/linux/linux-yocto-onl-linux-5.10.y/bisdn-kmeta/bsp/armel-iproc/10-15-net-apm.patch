diff --git a/drivers/net/ethernet/broadcom/Kconfig b/drivers/net/ethernet/broadcom/Kconfig
index d22379caad52..fff37de7f2fe 100644
--- a/drivers/net/ethernet/broadcom/Kconfig
+++ b/drivers/net/ethernet/broadcom/Kconfig
@@ -184,6 +184,16 @@ config BGMAC_PLATFORM
 	  Say Y here if you want to use the Broadcom iProc Gigabit Ethernet
 	  controller through the generic platform interface
 
+config APM
+	tristate "Broadcom iProc AXI Port Macro (APM) support"
+	depends on HAS_DMA
+	depends on ARCH_XGS_IPROC || COMPILE_TEST
+	depends on OF
+	help
+	  This driver supports AXI Port Macro (APM) module.
+	  The APM provides a bridge function between a standard Port Macro (PM 4X10)
+	  interface and the AXI interconnect (128 bits data bus) for data transfer.
+	
 config SYSTEMPORT
 	tristate "Broadcom SYSTEMPORT internal MAC support"
 	depends on HAS_IOMEM
diff --git a/drivers/net/ethernet/broadcom/Makefile b/drivers/net/ethernet/broadcom/Makefile
index 7046ad6d3d0e..d23e4ee30a1a 100644
--- a/drivers/net/ethernet/broadcom/Makefile
+++ b/drivers/net/ethernet/broadcom/Makefile
@@ -16,3 +16,4 @@ obj-$(CONFIG_BGMAC_BCMA) += bgmac-bcma.o bgmac-bcma-mdio.o
 obj-$(CONFIG_BGMAC_PLATFORM) += bgmac-platform.o
 obj-$(CONFIG_SYSTEMPORT) += bcmsysport.o
 obj-$(CONFIG_BNXT) += bnxt/
+obj-$(CONFIG_APM) += apm.o apm_ethtool.o pm4x10.o
diff --git a/drivers/net/ethernet/broadcom/apm.c b/drivers/net/ethernet/broadcom/apm.c
new file mode 100644
index 000000000000..4b73a93fecfa
--- /dev/null
+++ b/drivers/net/ethernet/broadcom/apm.c
@@ -0,0 +1,1414 @@
+/*
+ * Copyright (C) 2016 Broadcom
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+#include <linux/bcma/bcma.h>
+#include <linux/etherdevice.h>
+#include <linux/of_address.h>
+#include <linux/of_mdio.h>
+#include <linux/of_net.h>
+#include "pm.h"
+#include "apm.h"
+
+static bool apm_clk_enabled(struct apm *apm);
+
+static u32 apm_read(struct apm *apm, u16 offset)
+{
+	return readl(apm->plat.base + offset);
+}
+
+static void apm_write(struct apm *apm, u16 offset, u32 value)
+{
+	writel(value, apm->plat.base + offset);
+}
+
+static u32 apm_idm_read(struct apm *apm, u16 offset)
+{
+	return readl(apm->plat.idm_base + offset);
+}
+
+static void apm_idm_write(struct apm *apm, u16 offset, u32 value)
+{
+	return writel(value, apm->plat.idm_base + offset);
+}
+
+static bool apm_wait_value(struct apm *apm, u16 reg, u32 mask,
+			     u32 value, int timeout)
+{
+	u32 val;
+	int i;
+
+	for (i = 0; i < timeout / 10; i++) {
+		val = apm_read(apm, reg);
+		if ((val & mask) == value)
+			return true;
+		udelay(10);
+	}
+	dev_err(apm->dev, "Timeout waiting for reg 0x%X\n", reg);
+	return false;
+}
+
+/**************************************************
+ * DMA
+ **************************************************/
+static void apm_dma_tx_reset(struct apm *apm, struct apm_dma_ring *tx_ring)
+{
+	u32 val;
+	int i;
+
+	if (!tx_ring->mmio_base)
+		return;
+
+	/* Suspend DMA TX ring first.
+	 * apm_wait_value doesn't support waiting for any of few values, so
+	 * implement whole loop here.
+	 */
+	val = apm_read(apm, tx_ring->mmio_base + APM_DMA_TX_CTL);
+	apm_write(apm, tx_ring->mmio_base + APM_DMA_TX_CTL,
+					(val | APM_DMA_TX_SUSPEND));
+	for (i = 0; i < 10000 / 10; i++) {
+		val = apm_read(apm, tx_ring->mmio_base + APM_DMA_TX_STATUS);
+		val &= APM_DMA_TX_STAT;
+		if (val == APM_DMA_TX_STAT_DISABLED ||
+		    val == APM_DMA_TX_STAT_IDLEWAIT ||
+		    val == APM_DMA_TX_STAT_STOPPED) {
+			i = 0;
+			break;
+		}
+		udelay(10);
+	}
+	if (i) {
+		dev_err(apm->dev, "Timeout suspending DMA TX ring 0x%X (APM_DMA_TX_STAT: 0x%08X)\n",
+			tx_ring->mmio_base, val);
+	}
+
+	/* Disable the transmit channel */
+	val = apm_read(apm, tx_ring->mmio_base + APM_DMA_TX_CTL);
+	apm_write(apm, tx_ring->mmio_base + APM_DMA_TX_CTL,
+					(val & ~APM_DMA_TX_SUSPEND));
+	if (!apm_wait_value(apm, tx_ring->mmio_base + APM_DMA_TX_STATUS,
+			      	APM_DMA_TX_STAT, APM_DMA_TX_STAT_DISABLED, 10000)) {
+		dev_warn(apm->dev, "DMA TX ring 0x%X wasn't disabled on time, waiting additional 300us\n",
+			 tx_ring->mmio_base);
+		udelay(300);
+
+		val = apm_read(apm, tx_ring->mmio_base + APM_DMA_TX_STATUS);
+		if ((val & APM_DMA_TX_STAT) != APM_DMA_TX_STAT_DISABLED)
+			dev_err(apm->dev, "Reset of DMA TX ring 0x%X failed\n",
+				tx_ring->mmio_base);
+	}
+}
+
+static void apm_dma_tx_enable(struct apm *apm,
+				struct apm_dma_ring *tx_ring)
+{
+	u32 ctl;
+
+	ctl = apm_read(apm, tx_ring->mmio_base + APM_DMA_TX_CTL);
+	if (apm->feature_flags & APM_FEAT_TX_MASK_SETUP) {
+		ctl &= ~APM_DMA_TX_BL_MASK;
+		ctl |= APM_DMA_TX_BL_128 << APM_DMA_TX_BL_SHIFT;
+
+//		ctl &= ~APM_DMA_TX_MR_MASK;
+//		ctl |= APM_DMA_TX_MR_2 << APM_DMA_TX_MR_SHIFT;
+
+		ctl &= ~APM_DMA_TX_PC_MASK;
+		ctl |= APM_DMA_TX_PC_16 << APM_DMA_TX_PC_SHIFT;
+
+		ctl &= ~APM_DMA_TX_PT_MASK;
+		ctl |= APM_DMA_TX_PT_8 << APM_DMA_TX_PT_SHIFT;
+	}
+	ctl |= APM_DMA_TX_ENABLE;
+//	ctl |= APM_DMA_TX_PARITY_DISABLE;
+	apm_write(apm, tx_ring->mmio_base + APM_DMA_TX_CTL, ctl);
+}
+
+static void
+apm_dma_tx_add_buf(struct apm *apm, struct apm_dma_ring *tx_ring,
+		     int i, int len, u32 ctl0)
+{
+	struct apm_slot_info *slot;
+	struct apm_dma_desc *dma_desc;
+	u32 ctl1;
+
+	if (i == tx_ring->desc_num - 1)
+		ctl0 |= APM_DESC_CTL0_EOT;
+
+	ctl1 = len & APM_DESC_CTL1_LEN;
+
+	slot = &tx_ring->slots[i];
+	dma_desc = &tx_ring->desc_base[i];
+	dma_desc->addr_low = cpu_to_le32(lower_32_bits(slot->dma_addr));
+	dma_desc->addr_high = cpu_to_le32(upper_32_bits(slot->dma_addr));
+	dma_desc->ctl0 = cpu_to_le32(ctl0);
+	dma_desc->ctl1 = cpu_to_le32(ctl1);
+}
+
+static netdev_tx_t apm_dma_tx_add(struct apm *apm,
+				    struct apm_dma_ring *tx_ring, struct sk_buff *skb)
+{
+	struct device *dma_dev = apm->dma_dev;
+	struct net_device *net_dev = apm->net_dev;
+	int index = tx_ring->end % tx_ring->desc_num;
+	struct apm_slot_info *slot = &tx_ring->slots[index];
+	int nr_frags;
+	u32 flags;
+	int i;
+
+	if (skb->len > APM_DESC_CTL1_LEN) {
+		netdev_err(apm->net_dev, "Too long skb (%d)\n", skb->len);
+		goto err_drop;
+	}
+
+	if (skb->ip_summed == CHECKSUM_PARTIAL)
+		skb_checksum_help(skb);
+
+	nr_frags = skb_shinfo(skb)->nr_frags;
+
+	/* ring->end - ring->start will return the number of valid slots,
+	 * even when tx_ring->end overflows
+	 */
+	if (tx_ring->end - tx_ring->start + nr_frags + 1 >= tx_ring->desc_num) {
+		netdev_err(apm->net_dev, "TX ring is full, queue should be stopped!\n");
+		netif_stop_queue(net_dev);
+		return NETDEV_TX_BUSY;
+	}
+
+	slot->dma_addr = dma_map_single(dma_dev, skb->data, skb_headlen(skb),
+					DMA_TO_DEVICE);
+	if (unlikely(dma_mapping_error(dma_dev, slot->dma_addr)))
+		goto err_dma_head;
+
+	flags = APM_DESC_CTL0_SOF;
+	if (!nr_frags)
+		flags |= APM_DESC_CTL0_EOF | APM_DESC_CTL0_IOC;
+
+	apm_dma_tx_add_buf(apm, tx_ring, index, skb->len + 4, flags);
+	flags = 0;
+
+	for (i = 0; i < nr_frags; i++) {
+		struct skb_frag_struct *frag = &skb_shinfo(skb)->frags[i];
+		int len = skb_frag_size(frag);
+
+		index = (index + 1) % tx_ring->desc_num;
+		slot = &tx_ring->slots[index];
+		slot->dma_addr = skb_frag_dma_map(dma_dev, frag, 0,
+						  len, DMA_TO_DEVICE);
+		if (unlikely(dma_mapping_error(dma_dev, slot->dma_addr)))
+			goto err_dma;
+
+		if (i == nr_frags - 1)
+			flags |= APM_DESC_CTL0_EOF | APM_DESC_CTL0_IOC;
+
+		apm_dma_tx_add_buf(apm, tx_ring, index, len, flags);
+	}
+
+	slot->skb = skb;
+	tx_ring->end += nr_frags + 1;
+	netdev_sent_queue(net_dev, skb->len);
+
+	wmb();
+
+	/* Increase tx_ring->end to point empty slot. We tell hardware the first
+	 * slot it should *not* read.
+	 */
+	apm_write(apm, tx_ring->mmio_base + APM_DMA_TX_INDEX,
+		    tx_ring->index_base +
+		    (tx_ring->end % tx_ring->desc_num) *
+		    sizeof(struct apm_dma_desc));
+
+	if (tx_ring->end - tx_ring->start >= tx_ring->desc_num - 8)
+		netif_stop_queue(net_dev);
+
+	return NETDEV_TX_OK;
+
+err_dma:
+	dma_unmap_single(dma_dev, slot->dma_addr, skb_headlen(skb),
+			 DMA_TO_DEVICE);
+
+	while (i-- > 0) {
+		int index = (tx_ring->end + i) % tx_ring->desc_num;
+		struct apm_slot_info *slot = &tx_ring->slots[index];
+		u32 ctl1 = le32_to_cpu(tx_ring->desc_base[index].ctl1);
+		int len = ctl1 & APM_DESC_CTL1_LEN;
+
+		dma_unmap_page(dma_dev, slot->dma_addr, len, DMA_TO_DEVICE);
+	}
+
+err_dma_head:
+	netdev_err(apm->net_dev, "Mapping error of skb on TX ring 0x%X\n",
+		   tx_ring->mmio_base);
+
+err_drop:
+	dev_kfree_skb(skb);
+	net_dev->stats.tx_dropped++;
+	net_dev->stats.tx_errors++;
+	return NETDEV_TX_OK;
+}
+
+/* Free transmitted packets */
+static void apm_dma_tx_free(struct apm *apm, struct apm_dma_ring *tx_ring)
+{
+	struct device *dma_dev = apm->dma_dev;
+	int empty_slot;
+	bool freed = false;
+	unsigned bytes_compl = 0, pkts_compl = 0;
+
+	/* The last slot that hardware didn't consume yet */
+	empty_slot = apm_read(apm, tx_ring->mmio_base + APM_DMA_TX_STATUS);
+	empty_slot &= APM_DMA_TX_STATDPTR;
+	empty_slot -= tx_ring->index_base;
+	empty_slot &= APM_DMA_TX_STATDPTR;
+	empty_slot /= sizeof(struct apm_dma_desc);
+
+	while (tx_ring->start != tx_ring->end) {
+		int index = tx_ring->start % tx_ring->desc_num;
+		struct apm_slot_info *slot = &tx_ring->slots[index];
+		u32 ctl0, ctl1;
+		int len;
+
+		if (index == empty_slot)
+			break;
+
+		ctl0 = le32_to_cpu(tx_ring->desc_base[index].ctl0);
+		ctl1 = le32_to_cpu(tx_ring->desc_base[index].ctl1);
+		len = ctl1 & APM_DESC_CTL1_LEN;
+		if (ctl0 & APM_DESC_CTL0_SOF)
+			/* Unmap no longer used buffer */
+			dma_unmap_single(dma_dev, slot->dma_addr, len,
+					 DMA_TO_DEVICE);
+		else
+			dma_unmap_page(dma_dev, slot->dma_addr, len,
+				       DMA_TO_DEVICE);
+
+		if (slot->skb) {
+			apm->net_dev->stats.tx_bytes += slot->skb->len;
+			apm->net_dev->stats.tx_packets++;
+			bytes_compl += slot->skb->len;
+			pkts_compl++;
+
+			/* Free memory! :) */
+			dev_kfree_skb(slot->skb);
+			slot->skb = NULL;
+		}
+
+		slot->dma_addr = 0;
+		tx_ring->start++;
+		freed = true;
+	}
+
+	if (!pkts_compl)
+		return;
+
+	netdev_completed_queue(apm->net_dev, pkts_compl, bytes_compl);
+
+	if (netif_queue_stopped(apm->net_dev))
+		netif_wake_queue(apm->net_dev);
+}
+
+static void apm_dma_rx_reset(struct apm *apm, struct apm_dma_ring *rx_ring)
+{
+	if (!rx_ring->mmio_base)
+		return;
+
+	apm_write(apm, rx_ring->mmio_base + APM_DMA_RX_CTL, 0);
+	if (!apm_wait_value(apm,
+			      rx_ring->mmio_base + APM_DMA_RX_STATUS,
+			      APM_DMA_RX_STAT, APM_DMA_RX_STAT_DISABLED,
+			      10000))
+		dev_err(apm->dev, "Reset of RX ring 0x%X RX failed\n",
+			rx_ring->mmio_base);
+}
+
+static void apm_dma_rx_enable(struct apm *apm,
+				struct apm_dma_ring *rx_ring)
+{
+	u32 ctl;
+
+	ctl = apm_read(apm, rx_ring->mmio_base + APM_DMA_RX_CTL);
+
+//	/* preserve ONLY bits 16-17 from current hardware value */
+//	ctl &= APM_DMA_RX_ADDREXT_MASK;
+
+	if (apm->feature_flags & APM_FEAT_RX_MASK_SETUP) {
+		ctl &= ~APM_DMA_RX_BL_MASK;
+		ctl |= APM_DMA_RX_BL_128 << APM_DMA_RX_BL_SHIFT;
+
+		ctl &= ~APM_DMA_RX_PC_MASK;
+		ctl |= APM_DMA_RX_PC_8 << APM_DMA_RX_PC_SHIFT;
+
+		ctl &= ~APM_DMA_RX_PT_MASK;
+		ctl |= APM_DMA_RX_PT_1 << APM_DMA_RX_PT_SHIFT;
+	}
+	ctl |= APM_DMA_RX_ENABLE;
+//	ctl |= APM_DMA_RX_PARITY_DISABLE;
+	ctl |= APM_DMA_RX_OVERFLOW_CONT;
+	ctl |= APM_RX_FRAME_OFFSET << APM_DMA_RX_FRAME_OFFSET_SHIFT;
+	apm_write(apm, rx_ring->mmio_base + APM_DMA_RX_CTL, ctl);
+}
+
+static int apm_dma_rx_skb_for_slot(struct apm *apm,
+				     struct apm_slot_info *slot)
+{
+	struct device *dma_dev = apm->dma_dev;
+	dma_addr_t dma_addr;
+	struct apm_rx_header *rx;
+	void *buf;
+
+	/* Alloc skb */
+	buf = netdev_alloc_frag(APM_RX_ALLOC_SIZE);
+	if (!buf)
+		return -ENOMEM;
+
+	/* Poison - if everything goes fine, hardware will overwrite it */
+	rx = buf + APM_RX_BUF_OFFSET;
+	rx->len = cpu_to_le16(0xdead);
+	rx->flags = cpu_to_le16(0xbeef);
+
+	/* Map skb for the DMA */
+	dma_addr = dma_map_single(dma_dev, buf + APM_RX_BUF_OFFSET,
+				  APM_RX_BUF_SIZE, DMA_FROM_DEVICE);
+	if (dma_mapping_error(dma_dev, dma_addr)) {
+		netdev_err(apm->net_dev, "DMA mapping error\n");
+		put_page(virt_to_head_page(buf));
+		return -ENOMEM;
+	}
+
+	/* Update the slot */
+	slot->buf = buf;
+	slot->dma_addr = dma_addr;
+
+	return 0;
+}
+
+static void apm_dma_rx_update_index(struct apm *apm,
+				      struct apm_dma_ring *rx_ring)
+{
+	dma_wmb();
+
+	apm_write(apm, rx_ring->mmio_base + APM_DMA_RX_INDEX,
+		    rx_ring->index_base +
+		    rx_ring->end * sizeof(struct apm_dma_desc));
+}
+
+static void apm_dma_rx_setup_desc(struct apm *apm,
+				    struct apm_dma_ring *rx_ring, int index)
+{
+	struct apm_dma_desc *dma_desc = rx_ring->desc_base + index;
+	u32 ctl0 = 0, ctl1 = 0;
+
+	if (index == rx_ring->desc_num - 1)
+		ctl0 |= APM_DESC_CTL0_EOT;
+	ctl1 |= APM_RX_BUF_SIZE & APM_DESC_CTL1_LEN;
+	/* Is there any APM device that requires extension? */
+	/* ctl1 |= (addrext << B43_DMA64_DCTL1_ADDREXT_SHIFT) &
+	 * B43_DMA64_DCTL1_ADDREXT_MASK;
+	 */
+
+	dma_desc->addr_low = cpu_to_le32(lower_32_bits(rx_ring->slots[index].dma_addr));
+	dma_desc->addr_high = cpu_to_le32(upper_32_bits(rx_ring->slots[index].dma_addr));
+	dma_desc->ctl0 = cpu_to_le32(ctl0);
+	dma_desc->ctl1 = cpu_to_le32(ctl1);
+
+	rx_ring->end = index;
+}
+
+static void apm_dma_rx_poison_buf(struct device *dma_dev,
+				    struct apm_slot_info *slot)
+{
+	struct apm_rx_header *rx = slot->buf + APM_RX_BUF_OFFSET;
+
+	dma_sync_single_for_cpu(dma_dev, slot->dma_addr, APM_RX_BUF_SIZE,
+				DMA_FROM_DEVICE);
+	rx->len = cpu_to_le16(0xdead);
+	rx->flags = cpu_to_le16(0xbeef);
+	dma_sync_single_for_device(dma_dev, slot->dma_addr, APM_RX_BUF_SIZE,
+				   DMA_FROM_DEVICE);
+}
+
+static int apm_dma_rx_read(struct apm *apm, struct apm_dma_ring *rx_ring,
+			     int weight)
+{
+	u32 end_slot;
+	int handled = 0;
+
+	end_slot = apm_read(apm, rx_ring->mmio_base + APM_DMA_RX_STATUS);
+	end_slot &= APM_DMA_RX_STATDPTR;
+	end_slot -= rx_ring->index_base;
+	end_slot &= APM_DMA_RX_STATDPTR;
+	end_slot /= sizeof(struct apm_dma_desc);
+
+	while (rx_ring->start != end_slot) {
+		struct device *dma_dev = apm->dma_dev;
+		struct apm_slot_info *slot = &rx_ring->slots[rx_ring->start];
+		struct apm_rx_header *rx = slot->buf + APM_RX_BUF_OFFSET;
+		struct sk_buff *skb;
+		void *buf = slot->buf;
+		dma_addr_t dma_addr = slot->dma_addr;
+		u16 len, flags;
+
+		do {
+			/* Prepare new skb as replacement */
+			if (apm_dma_rx_skb_for_slot(apm, slot)) {
+				apm_dma_rx_poison_buf(dma_dev, slot);
+				break;
+			}
+
+			/* Unmap buffer to make it accessible to the CPU */
+			dma_unmap_single(dma_dev, dma_addr,
+					 APM_RX_BUF_SIZE, DMA_FROM_DEVICE);
+
+			/* Get info from the header */
+			len = le16_to_cpu(rx->len);
+			flags = le16_to_cpu(rx->flags);
+
+			/* Check for poison and drop or pass the packet */
+			if (len == 0xdead && flags == 0xbeef) {
+				netdev_err(apm->net_dev, "Found poisoned packet at slot %d, DMA issue!\n",
+					   rx_ring->start);
+				put_page(virt_to_head_page(buf));
+				apm->net_dev->stats.rx_errors++;
+				break;
+			}
+
+			if (len > APM_RX_ALLOC_SIZE) {
+				netdev_err(apm->net_dev, "Found oversized packet at slot %d, DMA issue!\n",
+					   rx_ring->start);
+				put_page(virt_to_head_page(buf));
+				apm->net_dev->stats.rx_length_errors++;
+				apm->net_dev->stats.rx_errors++;
+				break;
+			}
+
+			/* Omit CRC. */
+			len -= ETH_FCS_LEN;
+
+			skb = build_skb(buf, APM_RX_ALLOC_SIZE);
+			if (unlikely(!skb)) {
+				netdev_err(apm->net_dev, "build_skb failed\n");
+				put_page(virt_to_head_page(buf));
+				apm->net_dev->stats.rx_errors++;
+				break;
+			}
+			skb_put(skb, APM_RX_FRAME_OFFSET +
+				APM_RX_BUF_OFFSET + len);
+			skb_pull(skb, APM_RX_FRAME_OFFSET +
+				 APM_RX_BUF_OFFSET);
+
+			skb_checksum_none_assert(skb);
+			skb->protocol = eth_type_trans(skb, apm->net_dev);
+			apm->net_dev->stats.rx_bytes += len;
+			apm->net_dev->stats.rx_packets++;
+			napi_gro_receive(&apm->napi, skb);
+			handled++;
+		} while (0);
+
+		apm_dma_rx_setup_desc(apm, rx_ring, rx_ring->start);
+
+		if (++rx_ring->start >= rx_ring->desc_num)
+			rx_ring->start = 0;
+
+		if (handled >= weight) /* Should never be greater */
+			break;
+	}
+
+	apm_dma_rx_update_index(apm, rx_ring);
+
+	return handled;
+}
+
+/* Does ring support unaligned addressing? */
+static bool apm_dma_unaligned(struct apm *apm,
+				struct apm_dma_ring *ring,
+				enum apm_dma_ring_type ring_type)
+{
+	switch (ring_type) {
+		case APM_DMA_RING_TYPE_TX:
+			apm_write(apm, ring->mmio_base + APM_DMA_TX_RINGLO, 0xff0);
+			if (apm_read(apm, ring->mmio_base + APM_DMA_TX_RINGLO))
+				return true;
+			break;
+		case APM_DMA_RING_TYPE_RX:
+			apm_write(apm, ring->mmio_base + APM_DMA_RX_RINGLO, 0xff0);
+			if (apm_read(apm, ring->mmio_base + APM_DMA_RX_RINGLO))
+				return true;
+			break;
+		default:
+			return false;
+	}
+	return false;
+}
+
+static void apm_dma_tx_ring_free(struct apm *apm,
+				   struct apm_dma_ring *tx_ring)
+{
+	struct device *dma_dev = apm->dma_dev;
+	struct apm_dma_desc *dma_desc = tx_ring->desc_base;
+	struct apm_slot_info *slot;
+	int i;
+
+	for (i = 0; i < tx_ring->desc_num; i++) {
+		int len = dma_desc[i].ctl1 & APM_DESC_CTL1_LEN;
+
+		slot = &tx_ring->slots[i];
+		dev_kfree_skb(slot->skb);
+		if (!slot->dma_addr)
+			continue;
+
+		if (slot->skb)
+			dma_unmap_single(dma_dev, slot->dma_addr,
+					 len, DMA_TO_DEVICE);
+		else
+			dma_unmap_page(dma_dev, slot->dma_addr,
+				       len, DMA_TO_DEVICE);
+	}
+}
+
+static void apm_dma_rx_ring_free(struct apm *apm,
+				   struct apm_dma_ring *rx_ring)
+{
+	struct device *dma_dev = apm->dma_dev;
+	struct apm_slot_info *slot;
+	int i;
+
+	for (i = 0; i < rx_ring->desc_num; i++) {
+		slot = &rx_ring->slots[i];
+		if (!slot->dma_addr)
+			continue;
+
+		dma_unmap_single(dma_dev, slot->dma_addr,
+				 APM_RX_BUF_SIZE,
+				 DMA_FROM_DEVICE);
+		put_page(virt_to_head_page(slot->buf));
+		slot->dma_addr = 0;
+	}
+}
+
+static void apm_dma_cleanup(struct apm *apm)
+{
+	int i;
+
+	for (i = 0; i < apm->tx_channel; i++) {
+		apm_dma_tx_ring_free(apm, &apm->tx_ring[i]);
+	}
+
+	apm_dma_rx_ring_free(apm, &apm->rx_ring[0]);
+}
+
+static void apm_dma_free(struct apm *apm)
+{
+	struct device *dma_dev = apm->dma_dev;
+	int size;
+
+	if (apm->desc_buf) {
+		size = (APM_TX_MAX_DESCS + APM_RX_MAX_DESCS) *
+						sizeof(struct apm_dma_desc);
+		dma_free_coherent(dma_dev, size, apm->desc_buf, apm->dma_addr);
+	}
+
+	if (apm->slot_buf) {
+		kfree(apm->slot_buf);
+	}
+}
+
+static int apm_dma_alloc(struct apm *apm)
+{
+	struct device *dma_dev = apm->dma_dev;
+	int size;
+
+	size = (APM_TX_MAX_DESCS + APM_RX_MAX_DESCS) *
+						sizeof(struct apm_dma_desc);
+	apm->desc_buf = dma_zalloc_coherent(dma_dev, size,
+						&apm->dma_addr, GFP_KERNEL);
+	if (!apm->desc_buf) {
+		dev_err(apm->dev, "Descriptor buffer allocation failed\n");
+		goto err_dma_free;
+	}
+	memset(apm->desc_buf, 0, size);
+
+	size = (APM_TX_MAX_DESCS + APM_RX_MAX_DESCS) *
+						sizeof(struct apm_slot_info);
+	apm->slot_buf = kmalloc(size, GFP_KERNEL);
+	if (!apm->slot_buf) {
+		dev_err(apm->dev, "Data buffer allocation failed\n");
+		goto err_dma_free;
+	}
+	memset(apm->slot_buf, 0, size);
+	return 0;
+
+err_dma_free:
+	apm_dma_free(apm);
+	return -ENOMEM;
+}
+
+static int apm_tx_dma_init(struct apm *apm,
+					struct apm_dma_ring *tx_ring, int channel)
+{
+	const u16 ring_base[] = { APM_DMA_BASE0, APM_DMA_BASE1,
+					 		  APM_DMA_BASE2, APM_DMA_BASE3,};
+	int desc_num = APM_TX_MAX_DESCS / apm->tx_channel;
+	int offset = channel * desc_num;
+
+	BUILD_BUG_ON(APM_MAX_TX_RINGS > ARRAY_SIZE(ring_base));
+
+	tx_ring->mmio_base = ring_base[channel];
+	if ((apm->tx_channel == 2) && (channel == 1)) {
+		tx_ring->mmio_base = ring_base[2];
+	}
+
+	tx_ring->desc_num = desc_num;
+	tx_ring->desc_base = apm->desc_buf + offset;
+	tx_ring->dma_base = (dma_addr_t)((u32)apm->dma_addr +
+						offset * sizeof(struct apm_dma_desc));
+	tx_ring->slots = apm->slot_buf + offset;
+
+	tx_ring->index_base = 0;
+	tx_ring->unaligned = apm_dma_unaligned(apm,
+						tx_ring, APM_DMA_RING_TYPE_TX);
+	if (tx_ring->unaligned) {
+		tx_ring->index_base = lower_32_bits(tx_ring->dma_base);
+	}
+
+	tx_ring->start = 0;
+	tx_ring->end = 0;	/* Points the slot that should *not* be read */
+
+	return 0;
+}
+
+static int apm_rx_dma_init(struct apm *apm, struct apm_dma_ring *rx_ring)
+{
+	int offset = APM_TX_MAX_DESCS;
+
+	rx_ring->desc_num = APM_RX_MAX_DESCS;
+	rx_ring->mmio_base = APM_DMA_BASE0;
+	rx_ring->desc_base = apm->desc_buf + offset;
+	rx_ring->dma_base = (dma_addr_t)((u32)apm->dma_addr +
+						offset * sizeof(struct apm_dma_desc));
+	rx_ring->slots = apm->slot_buf + offset;
+
+	rx_ring->index_base = 0;
+	rx_ring->unaligned = apm_dma_unaligned(apm,
+						rx_ring, APM_DMA_RING_TYPE_RX);
+	if (rx_ring->unaligned) {
+		rx_ring->index_base = lower_32_bits(rx_ring->dma_base);
+	}
+
+	rx_ring->start = 0;
+	rx_ring->end = 0;	/* Points the slot that should *not* be read */
+
+	return 0;
+}
+
+static int apm_dma_init(struct apm *apm)
+{
+	struct apm_dma_ring *tx_ring, *rx_ring;
+	int i, err;
+
+	/* TX DMA init */
+	for (i = 0; i < apm->tx_channel; i++) {
+		tx_ring = &apm->tx_ring[i];
+		apm_tx_dma_init(apm, tx_ring, i);
+
+		if (!tx_ring->unaligned) {
+			apm_dma_tx_enable(apm, tx_ring);
+		}
+
+		apm_write(apm, tx_ring->mmio_base + APM_DMA_TX_RINGLO,
+			    lower_32_bits(tx_ring->dma_base));
+		apm_write(apm, tx_ring->mmio_base + APM_DMA_TX_RINGHI,
+			    upper_32_bits(tx_ring->dma_base));
+
+		if (tx_ring->unaligned) {
+			apm_dma_tx_enable(apm, tx_ring);
+		}
+	}
+
+	/* RX DMA init */
+	rx_ring = &apm->rx_ring[0];
+	apm_rx_dma_init(apm, rx_ring);
+
+	if (!rx_ring->unaligned) {
+		apm_dma_rx_enable(apm, rx_ring);
+	}
+
+	apm_write(apm, rx_ring->mmio_base + APM_DMA_RX_RINGLO,
+		    lower_32_bits(rx_ring->dma_base));
+	apm_write(apm, rx_ring->mmio_base + APM_DMA_RX_RINGHI,
+		    upper_32_bits(rx_ring->dma_base));
+
+	if (rx_ring->unaligned) {
+		apm_dma_rx_enable(apm, rx_ring);
+	}
+
+	for (i = 0; i < rx_ring->desc_num; i++) {
+		err = apm_dma_rx_skb_for_slot(apm, &rx_ring->slots[i]);
+		if (err) {
+			goto error;
+		}
+		apm_dma_rx_setup_desc(apm, rx_ring, i);
+	}
+	apm_dma_rx_update_index(apm, rx_ring);
+
+	return 0;
+
+error:
+	apm_dma_cleanup(apm);
+	return err;
+}
+
+
+/**************************************************
+ * Chip ops
+ **************************************************/
+
+/* TODO: can we just drop @force? Can we don't reset MAC at all if there is
+ * nothing to change? Try if after stabilizng driver.
+ */
+//static void apm_cmdcfg_maskset(struct apm *apm, u32 mask, u32 set,
+//				 bool force)
+//{
+//	u32 cmdcfg = apm_read(apm, APM_CMDCFG);
+//	u32 new_val = (cmdcfg & mask) | set;
+//	u32 cmdcfg_sr;
+//
+//	apm_set(apm, APM_CMDCFG, cmdcfg_sr);
+//	udelay(2);
+//
+//	if (new_val != cmdcfg || force)
+//		apm_write(apm, APM_CMDCFG, new_val);
+//
+//	apm_mask(apm, APM_CMDCFG, ~cmdcfg_sr);
+//	udelay(2);
+//}
+
+//static void apm_set_rx_mode(struct net_device *net_dev)
+//{
+//	struct apm *apm = netdev_priv(net_dev);
+//
+//	if (net_dev->flags & IFF_PROMISC)
+//		apm_cmdcfg_maskset(apm, ~0, APM_CMDCFG_PROM, true);
+//	else
+//		apm_cmdcfg_maskset(apm, ~APM_CMDCFG_PROM, 0, true);
+//}
+
+static int apm_port_loopback(struct apm *apm, int lb_type)
+{
+	struct iproc_pm_ops *pm_ops = apm->pm_ops;
+
+	if (!pm_ops) {
+		dev_err(apm->dev, "(%s) PM does not exist\n", __func__);
+		return -EINVAL;
+	}
+
+	if (lb_type == APM_LOOPBACK_TYPE_NONE) {
+		pm_ops->port_loopback(apm->land_idx, pmLoopbackMac, 0);
+		pm_ops->port_loopback(apm->land_idx, pmLoopbackPhy, 0);
+	} else if (lb_type == APM_LOOPBACK_TYPE_MAC) {
+		pm_ops->port_loopback(apm->land_idx, pmLoopbackMac, 1);
+	} else if (lb_type == APM_LOOPBACK_TYPE_PHY) {
+		pm_ops->port_loopback(apm->land_idx, pmLoopbackPhy, 1);
+	}
+	return 0;
+}
+
+static int apm_port_mac_address_set(struct apm *apm, u8 *addr)
+{
+	struct iproc_pm_ops *pm_ops = apm->pm_ops;
+
+	if (!pm_ops) {
+		dev_err(apm->dev, "(%s) PM does not exist\n", __func__);
+		return -EINVAL;
+	}
+
+	return pm_ops->port_mac_addr(apm->land_idx, addr);
+}
+
+static int apm_port_speed(struct apm *apm)
+{
+	struct iproc_pm_ops *pm_ops = apm->pm_ops;
+
+	if (!pm_ops) {
+		dev_err(apm->dev, "(%s) PM does not exist\n", __func__);
+		return -EINVAL;
+	}
+
+	switch (apm->mac_speed) {
+		case SPEED_10:
+		case SPEED_100:
+		case SPEED_1000:
+			return pm_ops->port_speed(apm->land_idx, apm->mac_speed);
+		default:
+			dev_err(apm->dev, "Unsupported speed: %d\n", apm->mac_speed);
+	}
+
+	return -EINVAL;
+}
+
+static int apm_port_enable(struct apm *apm, int enable)
+{
+	struct iproc_pm_ops *pm_ops = apm->pm_ops;
+
+	if (!pm_ops) {
+		dev_err(apm->dev, "(%s) PM does not exist\n", __func__);
+		return -EINVAL;
+	}
+
+	return pm_ops->port_enable(apm->land_idx, enable);
+}
+
+static int apm_port_stats_clear(struct apm *apm)
+{
+	struct iproc_pm_ops *pm_ops = apm->pm_ops;
+
+	if (!pm_ops) {
+		dev_err(apm->dev, "(%s) PM does not exist\n", __func__);
+		return -EINVAL;
+	}
+
+	return pm_ops->port_stats_clear(apm->land_idx);
+}
+
+static void apm_chip_init(struct apm *apm)
+{
+	u32 dev_ctl;
+//	u32 cmdcfg;
+
+	/* 1 interrupt per received frame */
+	apm_write(apm, APM_INT_RECV_LAZY, 1 << APM_IRL_FC_SHIFT);
+
+	/* TX QoS mode */
+	dev_ctl = apm_read(apm, APM_DEV_CTL);
+	if (apm->strict_mode) {
+		dev_ctl |= APM_DC_TSM;
+	} else {
+		dev_ctl &= ~APM_DC_TSM;
+	}
+	apm_write(apm, APM_DEV_CTL, dev_ctl);
+
+//	/* Enable 802.3x tx flow control (honor received PAUSE frames) */
+//	apm_cmdcfg_maskset(apm, ~APM_CMDCFG_RPI, 0, true);
+//
+//	/* Activate apm tx & rx */
+//	cmdcfg = apm_read(apm, APM_CMDCFG);
+//	cmdcfg |= APM_CMDCFG_TE | APM_CMDCFG_RE;
+//	apm_write(apm, APM_CMDCFG, cmdcfg);
+
+	apm_port_mac_address_set(apm, apm->net_dev->dev_addr);
+
+	/* Enable the pm port */
+	apm_port_enable(apm, 1);
+}
+
+static void apm_chip_reset(struct apm *apm)
+{
+	int i;
+
+	if (apm_clk_enabled(apm)) {
+		for (i = 0; i < apm->tx_channel; i++) {
+			apm_dma_tx_reset(apm, &apm->tx_ring[i]);
+		}
+
+		apm_port_loopback (apm, APM_LOOPBACK_TYPE_NONE);
+		udelay(1);
+
+		apm_dma_rx_reset(apm, &apm->rx_ring[0]);
+
+		/* TODO: Clear software multicast filter list */
+	}
+
+	/* Disable the pm port */
+	apm_port_enable(apm, 0);
+
+	/* Clear the MIB */
+	apm_port_stats_clear(apm);
+
+	apm->mac_speed = SPEED_1000;
+	apm->mac_duplex = DUPLEX_FULL;
+	apm_port_speed(apm);
+
+	if (apm->mii_bus) {
+		apm->mii_bus->reset(apm->mii_bus);
+	}
+
+	netdev_reset_queue(apm->net_dev);
+}
+
+
+static void apm_intrs_on(struct apm *apm)
+{
+	apm_write(apm, APM_INT_MASK, apm->int_mask);
+}
+
+static void apm_intrs_off(struct apm *apm)
+{
+	apm_write(apm, APM_INT_MASK, 0);
+	apm_read(apm, APM_INT_MASK);
+}
+
+static bool apm_clk_enabled(struct apm *apm)
+{
+	if ((apm_idm_read(apm, BCMA_IOCTL) &
+	     (BCMA_IOCTL_CLK | BCMA_IOCTL_FGC)) != BCMA_IOCTL_CLK)
+		return false;
+	if (apm_idm_read(apm, BCMA_RESET_CTL) & BCMA_RESET_CTL_RESET)
+		return false;
+	return true;
+}
+
+static void apm_clk_enable(struct apm *apm, u32 flags)
+{
+	apm_idm_write(apm, BCMA_IOCTL,
+			(BCMA_IOCTL_CLK | BCMA_IOCTL_FGC | flags));
+	apm_idm_read(apm, BCMA_IOCTL);
+
+	apm_idm_write(apm, BCMA_RESET_CTL, 0);
+	apm_idm_read(apm, BCMA_RESET_CTL);
+	udelay(1);
+
+	apm_idm_write(apm, BCMA_IOCTL, (BCMA_IOCTL_CLK | flags));
+	apm_idm_read(apm, BCMA_IOCTL);
+	udelay(1);
+}
+
+static irqreturn_t apm_interrupt(int irq, void *dev_id)
+{
+	struct apm *apm = netdev_priv(dev_id);
+	u32 int_status = apm_read(apm, APM_INT_STATUS);
+	int_status &= apm->int_mask;
+
+	if (!int_status)
+		return IRQ_NONE;
+
+	int_status &= ~(APM_IS_TX0 | APM_IS_RX);
+	if (int_status)
+		dev_err(apm->dev, "Unknown IRQs: 0x%08X\n", int_status);
+
+	/* Disable new interrupts until handling existing ones */
+	apm_intrs_off(apm);
+
+	napi_schedule(&apm->napi);
+
+	return IRQ_HANDLED;
+}
+
+static int apm_poll(struct napi_struct *napi, int weight)
+{
+	struct apm *apm = container_of(napi, struct apm, napi);
+	int handled = 0;
+
+	/* Ack */
+	apm_write(apm, APM_INT_STATUS, ~0);
+
+	apm_dma_tx_free(apm, &apm->tx_ring[0]);
+	handled += apm_dma_rx_read(apm, &apm->rx_ring[0], weight);
+
+	/* Poll again if more events arrived in the meantime */
+	if (apm_read(apm, APM_INT_STATUS) & (APM_IS_TX0 | APM_IS_RX))
+		return weight;
+
+	if (handled < weight) {
+		napi_complete(napi);
+		apm_intrs_on(apm);
+	}
+
+	return handled;
+}
+
+/**************************************************
+ * net_device_ops
+ **************************************************/
+static int apm_open(struct net_device *net_dev)
+{
+	struct apm *apm = netdev_priv(net_dev);
+	int err = 0;
+
+	apm_chip_reset(apm);
+
+	err = apm_dma_init(apm);
+	if (err)
+		return err;
+
+	/* Specs say about reclaiming rings here, but we do that in DMA init */
+	apm_chip_init(apm);
+
+	
+	err = request_irq(apm->irq0, apm_interrupt, IRQF_SHARED,
+			  KBUILD_MODNAME, net_dev);
+	if (err < 0) {
+		dev_err(apm->dev, "IRQ 0 request error: %d!\n", err);
+		apm_dma_cleanup(apm);
+		return err;
+	}
+	err = request_irq(apm->irq1, apm_interrupt, IRQF_SHARED,
+			  KBUILD_MODNAME, net_dev);
+	if (err < 0) {
+		dev_err(apm->dev, "IRQ 1 request error: %d!\n", err);
+		apm_dma_cleanup(apm);
+		return err;
+	}
+	err = request_irq(apm->irq2, apm_interrupt, IRQF_SHARED,
+			  KBUILD_MODNAME, net_dev);
+	if (err < 0) {
+		dev_err(apm->dev, "IRQ 2 request error: %d!\n", err);
+		apm_dma_cleanup(apm);
+		return err;
+	}
+	napi_enable(&apm->napi);
+
+	phy_start(net_dev->phydev);
+
+	netif_start_queue(net_dev);
+
+	apm_intrs_on(apm);
+
+	return 0;
+}
+
+static int apm_stop(struct net_device *net_dev)
+{
+	struct apm *apm = netdev_priv(net_dev);
+
+	netif_carrier_off(net_dev);
+
+	phy_stop(net_dev->phydev);
+
+	napi_disable(&apm->napi);
+	apm_intrs_off(apm);
+	
+	free_irq(apm->irq0, net_dev);
+	free_irq(apm->irq1, net_dev);
+	free_irq(apm->irq2, net_dev);
+
+	apm_chip_reset(apm);
+	apm_dma_cleanup(apm);
+
+	return 0;
+}
+
+static netdev_tx_t apm_start_xmit(struct sk_buff *skb,
+				    struct net_device *net_dev)
+{
+	struct apm *apm = netdev_priv(net_dev);
+	struct apm_dma_ring *tx_ring;
+	u32 channel;
+
+	/* Remap the priority to 8 priorities first and transmit the packet
+	 * to corresponding tx channel.
+	 */
+	channel = (skb->priority % 8) / (8 / apm->tx_channel);
+	channel = 0; // FIXME, GH2 doesn't support multiple channel
+
+	tx_ring = &apm->tx_ring[channel];
+	return apm_dma_tx_add(apm, tx_ring, skb);
+}
+
+static int apm_set_mac_address(struct net_device *net_dev, void *addr)
+{
+	struct apm *apm = netdev_priv(net_dev);
+	int ret;
+
+	ret = eth_prepare_mac_addr_change(net_dev, addr);
+	if (ret < 0)
+		return ret;
+	apm_port_mac_address_set(apm, (u8 *)addr);
+	eth_commit_mac_addr_change(net_dev, addr);
+
+	return 0;
+}
+
+static int apm_ioctl(struct net_device *net_dev, struct ifreq *ifr, int cmd)
+{
+	if (!netif_running(net_dev))
+		return -EINVAL;
+
+	return phy_mii_ioctl(net_dev->phydev, ifr, cmd);
+}
+
+static const struct net_device_ops apm_netdev_ops = {
+	.ndo_open		= apm_open,
+	.ndo_stop		= apm_stop,
+	.ndo_start_xmit		= apm_start_xmit,
+//	.ndo_set_rx_mode	= apm_set_rx_mode,
+	.ndo_set_mac_address	= apm_set_mac_address,
+	.ndo_validate_addr	= eth_validate_addr,
+	.ndo_do_ioctl           = apm_ioctl,
+};
+
+/**************************************************
+ * MII
+ **************************************************/
+static void apm_adjust_link(struct net_device *net_dev)
+{
+	struct apm *apm = netdev_priv(net_dev);
+	struct phy_device *phy_dev = net_dev->phydev;
+	bool update = false;
+
+	if (phy_dev->link) {
+		if (phy_dev->speed != apm->mac_speed) {
+			apm->mac_speed = phy_dev->speed;
+			update = true;
+		}
+
+		if (phy_dev->duplex != apm->mac_duplex) {
+			apm->mac_duplex = phy_dev->duplex;
+			update = true;
+		}
+	}
+
+	if (update) {
+		apm_port_speed(apm);
+		phy_print_status(phy_dev);
+	}
+}
+
+static int apm_enet_probe(struct apm *info)
+{
+	struct net_device *net_dev;
+	struct apm *apm;
+	struct phy_device *phy_dev;
+	int err;
+
+	/* Allocation and references */
+	net_dev = alloc_etherdev(sizeof(*apm));
+	if (!net_dev)
+		return -ENOMEM;
+
+	net_dev->netdev_ops = &apm_netdev_ops;
+
+	apm = netdev_priv(net_dev);
+	memcpy(apm, info, sizeof(*apm));
+	apm->net_dev = net_dev;
+	net_dev->irq = apm->irq0;  /* irq1, irq2 ?? */
+	SET_NETDEV_DEV(net_dev, apm->dev);
+
+	if (!is_valid_ether_addr(apm->mac_addr)) {
+		dev_err(apm->dev, "Invalid MAC addr: %pM\n", apm->mac_addr);
+		eth_random_addr(apm->mac_addr);
+		dev_warn(apm->dev, "Using random MAC: %pM\n", apm->mac_addr);
+	}
+	ether_addr_copy(net_dev->dev_addr, apm->mac_addr);
+
+	/* This (reset &) enable is not preset in specs or reference driver but
+	 * Broadcom does it in arch PCI code when enabling fake PCI device.
+	 */
+	apm_clk_enable(apm, 0);
+
+	apm_chip_reset(apm);
+
+	err = apm_ethtool_init(net_dev);
+	if (err) {
+		dev_err(apm->dev, "Init ethtool failed\n");
+		goto err_netdev_free;
+	}
+
+	err = apm_dma_alloc(apm);
+	if (err) {
+		dev_err(apm->dev, "Unable to alloc memory for DMA\n");
+		goto err_netdev_free;
+	}
+
+	apm->int_mask = APM_IS_ERRMASK | APM_IS_RX | APM_IS_TX_MASK;
+
+	netif_napi_add(net_dev, &apm->napi, apm_poll, APM_WEIGHT);
+
+	/* phy init; serdes init is already done in pm.c */
+	phy_dev = of_phy_get_and_connect(apm->net_dev, apm->dev->of_node,
+						&apm_adjust_link);
+	if (!phy_dev) {
+		dev_warn(apm->dev, "No phy available in DT");
+	}
+
+	net_dev->features = NETIF_F_SG | NETIF_F_IP_CSUM | NETIF_F_IPV6_CSUM;
+	net_dev->hw_features = net_dev->features;
+	net_dev->vlan_features = net_dev->features;
+
+	err = register_netdev(apm->net_dev);
+	if (err) {
+		dev_err(apm->dev, "Cannot register net device\n");
+		goto err_phy_disconnect;
+	}
+
+	netif_carrier_off(net_dev);
+
+	return 0;
+
+err_phy_disconnect:
+	phy_disconnect(net_dev->phydev);
+err_netdev_free:
+	free_netdev(net_dev);
+
+	return err;
+}
+
+static void apm_enet_remove(struct apm *apm)
+{
+	unregister_netdev(apm->net_dev);
+	phy_disconnect(apm->net_dev->phydev);
+	netif_napi_del(&apm->napi);
+	apm_dma_free(apm);
+	free_netdev(apm->net_dev);
+}
+
+/**************************************************
+ * Platform related code
+ **************************************************/
+static int apm_probe(struct platform_device *pdev)
+{
+	struct device_node *np = pdev->dev.of_node;
+	struct apm *apm;
+	struct resource *regs;
+	const u8 *mac_addr;
+	const char *pm_type;
+	u32 value;
+
+	apm = devm_kzalloc(&pdev->dev, sizeof(*apm), GFP_KERNEL);
+	if (!apm) {
+		return -ENOMEM;
+	}
+
+	platform_set_drvdata(pdev, apm);
+
+	/* Set the features */
+	apm->feature_flags |= APM_FEAT_TX_MASK_SETUP;
+	apm->feature_flags |= APM_FEAT_RX_MASK_SETUP;
+
+	apm->dev = &pdev->dev;
+	apm->dma_dev = &pdev->dev;
+
+	mac_addr = of_get_mac_address(np);
+	if (mac_addr)
+		ether_addr_copy(apm->mac_addr, mac_addr);
+	else
+		dev_warn(&pdev->dev, "MAC address not present in device tree\n");
+
+	apm->irq0 = platform_get_irq(pdev, 0);
+	if (apm->irq0 < 0) {
+		dev_err(&pdev->dev, "Unable to obtain IRQ 0\n");
+		return apm->irq0;
+	}
+	apm->irq1 = platform_get_irq(pdev, 1);
+	if (apm->irq1 < 0) {
+		dev_err(&pdev->dev, "Unable to obtain IRQ 1\n");
+		return apm->irq1;
+	}
+	apm->irq2 = platform_get_irq(pdev, 2);
+	if (apm->irq2 < 0) {
+		dev_err(&pdev->dev, "Unable to obtain IRQ 2\n");
+		return apm->irq2;
+	}
+
+	regs = platform_get_resource_byname(pdev, IORESOURCE_MEM, "apm_base");
+	if (!regs) {
+		dev_err(&pdev->dev, "Unable to obtain base resource\n");
+		return -EINVAL;
+	}
+
+	apm->plat.base = devm_ioremap_resource(&pdev->dev, regs);
+	if (IS_ERR(apm->plat.base))
+		return PTR_ERR(apm->plat.base);
+
+	regs = platform_get_resource_byname(pdev, IORESOURCE_MEM, "idm_base");
+	if (!regs) {
+		dev_err(&pdev->dev, "Unable to obtain idm resource\n");
+		return -EINVAL;
+	}
+
+	apm->plat.idm_base = devm_ioremap_resource(&pdev->dev, regs);
+	if (IS_ERR(apm->plat.idm_base)) {
+		return PTR_ERR(apm->plat.idm_base);
+	}
+
+	/* Get TX queue number and QoS mode from DTS file */
+	if (of_property_read_u32(np, "tx-channels", &value)) {
+		/* Set the default TX channel number */
+		apm->tx_channel = 1;
+	} else {
+		apm->tx_channel = value;
+		if (value == 0) {
+			apm->tx_channel = 1;
+		} else if (value > APM_MAX_TX_RINGS) {
+			apm->tx_channel = APM_MAX_TX_RINGS;
+		}
+	}
+
+	if (of_property_read_u32(np, "strict-mode", &value)) {
+		/* Set the default strict mode */
+		apm->strict_mode = true;
+	} else {
+		apm->strict_mode = true;
+		if (value == 0) {
+			apm->strict_mode = false;
+		}
+	}
+
+	/* Get lane index in PM */
+	if (of_property_read_u32(np, "land-idx", &value)) {
+		dev_err(&pdev->dev, "Unable to get the PM land index\n");
+		return -EINVAL;
+	}
+	apm->land_idx = value;
+	
+	/* Get the PM type */
+	if (of_property_read_string(np, "pm-type", &pm_type)) {
+		dev_err(&pdev->dev, "Unable to get the PM type\n");
+		return -EINVAL;
+	}
+
+	if (!strcmp(pm_type, "pm4x10")) {
+		//pm4x10_pm_init(apm->pm_ops);
+		apm->pm_ops = kmalloc(sizeof(struct iproc_pm_ops), GFP_KERNEL);
+		apm->pm_ops->port_enable= pm4x10_pm_xlport_port_config;
+	  apm->pm_ops->port_speed = pm4x10_xlport_speed_set;
+	  apm->pm_ops->port_loopback = pm4x10_xlport_loopback_set;
+	  apm->pm_ops->port_mac_addr = pm4x10_xlport_mac_addr_set;
+	  apm->pm_ops->port_stats = pm4x10_xlport_stats_get;
+	  apm->pm_ops->port_stats_clear = pm4x10_xlport_mib_reset;
+	  pm4x10_pm_init(apm->pm_ops, apm->land_idx);
+        
+	} else {
+		dev_err(&pdev->dev, "Unknown the PM type - %s\n", pm_type);
+		return -EINVAL;
+	}
+
+	return apm_enet_probe(apm);
+}
+
+static int apm_remove(struct platform_device *pdev)
+{
+	struct apm *apm = platform_get_drvdata(pdev);
+
+  //pm4x10_pm_deinit(apm->pm_ops);
+  kfree(apm->pm_ops);
+	apm->pm_ops = NULL;
+	pm4x10_pm_deinit(apm->pm_ops);
+	apm_enet_remove(apm);
+
+	return 0;
+}
+
+static const struct of_device_id apm_of_enet_match[] = {
+	{.compatible = "brcm,xgs-iproc-apm",},
+	{.compatible = "brcm,xgs-iproc-apm,hx5",},
+	{},
+};
+MODULE_DEVICE_TABLE(of, apm_of_enet_match);
+
+static struct platform_driver apm_enet_driver = {
+	.driver = {
+		.name  = "apm-enet",
+		.of_match_table = apm_of_enet_match,
+	},
+	.probe = apm_probe,
+	.remove = apm_remove,
+};
+
+module_platform_driver(apm_enet_driver);
+MODULE_LICENSE("GPL");
diff --git a/drivers/net/ethernet/broadcom/apm.h b/drivers/net/ethernet/broadcom/apm.h
new file mode 100644
index 000000000000..5d46bdc79460
--- /dev/null
+++ b/drivers/net/ethernet/broadcom/apm.h
@@ -0,0 +1,617 @@
+/*
+ * Copyright (C) 2016 Broadcom
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+#ifndef _APM_H
+#define _APM_H
+
+#include <linux/netdevice.h>
+
+#define APM_DEV_CTL						0x000
+//#define  APM_DC_TSM					0x00000002
+#define  APM_DC_TSM						0x00000001
+#define  APM_DC_ROCS					0x00000002
+#define  APM_DC_CFCO					0x00000004
+//#define  APM_DC_MROR					0x00000010
+//#define  APM_DC_RLSS				 	0x00000008
+#define  APM_DC_FCM_MASK				0x00000060
+#define  APM_DC_FCM_SHIFT				5
+//#define  APM_DC_NAE					0x00000080
+//#define  APM_DC_TF					0x00000100
+//#define  APM_DC_RDS_MASK				0x00030000
+//#define  APM_DC_RDS_SHIFT				16
+//#define  APM_DC_TDS_MASK				0x000c0000
+//#define  APM_DC_TDS_SHIFT				18
+
+#define APM_DEV_STATUS					0x004		/* Configuration of the interface */
+#define  APM_DS_RBF						0x00000001
+#define  APM_DS_RDF						0x00000002
+#define  APM_DS_RIF						0x00000004
+//#define  APM_DS_TBF					0x00000008
+#define  APM_DS_TDF						0x00000010
+//#define  APM_DS_TIF					0x00000020
+#define  APM_DS_PO						0x00000040
+//#define  APM_DS_MM_MASK				0x00000300	/* Mode of the interface */
+//#define  APM_DS_MM_SHIFT				8
+#define  APM_DS_RQS_MASK				0x000f0000
+#define  APM_DS_RQS_SHIFT				16
+#define  APM_DS_TQS_MASK				0x00f00000
+#define  APM_DS_TQS_SHIFT				20
+#define  APM_DS_TOC_MASK				0x3f000000
+#define  APM_DS_TOC_SHIFT				24
+
+//#define APM_BIST_STATUS				0x00c
+
+#define APM_DATA_SWAP_CTL				0x010
+#define  APM_DSC_TBSWD					0x00000001
+#define  APM_DSC_TDS					0x00000002
+#define  APM_DSC_RBSWD					0x00000004
+#define  APM_DSC_RDS					0x00000008
+
+#define APM_ERROR_STATIS				0x014
+#define  APM_ES_DESC_READ_ERR_TC0		0x00000001
+#define  APM_ES_DESC_READ_ERR_TC1		0x00000002
+#define  APM_ES_DESC_READ_ERR_TC2		0x00000004
+#define  APM_ES_DESC_READ_ERR_TC3		0x00000008
+#define  APM_ES_DESC_READ_ERR_RC0		0x00000010
+#define  APM_ES_DATA_ERR_TC0			0x00000100
+#define  APM_ES_DATA_ERR_TC1			0x00000200
+#define  APM_ES_DATA_ERR_TC2			0x00000400
+#define  APM_ES_DATA_ERR_TC3			0x00000800
+#define  APM_ES_DATA_ERR_RC0			0x00001000
+#define  APM_ES_DESC_PROT_ERR_TC0		0x00010000
+#define  APM_ES_DESC_PROT_ERR_TC1		0x00020000
+#define  APM_ES_DESC_PROT_ERR_TC2		0x00040000
+#define  APM_ES_DESC_PROT_ERR_TC3		0x00080000
+#define  APM_ES_DESC_PROT_ERR_RC0		0x00100000
+
+#define APM_INT_STATUS					0x020		/* Interrupt status */
+//#define  APM_IS_MRO					0x00000001
+//#define  APM_IS_MTO					0x00000002
+//#define  APM_IS_TFD					0x00000004
+//#define  APM_IS_LS					0x00000008
+//#define  APM_IS_MDIO					0x00000010
+//#define  APM_IS_MR					0x00000020
+//#define  APM_IS_MT					0x00000040
+#define  APM_IS_TO						0x00000080	/* Timeout */
+#define  APM_IS_SL_SC					0x00000100  /* Software link status change */
+#define  APM_IS_PM_LS					0x00000200  /* Port Macro link status */
+#define  APM_IS_DESC_ERR				0x00000400	/* Descriptor error */
+#define  APM_IS_DATA_ERR				0x00000800	/* Data error */
+#define  APM_IS_DESC_PROT_ERR			0x00001000	/* Descriptor protocol error */
+#define  APM_IS_RX_DESC_UNDERF			0x00002000	/* Receive descriptor underflow */
+#define  APM_IS_RX_F_OVERF				0x00004000	/* Receive FIFO overflow */
+//#define  APM_IS_TX_F_UNDERF			0x00008000	/* Transmit FIFO underflow */
+#define  APM_IS_RX						0x00010000	/* Interrupt for RX queue 0 */
+#define  APM_IS_RX_INFO_ECC_CORR		0x00100000	/* RXQ info memory corrected error */
+#define  APM_IS_RX_INFO_ECC_UNCORR		0x00200000	/* RXQ info memory uncorrected error */
+#define  APM_IS_AXI_SHARED_ECC_CORR		0x00400000	/* AXI share memory corrected error */
+#define  APM_IS_AXI_SHARED_ECC_UNCORR	0x00800000	/* AXI share memory uncorrected error */
+#define  APM_IS_TX0						0x01000000	/* Interrupt for TX queue 0 */
+#define  APM_IS_TX1						0x02000000	/* Interrupt for TX queue 1 */
+#define  APM_IS_TX2						0x04000000	/* Interrupt for TX queue 2 */
+#define  APM_IS_TX3						0x08000000	/* Interrupt for TX queue 3 */
+#define  APM_IS_ECC_MASK				0x00f00000
+#define  APM_IS_TX_MASK					0x0f000000
+//#define  APM_IS_INTMASK				0x0f01fcff
+#define  APM_IS_INTMASK					0x0ff17f80
+//#define  APM_IS_ERRMASK				0x0000fc00
+#define  APM_IS_ERRMASK					0x00007c00
+
+#define APM_INT_MASK							0x024		/* Interrupt mask */
+#define APM_GP_TIMER							0x028
+
+#define APM_TXQ_COMMON_CTL						0x040
+#define  APM_TCCTL_FLUSH_CREDIT					0x00000001
+#define  APM_TCCTL_FUNC_MODE_MASK				0x00000006
+#define  APM_TCCTL_FUNC_MODE_SHIFT				1
+#define   APM_FUNC_MODE_SINGLE					0
+#define   APM_FUNC_MODE_DUAL					1
+#define   APM_FUNC_MODE_QUAD					2
+#define  APM_TCCTL_WR_FUNC_MODE					0x00000008
+#define  APM_TCCTL_INTERRUPT_SEL				0x00000010
+
+#define APM_TXQ_DATA_TXREQ_CTL0					0x044
+#define APM_TXQ_DATA_TXREQ_CTL1					0x048
+#define APM_TXQ_SHARED_BUF_DEPTH0				0x050
+#define APM_TXQ_SHARED_BUF_DEPTH1				0x054
+#define APM_RXQ_BUF_DEPTH						0x058
+#define APM_DMA_TOTAL_OUTSTD_TRANS_LIMIT		0x080
+#define APM_DMA_RD_PER_ID_OUTSTD_TRANS_LIMIT	0x084
+#define APM_PKT_DMA_RD_AXI_MAP_CTRL				0x088
+#define APM_RX_PKT_DMA_WR_AXI_MAP_CTRL			0x08c
+#define APM_TX_PKT_DMA_RD_ARB_CTRL				0x090
+#define APM_RX_PKT_DMA_RD_ARB_CTRL				0x094
+#define APM_RX_PKT_DMA_WR_ARB_CTRL				0x098
+#define APM_RCBUF_MAX_FLIST_ENTRIES				0x09c
+#define APM_STAT_COUNTER_CTL					0x0a0
+#define APM_STAT_RXQ_TRANSFERRED_PKT_CNT		0x0b0
+#define APM_STAT_RXQ_COMPLETE_PKT_DROP_CNT		0x0b4
+#define APM_STAT_RXQ_PARTIAL_PKT_DROP_CNT		0x0b8
+#define APM_STAT_RXQ_TRUNCATED_PKT_CNT			0x0bc
+#define APM_STAT_TXQ_CH0_GOOD_PKT_CNT			0x0c0
+#define APM_STAT_TXQ_CH0_ERR_PKT_CNT			0x0c4
+#define APM_STAT_TXQ_CH1_GOOD_PKT_CNT			0x0c8
+#define APM_STAT_TXQ_CH1_ERR_PKT_CNT			0x0cc
+#define APM_STAT_TXQ_CH2_GOOD_PKT_CNT			0x0d0
+#define APM_STAT_TXQ_CH2_ERR_PKT_CNT			0x0d4
+#define APM_STAT_TXQ_CH3_GOOD_PKT_CNT			0x0d8
+#define APM_STAT_TXQ_CH3_ERR_PKT_CNT			0x0dc
+#define APM_DBG_TXQ_CH0_STM						0x0e0
+#define APM_DBG_TXQ_CH1_STM						0x0e4
+#define APM_DBG_TXQ_CH2_STM						0x0e8
+#define APM_DBG_TXQ_CH3_STM						0x0ec
+#define APM_DBG_RXQ_STM							0x0f0
+#define APM_DBG_DMA_HOSTRD_STM					0x0f8
+#define APM_DBG_DMA_HOSTWR_STM					0x0fc
+
+#define APM_INT_RECV_LAZY						0x100
+#define  APM_IRL_TO_MASK						0x00ffffff
+#define  APM_IRL_TO_SHIFT						0
+#define  APM_IRL_FC_MASK						0xff000000
+#define  APM_IRL_FC_SHIFT						24		/* Shift the number of interrupts triggered per received frame */
+#define APM_FLOW_CTL_THRESH						0x104		/* Flow control thresholds */
+#define APM_WRRTHRESH							0x108
+//#define APM_GMAC_IDLE_CNT_THRESH				0x10c
+//#define APM_PHY_ACCESS						0x180		/* PHY access address */
+//#define  APM_PA_DATA_MASK						0x0000ffff
+//#define  APM_PA_ADDR_MASK						0x001f0000
+//#define  APM_PA_ADDR_SHIFT					16
+//#define  APM_PA_REG_MASK						0x1f000000
+//#define  APM_PA_REG_SHIFT						24
+//#define  APM_PA_WRITE							0x20000000
+//#define  APM_PA_START							0x40000000
+//#define APM_PHY_CNTL							0x188		/* PHY control address */
+//#define  APM_PC_EPA_MASK						0x0000001f
+//#define  APM_PC_MCT_MASK						0x007f0000
+//#define  APM_PC_MCT_SHIFT						16
+//#define  APM_PC_MTE							0x00800000
+//#define APM_TXQ_CTL							0x18c
+//#define  APM_TXQ_CTL_DBT_MASK					0x00000fff
+//#define  APM_TXQ_CTL_DBT_SHIFT				0
+#define APM_RXQ_CTL								0x190
+//#define  APM_RXQ_CTL_DBT_MASK					0x00000fff
+#define  APM_RXQ_CTL_DBT_MASK					0x00000f7ff
+#define  APM_RXQ_CTL_DBT_SHIFT					0
+//#define  APM_RXQ_CTL_PTE						0x00001000
+//#define  APM_RXQ_CTL_MDP_MASK					0x3f000000
+//#define  APM_RXQ_CTL_MDP_SHIFT				24
+#define  APM_RXQ_CTL_RPT_EN						0x40000000
+
+//#define APM_GPIO_SELECT						0x194
+//#define APM_GPIO_OUTPUT_EN					0x198
+
+///* For 0x1e0 see BCMA_CLKCTLST. Below are APM specific bits */
+//#define  APM_BCMA_CLKCTLST_MISC_PLL_REQ		0x00000100
+//#define  APM_BCMA_CLKCTLST_MISC_PLL_ST		0x01000000
+
+//#define APM_HW_WAR							0x1e4
+//#define APM_PWR_CTL							0x1e8
+
+#define APM_MEM_ECC_CTL							0x1F0
+#define APM_MEM_ECC_STAT						0x1F4
+
+#define APM_DMA_BASE0							0x200	/* Tx and Rx controller */
+#define APM_DMA_BASE1							0x240	/* Tx controller only */
+#define APM_DMA_BASE2							0x280	/* Tx controller only */
+#define APM_DMA_BASE3							0x2C0	/* Tx controller only */
+
+//#define APM_TX_GOOD_OCTETS					0x300
+//#define APM_TX_GOOD_OCTETS_HIGH				0x304
+//#define APM_TX_GOOD_PKTS						0x308
+//#define APM_TX_OCTETS							0x30c
+//#define APM_TX_OCTETS_HIGH					0x310
+//#define APM_TX_PKTS							0x314
+//#define APM_TX_BROADCAST_PKTS					0x318
+//#define APM_TX_MULTICAST_PKTS					0x31c
+//#define APM_TX_LEN_64							0x320
+//#define APM_TX_LEN_65_TO_127					0x324
+//#define APM_TX_LEN_128_TO_255					0x328
+//#define APM_TX_LEN_256_TO_511					0x32c
+//#define APM_TX_LEN_512_TO_1023				0x330
+//#define APM_TX_LEN_1024_TO_1522				0x334
+//#define APM_TX_LEN_1523_TO_2047				0x338
+//#define APM_TX_LEN_2048_TO_4095				0x33c
+//#define APM_TX_LEN_4096_TO_8191				0x340
+//#define APM_TX_LEN_8192_TO_MAX				0x344
+//#define APM_TX_JABBER_PKTS					0x348		/* Error */
+//#define APM_TX_OVERSIZE_PKTS					0x34c		/* Error */
+//#define APM_TX_FRAGMENT_PKTS					0x350
+//#define APM_TX_UNDERRUNS						0x354		/* Error */
+//#define APM_TX_TOTAL_COLS						0x358
+//#define APM_TX_SINGLE_COLS					0x35c
+//#define APM_TX_MULTIPLE_COLS					0x360
+//#define APM_TX_EXCESSIVE_COLS					0x364		/* Error */
+//#define APM_TX_LATE_COLS						0x368		/* Error */
+//#define APM_TX_DEFERED						0x36c
+//#define APM_TX_CARRIER_LOST					0x370
+//#define APM_TX_PAUSE_PKTS						0x374
+//#define APM_TX_UNI_PKTS						0x378
+//#define APM_TX_Q0_PKTS						0x37c
+//#define APM_TX_Q0_OCTETS						0x380
+//#define APM_TX_Q0_OCTETS_HIGH					0x384
+//#define APM_TX_Q1_PKTS						0x388
+//#define APM_TX_Q1_OCTETS						0x38c
+//#define APM_TX_Q1_OCTETS_HIGH					0x390
+//#define APM_TX_Q2_PKTS						0x394
+//#define APM_TX_Q2_OCTETS						0x398
+//#define APM_TX_Q2_OCTETS_HIGH					0x39c
+//#define APM_TX_Q3_PKTS						0x3a0
+//#define APM_TX_Q3_OCTETS						0x3a4
+//#define APM_TX_Q3_OCTETS_HIGH					0x3a8
+//#define APM_RX_GOOD_OCTETS					0x3b0
+//#define APM_RX_GOOD_OCTETS_HIGH				0x3b4
+//#define APM_RX_GOOD_PKTS						0x3b8
+//#define APM_RX_OCTETS							0x3bc
+//#define APM_RX_OCTETS_HIGH					0x3c0
+//#define APM_RX_PKTS							0x3c4
+//#define APM_RX_BROADCAST_PKTS					0x3c8
+//#define APM_RX_MULTICAST_PKTS					0x3cc
+//#define APM_RX_LEN_64							0x3d0
+//#define APM_RX_LEN_65_TO_127					0x3d4
+//#define APM_RX_LEN_128_TO_255					0x3d8
+//#define APM_RX_LEN_256_TO_511					0x3dc
+//#define APM_RX_LEN_512_TO_1023				0x3e0
+//#define APM_RX_LEN_1024_TO_1522				0x3e4
+//#define APM_RX_LEN_1523_TO_2047				0x3e8
+//#define APM_RX_LEN_2048_TO_4095				0x3ec
+//#define APM_RX_LEN_4096_TO_8191				0x3f0
+//#define APM_RX_LEN_8192_TO_MAX				0x3f4
+//#define APM_RX_JABBER_PKTS					0x3f8		/* Error */
+//#define APM_RX_OVERSIZE_PKTS					0x3fc		/* Error */
+//#define APM_RX_FRAGMENT_PKTS					0x400
+//#define APM_RX_MISSED_PKTS					0x404		/* Error */
+//#define APM_RX_CRC_ALIGN_ERRS					0x408		/* Error */
+//#define APM_RX_UNDERSIZE						0x40c		/* Error */
+//#define APM_RX_CRC_ERRS						0x410		/* Error */
+//#define APM_RX_ALIGN_ERRS						0x414		/* Error */
+//#define APM_RX_SYMBOL_ERRS					0x418		/* Error */
+//#define APM_RX_PAUSE_PKTS						0x41c
+//#define APM_RX_NONPAUSE_PKTS					0x420
+//#define APM_RX_SACHANGES						0x424
+//#define APM_RX_UNI_PKTS						0x428
+//#define APM_UNIMAC_VERSION					0x800
+//#define APM_HDBKP_CTL							0x804
+//#define APM_CMDCFG							0x808		/* Configuration */
+//#define  APM_CMDCFG_TE						0x00000001	/* Set to activate TX */
+//#define  APM_CMDCFG_RE						0x00000002	/* Set to activate RX */
+//#define  APM_CMDCFG_ES_MASK					0x0000000c	/* Ethernet speed see gmac_speed */
+//#define   APM_CMDCFG_ES_10					0x00000000
+//#define   APM_CMDCFG_ES_100					0x00000004
+//#define   APM_CMDCFG_ES_1000					0x00000008
+//#define   APM_CMDCFG_ES_2500					0x0000000C
+//#define  APM_CMDCFG_PROM						0x00000010	/* Set to activate promiscuous mode */
+//#define  APM_CMDCFG_PAD_EN					0x00000020
+//#define  APM_CMDCFG_CF						0x00000040
+//#define  APM_CMDCFG_PF						0x00000080
+//#define  APM_CMDCFG_RPI						0x00000100	/* Unset to enable 802.3x tx flow control */
+//#define  APM_CMDCFG_TAI						0x00000200
+//#define  APM_CMDCFG_HD						0x00000400	/* Set if in half duplex mode */
+//#define  APM_CMDCFG_HD_SHIFT					10
+//#define  APM_CMDCFG_SR_REV0					0x00000800	/* Set to reset mode, for core rev 0-3 */
+//#define  APM_CMDCFG_SR_REV4					0x00002000	/* Set to reset mode, for core rev >= 4 */
+//#define  APM_CMDCFG_ML						0x00008000	/* Set to activate mac loopback mode */
+//#define  APM_CMDCFG_AE						0x00400000
+//#define  APM_CMDCFG_CFE						0x00800000
+//#define  APM_CMDCFG_NLC						0x01000000
+//#define  APM_CMDCFG_RL						0x02000000
+//#define  APM_CMDCFG_RED						0x04000000
+//#define  APM_CMDCFG_PE						0x08000000
+//#define  APM_CMDCFG_TPI						0x10000000
+//#define  APM_CMDCFG_AT						0x20000000
+//#define APM_MACADDR_HIGH						0x80c		/* High 4 octets of own mac address */
+//#define APM_MACADDR_LOW						0x810		/* Low 2 octets of own mac address */
+//#define APM_RXMAX_LENGTH						0x814		/* Max receive frame length with vlan tag */
+//#define APM_PAUSEQUANTA						0x818
+//#define APM_MAC_MODE							0x844
+//#define APM_OUTERTAG							0x848
+//#define APM_INNERTAG							0x84c
+//#define APM_TXIPG								0x85c
+//#define APM_PAUSE_CTL							0xb30
+//#define APM_TX_FLUSH							0xb34
+//#define APM_RX_STATUS							0xb38
+//#define APM_TX_STATUS							0xb3c
+//
+///* BCMA GMAC core specific IO Control (BCMA_IOCTL) flags */
+//#define APM_BCMA_IOCTL_SW_CLKEN				0x00000004	/* PHY Clock Enable */
+//#define APM_BCMA_IOCTL_SW_RESET				0x00000008	/* PHY Reset */
+//
+///* BCMA GMAC core specific IO status (BCMA_IOST) flags */
+//#define APM_BCMA_IOST_ATTACHED				0x00000800
+//
+//#define APM_NUM_MIB_TX_REGS	(((APM_TX_Q3_OCTETS_HIGH - APM_TX_GOOD_OCTETS) / 4) + 1)
+//#define APM_NUM_MIB_RX_REGS	(((APM_RX_UNI_PKTS - APM_RX_GOOD_OCTETS) / 4) + 1)
+
+#define APM_DMA_TX_CTL							0x00
+#define  APM_DMA_TX_ENABLE						0x00000001
+#define  APM_DMA_TX_SUSPEND						0x00000002
+//#define  APM_DMA_TX_LOOPBACK					0x00000004
+//#define  APM_DMA_TX_FLUSH						0x00000010
+//#define  APM_DMA_TX_MR_MASK					0x000000C0	/* Multiple outstanding reads */
+//#define  APM_DMA_TX_MR_SHIFT					6
+//#define   APM_DMA_TX_MR_1						0
+//#define   APM_DMA_TX_MR_2						1
+//#define  APM_DMA_TX_PARITY_DISABLE			0x00000800
+#define  APM_DMA_TX_SBAI						0x00002000
+//#define  APM_DMA_TX_ADDREXT_MASK				0x00030000
+//#define  APM_DMA_TX_ADDREXT_SHIFT				16
+#define  APM_DMA_TX_BL_MASK						0x001C0000	/* BurstLen bits */
+#define  APM_DMA_TX_BL_SHIFT					18
+#define   APM_DMA_TX_BL_16						0
+#define   APM_DMA_TX_BL_32						1
+#define   APM_DMA_TX_BL_64						2
+#define   APM_DMA_TX_BL_128						3
+//#define   APM_DMA_TX_BL_256					4
+//#define   APM_DMA_TX_BL_512					5
+//#define   APM_DMA_TX_BL_1024					6
+#define  APM_DMA_TX_PC_MASK						0x00E00000	/* Prefetch control */
+#define  APM_DMA_TX_PC_SHIFT					21
+#define   APM_DMA_TX_PC_0						0
+#define   APM_DMA_TX_PC_4						1
+#define   APM_DMA_TX_PC_8						2
+#define   APM_DMA_TX_PC_16						3
+#define  APM_DMA_TX_PT_MASK						0x03000000	/* Prefetch threshold */
+#define  APM_DMA_TX_PT_SHIFT					24
+#define   APM_DMA_TX_PT_1						0
+#define   APM_DMA_TX_PT_2						1
+#define   APM_DMA_TX_PT_4						2
+#define   APM_DMA_TX_PT_8						3
+
+#define APM_DMA_TX_INDEX						0x04
+#define APM_DMA_TX_RINGLO						0x08
+#define APM_DMA_TX_RINGHI						0x0C
+#define APM_DMA_TX_STATUS						0x10
+#define  APM_DMA_TX_STATDPTR					0x00001FFF
+#define  APM_DMA_TX_STAT						0xF0000000
+#define   APM_DMA_TX_STAT_DISABLED				0x00000000
+#define   APM_DMA_TX_STAT_ACTIVE				0x10000000
+#define   APM_DMA_TX_STAT_IDLEWAIT				0x20000000
+#define   APM_DMA_TX_STAT_STOPPED				0x30000000
+#define   APM_DMA_TX_STAT_SUSP					0x40000000
+#define APM_DMA_TX_ERROR						0x14
+#define  APM_DMA_TX_ERRDPTR						0x0001FFFF
+#define  APM_DMA_TX_ERR							0xF0000000
+#define   APM_DMA_TX_ERR_NOERR					0x00000000
+#define   APM_DMA_TX_ERR_PROT					0x10000000
+//#define   APM_DMA_TX_ERR_UNDERRUN				0x20000000
+#define   APM_DMA_TX_ERR_TRANSFER				0x30000000
+#define   APM_DMA_TX_ERR_DESCREAD				0x40000000
+#define   APM_DMA_TX_ERR_CORE					0x50000000
+
+#define APM_DMA_RX_CTL							0x20
+#define  APM_DMA_RX_ENABLE						0x00000001
+#define  APM_DMA_RX_FRAME_OFFSET_MASK			0x000000FE
+#define  APM_DMA_RX_FRAME_OFFSET_SHIFT			1
+//#define  APM_DMA_RX_DIRECT_FIFO				0x00000100
+#define  APM_DMA_RX_OVERFLOW_CONT				0x00000400
+//#define  APM_DMA_RX_PARITY_DISABLE			0x00000800
+//#define  APM_DMA_RX_MR_MASK					0x000000C0	/* Multiple outstanding reads */
+//#define  APM_DMA_RX_MR_SHIFT					6
+//#define   APM_DMA_TX_MR_1						0
+//#define   APM_DMA_TX_MR_2						1
+//#define  APM_DMA_RX_ADDREXT_MASK				0x00030000
+//#define  APM_DMA_RX_ADDREXT_SHIFT				16
+#define  APM_DMA_RX_BL_MASK						0x001C0000	/* BurstLen bits */
+#define  APM_DMA_RX_BL_SHIFT					18
+#define   APM_DMA_RX_BL_16						0
+#define   APM_DMA_RX_BL_32						1
+#define   APM_DMA_RX_BL_64						2
+#define   APM_DMA_RX_BL_128						3
+//#define   APM_DMA_RX_BL_256					4
+//#define   APM_DMA_RX_BL_512					5
+//#define   APM_DMA_RX_BL_1024					6
+#define  APM_DMA_RX_PC_MASK						0x00E00000	/* Prefetch control */
+#define  APM_DMA_RX_PC_SHIFT					21
+#define   APM_DMA_RX_PC_0						0
+#define   APM_DMA_RX_PC_4						1
+#define   APM_DMA_RX_PC_8						2
+#define   APM_DMA_RX_PC_16						3
+#define  APM_DMA_RX_PT_MASK						0x03000000	/* Prefetch threshold */
+#define  APM_DMA_RX_PT_SHIFT					24
+#define   APM_DMA_RX_PT_1						0
+#define   APM_DMA_RX_PT_2						1
+#define   APM_DMA_RX_PT_4						2
+#define   APM_DMA_RX_PT_8						3
+#define APM_DMA_RX_INDEX						0x24
+#define APM_DMA_RX_RINGLO						0x28
+#define APM_DMA_RX_RINGHI						0x2C
+#define APM_DMA_RX_STATUS						0x30
+#define  APM_DMA_RX_STATDPTR					0x00001FFF
+#define  APM_DMA_RX_STAT						0xF0000000
+#define   APM_DMA_RX_STAT_DISABLED				0x00000000
+#define   APM_DMA_RX_STAT_ACTIVE				0x10000000
+#define   APM_DMA_RX_STAT_IDLEWAIT				0x20000000
+#define   APM_DMA_RX_STAT_STOPPED				0x30000000
+//#define   APM_DMA_RX_STAT_SUSP				0x40000000
+#define APM_DMA_RX_ERROR						0x34
+#define  APM_DMA_RX_ERRDPTR						0x0001FFFF
+#define  APM_DMA_RX_ERR							0xF0000000
+#define   APM_DMA_RX_ERR_NOERR					0x00000000
+#define   APM_DMA_RX_ERR_PROT					0x10000000
+#define   APM_DMA_RX_ERR_UNDERRUN				0x20000000
+#define   APM_DMA_RX_ERR_TRANSFER				0x30000000
+#define   APM_DMA_RX_ERR_DESCREAD				0x40000000
+#define   APM_DMA_RX_ERR_CORE					0x50000000
+
+
+
+
+
+
+#define APM_DESC_CTL0_CRC						0x00300000  /* CRC mode */
+#define APM_DESC_CRC_APPEND						0x00000000	/* CRC append mode */
+#define APM_DESC_CRC_OVERWRITE					0x00100000	/* CRC overwrite mode */
+#define APM_DESC_CRC_FORWARD					0x00200000	/* CRC forward mode */
+#define APM_DESC_CTL0_EOT						0x10000000	/* End of ring */
+#define APM_DESC_CTL0_IOC						0x20000000	/* IRQ on complete */
+#define APM_DESC_CTL0_EOF						0x40000000	/* End of frame */
+#define APM_DESC_CTL0_SOF						0x80000000	/* Start of frame */
+//#define APM_DESC_CTL1_LEN						0x00001FFF
+#define APM_DESC_CTL1_LEN						0x00007FFF
+
+//#define APM_PHY_NOREGS						BRCM_PSEUDO_PHY_ADDR
+//#define APM_PHY_MASK							0x1F
+
+#define APM_MAX_TX_RINGS						4
+#define APM_MAX_RX_RINGS						1
+#define APM_TX_MAX_DESCS						512
+#define APM_RX_MAX_DESCS						512
+
+#define APM_RX_HEADER_LEN						28		/* Last 24 bytes are unused. Well... */
+#define APM_RX_FRAME_OFFSET						30		/* There are 2 unused bytes between header and real data */
+#define APM_RX_BUF_OFFSET						(NET_SKB_PAD + NET_IP_ALIGN - APM_RX_FRAME_OFFSET)
+#define APM_RX_MAX_FRAME_SIZE					1536	/* Copied from b44/tg3 */
+#define APM_RX_BUF_SIZE			(APM_RX_FRAME_OFFSET + APM_RX_MAX_FRAME_SIZE)
+#define APM_RX_ALLOC_SIZE		(SKB_DATA_ALIGN(APM_RX_BUF_SIZE + APM_RX_BUF_OFFSET) + \
+								 SKB_DATA_ALIGN(sizeof(struct skb_shared_info)))
+
+//#define APM_BFL_ENETROBO						0x0010		/* has ephy roboswitch spi */
+//#define APM_BFL_ENETADM						0x0080		/* has ADMtek switch */
+//#define APM_BFL_ENETVLAN						0x0100		/* can do vlan */
+
+//#define APM_CHIPCTL_1_IF_TYPE_MASK			0x00000030
+//#define APM_CHIPCTL_1_IF_TYPE_RMII			0x00000000
+//#define APM_CHIPCTL_1_IF_TYPE_MII				0x00000010
+//#define APM_CHIPCTL_1_IF_TYPE_RGMII			0x00000020
+//#define APM_CHIPCTL_1_SW_TYPE_MASK			0x000000C0
+//#define APM_CHIPCTL_1_SW_TYPE_EPHY			0x00000000
+//#define APM_CHIPCTL_1_SW_TYPE_EPHYMII			0x00000040
+//#define APM_CHIPCTL_1_SW_TYPE_EPHYRMII		0x00000080
+//#define APM_CHIPCTL_1_SW_TYPE_RGMII			0x000000C0
+//#define APM_CHIPCTL_1_RXC_DLL_BYPASS			0x00010000
+//
+//#define APM_CHIPCTL_4_IF_TYPE_MASK			0x00003000
+//#define APM_CHIPCTL_4_IF_TYPE_RMII			0x00000000
+//#define APM_CHIPCTL_4_IF_TYPE_MII				0x00001000
+//#define APM_CHIPCTL_4_IF_TYPE_RGMII			0x00002000
+//#define APM_CHIPCTL_4_SW_TYPE_MASK			0x0000C000
+//#define APM_CHIPCTL_4_SW_TYPE_EPHY			0x00000000
+//#define APM_CHIPCTL_4_SW_TYPE_EPHYMII			0x00004000
+//#define APM_CHIPCTL_4_SW_TYPE_EPHYRMII		0x00008000
+//#define APM_CHIPCTL_4_SW_TYPE_RGMII			0x0000C000
+//
+//#define APM_CHIPCTL_7_IF_TYPE_MASK			0x000000C0
+//#define APM_CHIPCTL_7_IF_TYPE_RMII			0x00000000
+//#define APM_CHIPCTL_7_IF_TYPE_MII				0x00000040
+//#define APM_CHIPCTL_7_IF_TYPE_RGMII			0x00000080
+
+#define APM_WEIGHT	64
+#define ETHER_MAX_LEN   1518
+
+/* Feature flags */
+#define APM_FEAT_TX_MASK_SETUP		BIT(0)
+#define APM_FEAT_RX_MASK_SETUP		BIT(1)
+
+/* Loopback flags */
+#define APM_LOOPBACK_TYPE_NONE			0
+#define APM_LOOPBACK_TYPE_MAC			1
+#define APM_LOOPBACK_TYPE_PHY			2
+
+struct apm_slot_info {
+	union {
+		struct sk_buff *skb;
+		void *buf;
+	};
+	dma_addr_t dma_addr;
+};
+
+struct apm_dma_desc {
+	__le32 ctl0;
+	__le32 ctl1;
+	__le32 addr_low;
+	__le32 addr_high;
+} __packed;
+
+enum apm_dma_ring_type {
+	APM_DMA_RING_TYPE_TX = 0,
+	APM_DMA_RING_TYPE_RX,
+	APM_DMA_RING_TYPE_NUM
+};
+
+/**
+ * apm_dma_ring - contains info about DMA ring (either TX or RX one)
+ * @start: index of the first slot containing data
+ * @end: index of a slot that can *not* be read (yet)
+ *
+ * Be really aware of the specific @end meaning. It's an index of a slot *after*
+ * the one containing data that can be read. If @start equals @end the ring is
+ * empty.
+ */
+struct apm_dma_ring {
+	u32 start;
+	u32 end;
+
+	int desc_num;
+	struct apm_dma_desc *desc_base;
+	dma_addr_t dma_base;
+	u32 index_base; /* Used for unaligned rings only, otherwise 0 */
+	u16 mmio_base;
+	bool unaligned;
+
+	struct apm_slot_info *slots;
+};
+
+
+struct apm_rx_header {
+	__le16 len;
+	__le16 flags;
+	__le16 pad[12];
+};
+
+struct apm {
+	union {
+		struct {
+			void *base;
+			void *idm_base;
+		} plat;
+	};
+
+	struct device *dev;
+	struct device *dma_dev;
+
+	struct iproc_pm_ops *pm_ops;
+	u8 land_idx;
+
+	u8 mac_addr[ETH_ALEN];
+	u32 feature_flags;
+
+	struct net_device *net_dev;
+	struct napi_struct napi;
+	struct mii_bus *mii_bus;
+
+	/* DMA */
+	struct apm_dma_desc *desc_buf;
+	dma_addr_t dma_addr;
+	struct apm_slot_info *slot_buf;
+
+	struct apm_dma_ring tx_ring[APM_MAX_TX_RINGS];
+	struct apm_dma_ring rx_ring[APM_MAX_RX_RINGS];
+
+	/* QoS */
+	u8 tx_channel;
+	bool strict_mode;
+
+	/* Int */
+	int irq0;
+	int irq1;
+	int irq2;
+	u32 int_mask;
+
+	/* Current MAC state */
+	int mac_speed;
+	int mac_duplex;
+
+	u8 phyaddr;
+	bool loopback;
+};
+
+extern int apm_ethtool_init(struct net_device *net_dev);
+#endif /* _APM_H */
diff --git a/drivers/net/ethernet/broadcom/apm_ethtool.c b/drivers/net/ethernet/broadcom/apm_ethtool.c
new file mode 100644
index 000000000000..e9cf93a163b3
--- /dev/null
+++ b/drivers/net/ethernet/broadcom/apm_ethtool.c
@@ -0,0 +1,227 @@
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/netdevice.h>
+#include <linux/ethtool.h>
+#include <linux/phy.h>
+
+#include "pm.h"
+#include "apm.h"
+
+static const struct {
+	const char name[ETH_GSTRING_LEN];
+} apm_stat_name[] = {
+	{ "rx_frames" },
+	{ "rx_frame_good" },
+	{ "rx_bytes" },
+	{ "rx_frame_64" },
+	{ "rx_frame_127" },
+	{ "rx_frame_255" },
+	{ "rx_frame_511" },
+	{ "rx_frame_1023" },
+	{ "rx_frame_1518" },
+	{ "rx_frame_1522" },
+	{ "rx_frame_jumbo" },
+	{ "rx_frame_unicast" },
+	{ "rx_frame_multicast" },
+	{ "rx_frame_broadcast" },
+	{ "rx_frame_control" },
+	{ "rx_frame_pause" },
+	{ "rx_frame_jabber" },
+	{ "rx_frame_fragment" },
+	{ "rx_frame_vlan" },
+	{ "rx_frame_dvlan" },
+	{ "rx_frame_fcs_error" },
+	{ "rx_frame_unsupport" },
+	{ "rx_frame_wrong_sa" },
+	{ "rx_frame_align_err" },
+	{ "rx_frame_length_err" },
+	{ "rx_frame_oversize" },
+	{ "rx_frame_mtu_err" },
+	{ "rx_frame_truncated_err" },
+	{ "rx_frame_undersize" },
+	{ "tx_frames" },
+	{ "tx_frame_good" },
+	{ "tx_bytes" },
+	{ "tx_frame_64" },
+	{ "tx_frame_127" },
+	{ "tx_frame_255" },
+	{ "tx_frame_511" },
+	{ "tx_frame_1023" },
+	{ "tx_frame_1518" },
+	{ "tx_frame_1522" },
+	{ "tx_frame_jumbo" },
+	{ "tx_frame_unicast" },
+	{ "tx_frame_multicast" },
+	{ "tx_frame_broadcast" },
+	{ "tx_frame_control" },
+	{ "tx_frame_pause" },
+	{ "tx_frame_jabber" },
+	{ "tx_frame_fragment" },
+	{ "tx_frame_vlan" },
+	{ "tx_frame_dvlan" },
+	{ "tx_frame_fcs_error" },
+	{ "tx_frame_oversize" },
+	{ "tx_frame_error" },
+	{ "tx_frame_fifo_underrun" },
+	{ "tx_frame_collision" },
+};
+
+static int apm_get_sset_count(struct net_device *net_dev, int sset)
+{
+	switch (sset) {
+		case ETH_SS_STATS:
+			return ARRAY_SIZE(apm_stat_name);
+		default:
+			return -EOPNOTSUPP;
+	}
+
+	return 0;
+}
+
+static void apm_get_strings(struct net_device *net_dev, u32 stringset,
+			      u8 *data)
+{
+	if (stringset == ETH_SS_STATS) {
+		memcpy(data, apm_stat_name, sizeof(apm_stat_name));
+	}
+}
+
+static void apm_get_ethtool_stats(struct net_device *net_dev,
+				    struct ethtool_stats *ss, uint64_t *data)
+{
+	struct apm *apm = netdev_priv(net_dev);
+	struct iproc_pm_ops *pm_ops = apm->pm_ops;
+	struct iproc_pm_stats stats;
+	int i = 0;
+
+	if (pm_ops) {
+		pm_ops->port_stats(apm->land_idx, &stats);
+
+		data[i++] = stats.rx_frames;
+		data[i++] = stats.rx_frame_good;
+		data[i++] = stats.rx_bytes;
+		data[i++] = stats.rx_frame_64;
+		data[i++] = stats.rx_frame_127;
+		data[i++] = stats.rx_frame_255;
+		data[i++] = stats.rx_frame_511;
+		data[i++] = stats.rx_frame_1023;
+		data[i++] = stats.rx_frame_1518;
+		data[i++] = stats.rx_frame_1522;
+		data[i++] = stats.rx_frame_jumbo;
+		data[i++] = stats.rx_frame_unicast;
+		data[i++] = stats.rx_frame_multicast;
+		data[i++] = stats.rx_frame_broadcast;
+		data[i++] = stats.rx_frame_control;
+		data[i++] = stats.rx_frame_pause;
+		data[i++] = stats.rx_frame_jabber;
+		data[i++] = stats.rx_frame_fragment;
+		data[i++] = stats.rx_frame_vlan;
+		data[i++] = stats.rx_frame_dvlan;
+		data[i++] = stats.rx_frame_fcs_error;
+		data[i++] = stats.rx_frame_unsupport;
+		data[i++] = stats.rx_frame_wrong_sa;
+		data[i++] = stats.rx_frame_align_err;
+		data[i++] = stats.rx_frame_length_err;
+		data[i++] = stats.rx_frame_oversize;
+		data[i++] = stats.rx_frame_mtu_err;
+		data[i++] = stats.rx_frame_truncated_err;
+		data[i++] = stats.rx_frame_undersize;
+		data[i++] = stats.tx_frames;
+		data[i++] = stats.tx_frame_good;
+		data[i++] = stats.tx_bytes;
+		data[i++] = stats.tx_frame_64;
+		data[i++] = stats.tx_frame_127;
+		data[i++] = stats.tx_frame_255;
+		data[i++] = stats.tx_frame_511;
+		data[i++] = stats.tx_frame_1023;
+		data[i++] = stats.tx_frame_1518;
+		data[i++] = stats.tx_frame_1522;
+		data[i++] = stats.tx_frame_jumbo;
+		data[i++] = stats.tx_frame_unicast;
+		data[i++] = stats.tx_frame_multicast;
+		data[i++] = stats.tx_frame_broadcast;
+		data[i++] = stats.tx_frame_control;
+		data[i++] = stats.tx_frame_pause;
+		data[i++] = stats.tx_frame_jabber;
+		data[i++] = stats.tx_frame_fragment;
+		data[i++] = stats.tx_frame_vlan;
+		data[i++] = stats.tx_frame_dvlan;
+		data[i++] = stats.tx_frame_fcs_error;
+		data[i++] = stats.tx_frame_oversize;
+		data[i++] = stats.tx_frame_error;
+		data[i++] = stats.tx_frame_fifo_underrun;
+		data[i++] = stats.tx_frame_collision;
+	}
+}
+
+static int apm_dump_phy_regs(struct apm *apm, int try_run, char *reg_buf)
+{
+	struct phy_device *phydev = apm->net_dev->phydev;
+	int idx, len = 0;
+	char *buf, tmp[32];
+	u16 data = 0;
+
+	if (phydev) {
+		for (idx = 0; idx < 16; idx++) {
+			if (try_run || !reg_buf) {
+				buf = tmp;
+			} else {
+				buf = reg_buf + len;
+				data = phy_read(phydev, idx);
+			}
+			len += sprintf(buf, "PHY REG %d: 0x%.4x\n", idx, data);
+		}
+	}
+	return len;
+}
+
+static int apm_get_regs_len(struct net_device *dev)
+{
+	struct apm *apm = netdev_priv(dev);
+	u32 len = 0;
+
+	len += apm_dump_phy_regs(apm, 1, NULL);
+
+	return len;
+}
+
+static void apm_get_regs(struct net_device *dev,
+		struct ethtool_regs *regs, void *_p)
+{
+	struct apm *apm = netdev_priv(dev);
+	u32 len = 0;
+
+	regs->version = 0;
+
+	/* Dump phy register */
+	len += apm_dump_phy_regs(apm, 0, (char *)_p + len);
+}
+
+static void apm_get_drvinfo(struct net_device *net_dev,
+			      struct ethtool_drvinfo *info)
+{
+	strlcpy(info->driver, "apm", sizeof(info->driver));
+	strlcpy(info->version, "0.1", sizeof(info->version));
+	strlcpy(info->bus_info, "axi", sizeof(info->bus_info));
+	info->regdump_len = apm_get_regs_len(net_dev);
+}
+
+static const struct ethtool_ops apm_ethtool_ops = {
+	.get_regs			= apm_get_regs,
+	.get_regs_len		= apm_get_regs_len,
+	.get_strings		= apm_get_strings,
+	.get_sset_count		= apm_get_sset_count,
+	.get_ethtool_stats	= apm_get_ethtool_stats,
+	.get_drvinfo		= apm_get_drvinfo,
+	.get_link_ksettings     = phy_ethtool_get_link_ksettings,
+	.set_link_ksettings     = phy_ethtool_set_link_ksettings,
+};
+
+int apm_ethtool_init(struct net_device *net_dev)
+{
+	net_dev->ethtool_ops = &apm_ethtool_ops;
+	return 0;
+}
+
+
diff --git a/drivers/net/ethernet/broadcom/merlin16_ucode.h b/drivers/net/ethernet/broadcom/merlin16_ucode.h
new file mode 100644
index 000000000000..bb2999ab5b8b
--- /dev/null
+++ b/drivers/net/ethernet/broadcom/merlin16_ucode.h
@@ -0,0 +1,1977 @@
+/*
+ * $Id: merlin16_ucode.c $
+ * $Copyright: (c) 2013 Broadcom Corporation All Rights Reserved.$
+ * All Rights Reserved.$
+ */
+
+#define MERLIN16_UCODE_IMAGE_VERSION "D101_0C"  /* matches the version number from microcode */
+#define MERLIN16_UCODE_IMAGE_SIZE    31368
+#define MERLIN16_UCODE_IMAGE_CRC     0x2C25
+
+unsigned short merlin16_ucode_ver = 0xD101;
+unsigned short merlin16_ucode_crc = MERLIN16_UCODE_IMAGE_CRC; 
+unsigned short merlin16_ucode_len = MERLIN16_UCODE_IMAGE_SIZE; 
+
+unsigned char merlin16_ucode[] = {
+ 0xf0, 0x0f, 0x00, 0x20, 0x7d, 0x02, 0x00, 0x00, 0x51, 0x74, 0x00, 0x00, 0x5f, 0x74, 0x00, 0x00,
+ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6d, 0x74, 0x00, 0x00,
+ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x02, 0x00, 0x00, 0x7b, 0x74, 0x00, 0x00,
+ 0x89, 0x74, 0x00, 0x00, 0x97, 0x74, 0x00, 0x00, 0xd5, 0x74, 0x00, 0x00, 0xd5, 0x74, 0x00, 0x00,
+ 0xa5, 0x74, 0x00, 0x00, 0xab, 0x74, 0x00, 0x00, 0xb1, 0x74, 0x00, 0x00, 0xb7, 0x74, 0x00, 0x00,
+ 0xbd, 0x74, 0x00, 0x00, 0xc3, 0x74, 0x00, 0x00, 0xc9, 0x74, 0x00, 0x00, 0xcf, 0x74, 0x00, 0x00,
+ 0xd5, 0x74, 0x00, 0x00, 0xd5, 0x74, 0x00, 0x00, 0xd5, 0x74, 0x00, 0x00, 0xd5, 0x74, 0x00, 0x00,
+ 0xd5, 0x74, 0x00, 0x00, 0xd5, 0x74, 0x00, 0x00, 0xd5, 0x74, 0x00, 0x00, 0xd5, 0x74, 0x00, 0x00,
+ 0xd5, 0x74, 0x00, 0x00, 0xd5, 0x74, 0x00, 0x00, 0xd5, 0x74, 0x00, 0x00, 0xd5, 0x74, 0x00, 0x00,
+ 0xd5, 0x74, 0x00, 0x00, 0xd5, 0x74, 0x00, 0x00, 0xd5, 0x74, 0x00, 0x00, 0xd5, 0x74, 0x00, 0x00,
+ 0xd5, 0x74, 0x00, 0x00, 0xd5, 0x74, 0x00, 0x00, 0xd5, 0x74, 0x00, 0x00, 0xd5, 0x74, 0x00, 0x00,
+ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+ 0x49, 0x6e, 0x66, 0x35, 0x0c, 0x01, 0xd1, 0x00, 0x00, 0x03, 0x00, 0x01, 0x04, 0x24, 0x00, 0x01,
+ 0x00, 0x01, 0x00, 0x20, 0x00, 0x04, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x20,
+ 0x08, 0x00, 0x00, 0x00, 0x80, 0x00, 0x40, 0x00, 0x24, 0x04, 0x00, 0x20, 0x00, 0x0e, 0x00, 0x20,
+ 0x00, 0x0a, 0x00, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x20, 0x44, 0x04, 0x00, 0x20,
+ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+ 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+ 0x00, 0xf0, 0x02, 0xf8, 0x00, 0xf0, 0x3e, 0xf8, 0x0c, 0xa0, 0x30, 0xc8, 0x08, 0x38, 0x24, 0x18,
+ 0x2d, 0x18, 0xa2, 0x46, 0x67, 0x1e, 0xab, 0x46, 0x54, 0x46, 0x5d, 0x46, 0xac, 0x42, 0x01, 0xd1,
+ 0x00, 0xf0, 0x30, 0xf8, 0x7e, 0x46, 0x0f, 0x3e, 0x0f, 0xcc, 0xb6, 0x46, 0x01, 0x26, 0x33, 0x42,
+ 0x00, 0xd0, 0xfb, 0x1a, 0xa2, 0x46, 0xab, 0x46, 0x33, 0x43, 0x18, 0x47, 0x98, 0x78, 0x00, 0x00,
+ 0xb8, 0x78, 0x00, 0x00, 0x10, 0x3a, 0x02, 0xd3, 0x78, 0xc8, 0x78, 0xc1, 0xfa, 0xd8, 0x52, 0x07,
+ 0x01, 0xd3, 0x30, 0xc8, 0x30, 0xc1, 0x01, 0xd5, 0x04, 0x68, 0x0c, 0x60, 0x70, 0x47, 0x00, 0x00,
+ 0x00, 0x23, 0x00, 0x24, 0x00, 0x25, 0x00, 0x26, 0x10, 0x3a, 0x01, 0xd3, 0x78, 0xc1, 0xfb, 0xd8,
+ 0x52, 0x07, 0x00, 0xd3, 0x30, 0xc1, 0x00, 0xd5, 0x0b, 0x60, 0x70, 0x47, 0x1f, 0xb5, 0x1f, 0xbd,
+ 0x10, 0xb5, 0x10, 0xbd, 0x07, 0xf0, 0x92, 0xfb, 0x11, 0x46, 0xff, 0xf7, 0xf7, 0xff, 0x00, 0xf0,
+ 0x3f, 0xf8, 0x07, 0xf0, 0xaa, 0xfb, 0x03, 0xb4, 0xff, 0xf7, 0xf2, 0xff, 0x03, 0xbc, 0x00, 0xf0,
+ 0x34, 0xf8, 0x00, 0x00, 0x70, 0xb5, 0x05, 0x46, 0x0c, 0x46, 0x16, 0x46, 0x02, 0xe0, 0x0f, 0xcc,
+ 0x0f, 0xc5, 0x10, 0x3e, 0x10, 0x2e, 0xfa, 0xd2, 0x08, 0x2e, 0x02, 0xd3, 0x03, 0xcc, 0x03, 0xc5,
+ 0x08, 0x3e, 0x04, 0x2e, 0x07, 0xd3, 0x01, 0xcc, 0x01, 0xc5, 0x36, 0x1f, 0x03, 0xe0, 0x21, 0x78,
+ 0x29, 0x70, 0x64, 0x1c, 0x6d, 0x1c, 0x76, 0x1e, 0xf9, 0xd2, 0x70, 0xbd, 0xfe, 0xe7, 0xfe, 0xe7,
+ 0xfe, 0xe7, 0xfe, 0xe7, 0xfe, 0xe7, 0xfe, 0xe7, 0xfe, 0xe7, 0xfe, 0xe7, 0xfe, 0xe7, 0xfe, 0xe7,
+ 0xfe, 0xe7, 0xfe, 0xe7, 0xfe, 0xe7, 0xfe, 0xe7, 0xfe, 0xe7, 0xfe, 0xe7, 0x10, 0xb5, 0xff, 0xf7,
+ 0x7f, 0xff, 0x10, 0xbd, 0x0a, 0x46, 0x03, 0x46, 0x70, 0x47, 0xfe, 0xe7, 0x70, 0x47, 0x00, 0x00,
+ 0xff, 0xf7, 0xfc, 0xff, 0x07, 0xf0, 0x3a, 0xf9, 0x07, 0xf0, 0x96, 0xf9, 0x2f, 0x4d, 0x00, 0x20,
+ 0x2c, 0x46, 0x28, 0x60, 0x05, 0x21, 0x09, 0x07, 0x40, 0x18, 0x28, 0x60, 0x07, 0xf0, 0x6a, 0xf8,
+ 0x07, 0xf0, 0x05, 0xf8, 0x03, 0x20, 0x00, 0x07, 0x81, 0x8a, 0x29, 0x49, 0x81, 0x82, 0x22, 0x68,
+ 0x49, 0x1c, 0x28, 0x48, 0x12, 0x18, 0x11, 0x85, 0x21, 0x68, 0x08, 0x18, 0x80, 0x8e, 0x2f, 0x1f,
+ 0x00, 0x0b, 0x38, 0x70, 0x02, 0xf0, 0x58, 0xfd, 0x07, 0xf0, 0x94, 0xfa, 0x23, 0x49, 0x22, 0x4e,
+ 0x0e, 0x60, 0x03, 0x20, 0x22, 0x68, 0x40, 0x04, 0x82, 0x43, 0x22, 0x60, 0x2f, 0x46, 0x00, 0x24,
+ 0x0d, 0x46, 0x1a, 0xe0, 0x28, 0x68, 0x92, 0x21, 0x09, 0x5c, 0xc0, 0x22, 0x51, 0x43, 0x40, 0x30,
+ 0x81, 0x80, 0x02, 0xf0, 0x8f, 0xfd, 0x28, 0x68, 0x03, 0x22, 0x80, 0x30, 0xc0, 0x7c, 0x52, 0x04,
+ 0x00, 0x02, 0x80, 0x19, 0x28, 0x60, 0x80, 0x30, 0x80, 0x7c, 0x39, 0x68, 0x80, 0x07, 0x91, 0x43,
+ 0x40, 0x0b, 0x01, 0x43, 0x64, 0x1c, 0xe4, 0xb2, 0x39, 0x60, 0x0c, 0x48, 0x00, 0x1f, 0x00, 0x78,
+ 0x84, 0x42, 0xdf, 0xd3, 0x03, 0x24, 0x64, 0x04, 0x00, 0xf0, 0xdf, 0xf9, 0x28, 0x68, 0x80, 0x30,
+ 0xc0, 0x7c, 0x00, 0x02, 0x80, 0x19, 0x28, 0x60, 0x80, 0x30, 0x80, 0x7c, 0x39, 0x68, 0x80, 0x07,
+ 0xa1, 0x43, 0x40, 0x0b, 0x01, 0x43, 0x39, 0x60, 0xee, 0xe7, 0x00, 0x00, 0x84, 0x00, 0x00, 0x20,
+ 0xff, 0x7f, 0x00, 0x00, 0xc0, 0xa1, 0x01, 0x00, 0x00, 0x05, 0x00, 0x20, 0x90, 0x00, 0x00, 0x20,
+ 0xfe, 0x48, 0x56, 0x21, 0x00, 0x68, 0x0a, 0x5c, 0x01, 0x46, 0x80, 0x31, 0x01, 0x2a, 0x04, 0xd0,
+ 0x82, 0x79, 0x4a, 0x73, 0xc0, 0x79, 0x88, 0x73, 0x70, 0x47, 0x02, 0x7a, 0x4a, 0x73, 0x40, 0x7a,
+ 0xf9, 0xe7, 0xf7, 0x49, 0x08, 0x5c, 0x70, 0x47, 0x1c, 0xb5, 0x00, 0x21, 0x6a, 0x46, 0x11, 0x80,
+ 0x90, 0x80, 0xf4, 0x49, 0xf2, 0x4a, 0x09, 0x7b, 0xf0, 0x4c, 0x52, 0x5c, 0x21, 0x68, 0x60, 0x31,
+ 0x0b, 0x78, 0x9a, 0x42, 0x17, 0xd9, 0x16, 0x22, 0x8a, 0x56, 0x01, 0x23, 0xdb, 0x07, 0x9a, 0x42,
+ 0x11, 0xd1, 0x00, 0x07, 0x80, 0x0f, 0x02, 0x28, 0x0d, 0xd0, 0x08, 0x20, 0x6b, 0x46, 0x18, 0x80,
+ 0x52, 0x1e, 0x8a, 0x75, 0x09, 0x7d, 0x01, 0x29, 0x01, 0xd0, 0x05, 0xf0, 0x80, 0xfe, 0x20, 0x68,
+ 0x60, 0x30, 0x00, 0x7d, 0x1c, 0xbd, 0x01, 0x20, 0x08, 0x75, 0xf8, 0xe7, 0xe2, 0x48, 0x02, 0x68,
+ 0xe2, 0x49, 0x52, 0x18, 0xd2, 0x8e, 0x03, 0x68, 0x92, 0x04, 0x52, 0x0f, 0x5b, 0x18, 0xdb, 0x8e,
+ 0x00, 0x68, 0x5b, 0x05, 0x5b, 0x0f, 0xd2, 0x18, 0x52, 0x08, 0x40, 0x18, 0xc0, 0x8e, 0x80, 0x06,
+ 0x80, 0x0e, 0x10, 0x18, 0x70, 0x47, 0xd6, 0x49, 0x15, 0x31, 0x08, 0x5c, 0x70, 0x47, 0x7c, 0xb5,
+ 0x05, 0x46, 0xd4, 0x48, 0xd2, 0x49, 0x00, 0x7b, 0x15, 0x31, 0x0c, 0x5c, 0x00, 0x20, 0x69, 0x46,
+ 0x08, 0x80, 0x8d, 0x80, 0xff, 0xf7, 0xda, 0xff, 0xa9, 0x06, 0x89, 0x0f, 0xcb, 0x4d, 0xa0, 0x42,
+ 0x0a, 0xd8, 0x2a, 0x68, 0x60, 0x32, 0x52, 0x7d, 0xa2, 0x42, 0x05, 0xd2, 0x03, 0x29, 0x03, 0xd0,
+ 0x10, 0x21, 0x6a, 0x46, 0x11, 0x80, 0x15, 0xe0, 0x01, 0x26, 0xa0, 0x42, 0x0f, 0xd9, 0x2a, 0x68,
+ 0x60, 0x32, 0x53, 0x7d, 0xa3, 0x42, 0x0a, 0xd2, 0x1b, 0x18, 0x64, 0x00, 0xa3, 0x42, 0x06, 0xd9,
+ 0x02, 0x29, 0x04, 0xd0, 0x20, 0x21, 0x6b, 0x46, 0x19, 0x80, 0xd6, 0x74, 0x02, 0xe0, 0x29, 0x68,
+ 0x60, 0x31, 0xce, 0x74, 0x29, 0x68, 0x60, 0x31, 0x48, 0x75, 0x68, 0x46, 0x00, 0x88, 0x81, 0x06,
+ 0x89, 0x0f, 0x01, 0xd0, 0x05, 0xf0, 0x23, 0xfe, 0x28, 0x68, 0x60, 0x30, 0xc0, 0x7c, 0x7c, 0xbd,
+ 0xf8, 0xb5, 0xb2, 0x4c, 0x03, 0x26, 0x20, 0x68, 0x36, 0x07, 0x40, 0x30, 0xc0, 0x7a, 0x01, 0x27,
+ 0x25, 0x38, 0xb1, 0x4d, 0x03, 0x00, 0x07, 0xf0, 0x63, 0xfa, 0x07, 0x21, 0x6f, 0x8f, 0x81, 0xa1,
+ 0xb1, 0xbf, 0x05, 0x00, 0xb0, 0x8a, 0x07, 0x20, 0xc0, 0x43, 0xb0, 0x82, 0x2a, 0x68, 0x07, 0x21,
+ 0xaa, 0x48, 0x40, 0x30, 0x12, 0x18, 0x11, 0x85, 0xb1, 0x8a, 0x02, 0x21, 0xc9, 0x43, 0xb1, 0x82,
+ 0x2a, 0x68, 0x02, 0x21, 0x10, 0x18, 0x01, 0x84, 0x08, 0x20, 0x07, 0xf0, 0x73, 0xf9, 0x06, 0xf0,
+ 0x23, 0xff, 0x21, 0x68, 0x48, 0x84, 0x00, 0x20, 0x40, 0x31, 0x08, 0x76, 0x20, 0x68, 0x01, 0x46,
+ 0x80, 0x31, 0x8a, 0x7d, 0x00, 0x2a, 0x09, 0xd0, 0x42, 0x7f, 0x52, 0x07, 0x3c, 0xd5, 0x2b, 0x22,
+ 0x40, 0x30, 0x82, 0x72, 0x4f, 0x76, 0x05, 0xf0, 0x16, 0xfe, 0xf8, 0xbd, 0x06, 0xf0, 0x0c, 0xff,
+ 0x81, 0xb2, 0x20, 0x68, 0x42, 0x8c, 0x51, 0x1a, 0x64, 0x29, 0x2b, 0xdb, 0x58, 0x21, 0x09, 0x5c,
+ 0x00, 0x29, 0x02, 0xd1, 0x00, 0x88, 0xc0, 0x05, 0x0d, 0xd4, 0x02, 0x21, 0x0f, 0x20, 0x07, 0xf0,
+ 0x49, 0xf9, 0xb0, 0x8a, 0x01, 0x20, 0xc0, 0x43, 0xb0, 0x82, 0x28, 0x68, 0x0d, 0x21, 0x49, 0x03,
+ 0x40, 0x18, 0x47, 0x86, 0x16, 0xe0, 0xb0, 0x8a, 0x01, 0x20, 0xc0, 0x43, 0xb0, 0x82, 0x28, 0x68,
+ 0x87, 0x49, 0x40, 0x18, 0xc0, 0x8c, 0x3a, 0x46, 0x82, 0x43, 0x28, 0x68, 0x40, 0x18, 0xc2, 0x84,
+ 0x06, 0xf0, 0xe2, 0xfe, 0x21, 0x68, 0x48, 0x84, 0x40, 0x31, 0x0f, 0x76, 0x02, 0x21, 0x1d, 0x20,
+ 0x07, 0xf0, 0x28, 0xf9, 0x25, 0x21, 0x7f, 0xe0, 0x29, 0x68, 0xff, 0x31, 0x01, 0x31, 0x49, 0x8e,
+ 0x89, 0x06, 0x89, 0x0e, 0x40, 0x30, 0x41, 0x80, 0x20, 0x68, 0x26, 0x22, 0x01, 0x46, 0x40, 0x31,
+ 0xca, 0x72, 0x80, 0x30, 0xc0, 0x7d, 0x00, 0x28, 0xb7, 0xd0, 0x48, 0x88, 0xff, 0xf7, 0x37, 0xff,
+ 0x01, 0x28, 0x0d, 0xd0, 0x20, 0x68, 0x28, 0x21, 0x40, 0x30, 0xc1, 0x72, 0x20, 0x68, 0x98, 0x21,
+ 0x09, 0x5c, 0x00, 0x29, 0xa9, 0xd0, 0x14, 0x21, 0x40, 0x30, 0x81, 0x72, 0x26, 0x21, 0x5d, 0xe0,
+ 0x21, 0x68, 0x00, 0x20, 0x40, 0x31, 0x48, 0x80, 0x20, 0x68, 0x27, 0x22, 0x01, 0x46, 0x40, 0x31,
+ 0xca, 0x72, 0x80, 0x30, 0xc0, 0x7d, 0x00, 0x28, 0x97, 0xd0, 0x48, 0x88, 0xff, 0xf7, 0xd4, 0xfe,
+ 0x01, 0x28, 0x0d, 0xd0, 0x20, 0x68, 0x29, 0x21, 0x40, 0x30, 0xc1, 0x72, 0x20, 0x68, 0x98, 0x21,
+ 0x09, 0x5c, 0x00, 0x29, 0x89, 0xd0, 0x14, 0x21, 0x40, 0x30, 0x81, 0x72, 0x27, 0x21, 0x3d, 0xe0,
+ 0x05, 0xf0, 0x99, 0xfd, 0x20, 0x68, 0x2a, 0x21, 0x40, 0x30, 0xc1, 0x72, 0x28, 0x68, 0x57, 0x49,
+ 0x80, 0x31, 0x40, 0x18, 0x80, 0x88, 0x40, 0x07, 0xc0, 0x0f, 0xbd, 0xd0, 0x20, 0x68, 0x99, 0x21,
+ 0x0f, 0x54, 0x2b, 0x21, 0x40, 0x30, 0xc1, 0x72, 0x28, 0x68, 0xff, 0x30, 0x01, 0x30, 0xc0, 0x8d,
+ 0xc0, 0x08, 0xc0, 0x07, 0xc0, 0x0f, 0x00, 0xd0, 0x67, 0xe7, 0x28, 0x68, 0xff, 0x30, 0x01, 0x30,
+ 0xc0, 0x8d, 0x40, 0x07, 0xc0, 0x0f, 0xf7, 0xd1, 0x28, 0x68, 0xff, 0x30, 0x01, 0x30, 0xc0, 0x8d,
+ 0x80, 0x07, 0xc0, 0x0f, 0xf0, 0xd1, 0x28, 0x68, 0xff, 0x30, 0x01, 0x30, 0xc0, 0x8d, 0xc0, 0x07,
+ 0xea, 0xd0, 0xb0, 0x8a, 0x04, 0x20, 0xc0, 0x43, 0xb0, 0x82, 0x2a, 0x68, 0x04, 0x21, 0x3f, 0x48,
+ 0x40, 0x30, 0x10, 0x18, 0x01, 0x84, 0x2c, 0x21, 0x20, 0x68, 0x40, 0x30, 0xc1, 0x72, 0xf8, 0xbd,
+ 0xf8, 0xb5, 0x39, 0x4c, 0x20, 0x68, 0xff, 0x30, 0x01, 0x30, 0x80, 0x8d, 0x33, 0x4a, 0x80, 0x07,
+ 0xc1, 0x0f, 0x36, 0x4f, 0x95, 0x23, 0x10, 0x68, 0x03, 0x25, 0x2d, 0x07, 0x35, 0x4e, 0x40, 0x37,
+ 0x19, 0x54, 0x00, 0x29, 0x19, 0xd0, 0x40, 0x7f, 0x00, 0x07, 0x09, 0xd4, 0x2d, 0x4b, 0x18, 0x22,
+ 0x16, 0x21, 0x17, 0x20, 0x9a, 0x56, 0x59, 0x56, 0x18, 0x56, 0x00, 0x23, 0x06, 0xf0, 0xa1, 0xf9,
+ 0xa8, 0x8a, 0xae, 0x82, 0x21, 0x68, 0x01, 0x20, 0xc9, 0x19, 0x08, 0x84, 0x23, 0x48, 0x00, 0x68,
+ 0x00, 0x78, 0x80, 0x07, 0xc0, 0x17, 0x40, 0x1c, 0xf8, 0xbd, 0xa8, 0x8a, 0xae, 0x82, 0x21, 0x68,
+ 0x04, 0x20, 0xc9, 0x19, 0x08, 0x84, 0x00, 0x20, 0xf8, 0xbd, 0xfe, 0xb5, 0x1b, 0x4d, 0x00, 0x24,
+ 0x28, 0x68, 0x80, 0x30, 0x80, 0x7c, 0x00, 0x28, 0x19, 0xd1, 0x02, 0xf0, 0x0c, 0xfb, 0x0f, 0x27,
+ 0x3f, 0x03, 0x06, 0xf0, 0xdf, 0xfd, 0x1c, 0x4e, 0x00, 0x0c, 0x31, 0x68, 0x09, 0x0c, 0x40, 0x1a,
+ 0xb8, 0x42, 0x0c, 0xdd, 0x19, 0x48, 0xff, 0x21, 0x81, 0x70, 0xf0, 0x21, 0x41, 0x70, 0x04, 0x70,
+ 0x03, 0x20, 0x06, 0xf0, 0xc1, 0xff, 0x30, 0x68, 0x39, 0x04, 0x40, 0x18, 0x30, 0x60, 0x0e, 0x4e,
+ 0x31, 0x68, 0x0f, 0x48, 0x40, 0x30, 0x08, 0x18, 0x00, 0x8d, 0xc0, 0x0b, 0x06, 0xd1, 0x00, 0x23,
+ 0x07, 0x99, 0x1a, 0x46, 0x01, 0x20, 0x00, 0x94, 0x06, 0xf0, 0x73, 0xff, 0x29, 0x68, 0x80, 0x31,
+ 0x88, 0x7a, 0xc8, 0x72, 0x04, 0x48, 0x02, 0x68, 0x0d, 0x20, 0x11, 0xe0, 0x90, 0x00, 0x00, 0x20,
+ 0x9a, 0x79, 0x00, 0x00, 0x00, 0x04, 0x00, 0x20, 0x84, 0x00, 0x00, 0x20, 0x40, 0xa0, 0x01, 0x00,
+ 0x80, 0xa1, 0x01, 0x00, 0xfa, 0xff, 0x00, 0x00, 0x88, 0x00, 0x00, 0x20, 0x8c, 0x00, 0x00, 0x20,
+ 0x40, 0x03, 0x10, 0x18, 0x80, 0x8f, 0xc2, 0x0a, 0x8a, 0x72, 0x01, 0x06, 0xc9, 0x0f, 0x03, 0xd1,
+ 0x80, 0x06, 0x80, 0x0e, 0x01, 0xf0, 0xf6, 0xfe, 0x29, 0x68, 0x48, 0x7c, 0x00, 0x28, 0x09, 0xd0,
+ 0x01, 0x28, 0x26, 0xd0, 0x02, 0x28, 0x22, 0xd0, 0x03, 0x28, 0x23, 0xd0, 0x04, 0x28, 0x24, 0xd0,
+ 0x05, 0x28, 0x25, 0xd0, 0x00, 0x20, 0x52, 0x22, 0x50, 0x54, 0x08, 0x88, 0xfa, 0x4e, 0x82, 0x07,
+ 0x01, 0x24, 0x00, 0x2a, 0x31, 0xdb, 0x80, 0x05, 0x2f, 0xd5, 0x80, 0x31, 0x88, 0x7a, 0x03, 0x28,
+ 0x2b, 0xd9, 0x11, 0x28, 0x29, 0xd0, 0x48, 0x7d, 0x00, 0x28, 0x26, 0xd0, 0xf3, 0x4d, 0x28, 0x68,
+ 0x0d, 0x27, 0x7f, 0x03, 0xc0, 0x19, 0x80, 0x8e, 0xc0, 0x07, 0x0c, 0xd0, 0x1d, 0xe0, 0x00, 0xf0,
+ 0x2e, 0xfe, 0xfe, 0xbd, 0x00, 0xf0, 0xa0, 0xfe, 0xfe, 0xbd, 0x01, 0xf0, 0x57, 0xfc, 0xfe, 0xbd,
+ 0x01, 0xf0, 0x32, 0xf9, 0xfe, 0xbd, 0x06, 0xf0, 0x8f, 0xfd, 0x40, 0x1c, 0xe8, 0x49, 0x40, 0x42,
+ 0x88, 0x42, 0x0a, 0xd3, 0x02, 0x21, 0x1e, 0x20, 0x06, 0xf0, 0xd4, 0xff, 0x03, 0x20, 0x00, 0x07,
+ 0x81, 0x8a, 0x86, 0x82, 0x28, 0x68, 0xc0, 0x19, 0xf0, 0xe2, 0xe2, 0x4d, 0x28, 0x68, 0x80, 0x30,
+ 0xc1, 0x7a, 0x00, 0x29, 0x06, 0xd1, 0x80, 0x7a, 0x00, 0x28, 0x13, 0xd0, 0x01, 0x21, 0x03, 0x20,
+ 0x06, 0xf0, 0xc0, 0xff, 0x28, 0x68, 0x80, 0x30, 0xc1, 0x7a, 0x03, 0x29, 0x01, 0xd9, 0x11, 0x29,
+ 0x08, 0xd1, 0x80, 0x7a, 0x03, 0x28, 0x05, 0xd9, 0x11, 0x28, 0x03, 0xd0, 0x01, 0x21, 0x26, 0x20,
+ 0x06, 0xf0, 0xb0, 0xff, 0xd3, 0x48, 0xd4, 0x4d, 0x00, 0x68, 0x02, 0x46, 0x80, 0x32, 0x91, 0x7a,
+ 0x00, 0x29, 0x21, 0xd0, 0x01, 0x29, 0x7d, 0xd0, 0x02, 0x29, 0x7c, 0xd0, 0x03, 0x29, 0x7b, 0xd0,
+ 0x40, 0x30, 0x82, 0x7a, 0xc8, 0x4f, 0xcb, 0x4d, 0x7f, 0x3f, 0x13, 0x00, 0x07, 0xf0, 0x70, 0xf8,
+ 0x25, 0xfd, 0xfc, 0xfb, 0xfa, 0xfa, 0xfa, 0xf9, 0xf9, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3,
+ 0xf2, 0xf1, 0xf0, 0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xea, 0xe9, 0xea, 0xea, 0xea, 0xea, 0xea,
+ 0xe9, 0xea, 0xea, 0xe9, 0xe8, 0xe8, 0xe9, 0x00, 0xd0, 0x7a, 0x00, 0x28, 0x03, 0xd0, 0x02, 0x21,
+ 0x01, 0x20, 0x06, 0xf0, 0x7f, 0xff, 0xb9, 0x4f, 0x39, 0x68, 0xbb, 0x48, 0x08, 0x18, 0x40, 0x8a,
+ 0x40, 0x07, 0x80, 0x0f, 0x24, 0xd0, 0x01, 0x28, 0x2b, 0xd0, 0xb6, 0x4d, 0x28, 0x68, 0x40, 0x30,
+ 0x40, 0x7a, 0x00, 0x28, 0x01, 0xd0, 0x02, 0xf0, 0xa1, 0xf9, 0x28, 0x68, 0x01, 0x21, 0x40, 0x30,
+ 0x81, 0x74, 0x38, 0x68, 0xb1, 0x4d, 0x40, 0x19, 0x00, 0x8e, 0x40, 0x07, 0x80, 0x0f, 0x01, 0x28,
+ 0x7e, 0xd0, 0xaf, 0x4c, 0x20, 0x7d, 0x00, 0x28, 0x00, 0xd0, 0x7b, 0xe7, 0x00, 0x90, 0x03, 0x46,
+ 0x01, 0x22, 0x04, 0x21, 0x01, 0x90, 0x06, 0xf0, 0xdf, 0xfe, 0x01, 0x20, 0x20, 0x75, 0xfe, 0xbd,
+ 0xa4, 0x48, 0x00, 0x68, 0x40, 0x30, 0x40, 0x7a, 0x00, 0x28, 0xf8, 0xd0, 0x02, 0xf0, 0x7e, 0xf9,
+ 0xfe, 0xbd, 0x39, 0x68, 0xa1, 0x48, 0xc0, 0x38, 0x08, 0x18, 0x80, 0x89, 0xc0, 0x07, 0xc0, 0x0f,
+ 0x0b, 0xd0, 0x03, 0x20, 0x00, 0x07, 0x81, 0x8a, 0x86, 0x82, 0x3a, 0x68, 0x00, 0x20, 0x9b, 0x49,
+ 0xc0, 0x39, 0x51, 0x18, 0x88, 0x81, 0x02, 0xf0, 0x96, 0xf9, 0x03, 0x25, 0x2d, 0x07, 0xa8, 0x8a,
+ 0x02, 0x20, 0xc0, 0x43, 0xa8, 0x82, 0x3a, 0x68, 0x02, 0x20, 0x94, 0x49, 0xc0, 0x39, 0x51, 0x18,
+ 0x48, 0x81, 0x02, 0xe0, 0xb2, 0xe0, 0x2b, 0xe1, 0x12, 0xe2, 0x02, 0xf0, 0x57, 0xf9, 0x8d, 0x48,
+ 0x00, 0x68, 0x00, 0x78, 0xc0, 0x07, 0x01, 0xd0, 0x06, 0xf0, 0xe4, 0xfb, 0x39, 0x68, 0x8a, 0x48,
+ 0x08, 0x18, 0xc0, 0x8a, 0x39, 0x68, 0x00, 0x07, 0x00, 0x0f, 0xff, 0x31, 0x01, 0x31, 0x89, 0x8d,
+ 0x00, 0x23, 0x89, 0x07, 0xc9, 0x0f, 0x09, 0x01, 0x01, 0x43, 0x82, 0x48, 0x00, 0x68, 0x00, 0x88,
+ 0x02, 0x0a, 0x12, 0x02, 0x11, 0x43, 0x00, 0x06, 0x00, 0x0a, 0x01, 0x43, 0x03, 0x20, 0x02, 0x22,
+ 0x01, 0x91, 0x00, 0x90, 0x11, 0x46, 0x01, 0x20, 0x06, 0xf0, 0x86, 0xfe, 0x02, 0xf0, 0x89, 0xfa,
+ 0xff, 0xf7, 0x56, 0xfe, 0x00, 0x28, 0x7b, 0x4b, 0xa8, 0x8a, 0x12, 0xd0, 0x02, 0x20, 0xc0, 0x43,
+ 0xa8, 0x82, 0x3a, 0x68, 0x02, 0x20, 0x78, 0x49, 0x51, 0x18, 0xc8, 0x80, 0xa8, 0x8a, 0xab, 0x82,
+ 0x0d, 0x21, 0x3a, 0x68, 0x89, 0x01, 0xd1, 0x20, 0x40, 0x02, 0x10, 0x18, 0xc1, 0x84, 0x11, 0xe0,
+ 0x1d, 0xe0, 0xab, 0x82, 0xff, 0x21, 0x3a, 0x68, 0x41, 0x31, 0xd1, 0x20, 0x40, 0x02, 0x10, 0x18,
+ 0xc1, 0x84, 0xa8, 0x8a, 0x02, 0x20, 0xc0, 0x43, 0xa8, 0x82, 0x3a, 0x68, 0x00, 0x20, 0x6a, 0x49,
+ 0x51, 0x18, 0xc8, 0x80, 0xa8, 0x8a, 0xae, 0x82, 0x39, 0x68, 0x67, 0x48, 0x40, 0x30, 0x08, 0x18,
+ 0x44, 0x81, 0x60, 0x48, 0x00, 0x68, 0xc1, 0x7a, 0x49, 0x1c, 0xc1, 0x72, 0xfe, 0xbd, 0x03, 0x24,
+ 0x24, 0x07, 0xa0, 0x8a, 0x02, 0x20, 0xc0, 0x43, 0xa0, 0x82, 0x39, 0x68, 0x02, 0x20, 0x49, 0x19,
+ 0x48, 0x85, 0x38, 0x68, 0x40, 0x19, 0x80, 0x8d, 0xc0, 0x07, 0xc0, 0x0f, 0x1e, 0xd0, 0x15, 0xe0,
+ 0x42, 0xe3, 0xc2, 0xe1, 0xdd, 0xe2, 0x57, 0xe3, 0xd6, 0xe3, 0x51, 0xe2, 0xc2, 0xe2, 0xbd, 0xe2,
+ 0x66, 0xe3, 0xf3, 0xe2, 0xd1, 0xe2, 0xae, 0xe2, 0x97, 0xe2, 0x43, 0xe3, 0x2b, 0xe2, 0x03, 0xe2,
+ 0x80, 0xe2, 0xf9, 0xe1, 0xdf, 0xe1, 0xbd, 0xe2, 0xca, 0xe1, 0xc1, 0xe1, 0xa0, 0x8a, 0xa6, 0x82,
+ 0x39, 0x68, 0x00, 0x20, 0x49, 0x19, 0x88, 0x85, 0x02, 0xf0, 0x3c, 0xf9, 0x02, 0xf0, 0xe0, 0xf8,
+ 0x47, 0x48, 0x00, 0x78, 0xc0, 0x07, 0x01, 0xd0, 0x06, 0xf0, 0xe8, 0xfb, 0x44, 0x48, 0x02, 0x21,
+ 0x00, 0x88, 0x00, 0x23, 0x40, 0xba, 0x00, 0x91, 0x01, 0x90, 0x01, 0x22, 0x05, 0x21, 0x18, 0x46,
+ 0x06, 0xf0, 0x0a, 0xfe, 0x3e, 0x49, 0x00, 0x20, 0x08, 0x75, 0x02, 0xf0, 0xc6, 0xf9, 0xa0, 0x8a,
+ 0xa6, 0x82, 0x39, 0x68, 0x01, 0x20, 0x49, 0x19, 0x48, 0x85, 0xfe, 0xbd, 0x01, 0x46, 0x40, 0x31,
+ 0x4a, 0x7a, 0x34, 0x4d, 0x00, 0x2a, 0x05, 0xd0, 0x80, 0x78, 0x00, 0x28, 0x0e, 0xd1, 0x08, 0x7a,
+ 0x00, 0x28, 0x0b, 0xd0, 0x00, 0x20, 0x88, 0x72, 0x2c, 0x4b, 0x18, 0x68, 0x0d, 0x26, 0x76, 0x03,
+ 0x80, 0x19, 0x40, 0x8e, 0x80, 0x07, 0xc0, 0x0f, 0x1d, 0xd0, 0x26, 0xe0, 0x02, 0xf0, 0x8e, 0xf8,
+ 0xff, 0xf7, 0xb6, 0xfd, 0x00, 0x28, 0xef, 0xd0, 0x03, 0x20, 0x00, 0x07, 0x81, 0x8a, 0x86, 0x82,
+ 0x22, 0x49, 0x0b, 0x68, 0xd1, 0x22, 0x52, 0x02, 0x9b, 0x18, 0xdc, 0x84, 0x83, 0x8a, 0x86, 0x82,
+ 0x0b, 0x68, 0xff, 0x33, 0x01, 0x33, 0x9c, 0x85, 0x83, 0x8a, 0x86, 0x82, 0x09, 0x68, 0x00, 0x20,
+ 0x89, 0x18, 0xc8, 0x84, 0xd8, 0xe7, 0x03, 0x20, 0x00, 0x07, 0x81, 0x8a, 0x1f, 0x49, 0x81, 0x82,
+ 0x01, 0x20, 0x19, 0x68, 0x40, 0x03, 0x89, 0x19, 0x08, 0x84, 0x18, 0x68, 0x80, 0x19, 0x80, 0x8f,
+ 0xc2, 0x0a, 0x28, 0x68, 0x01, 0x46, 0x80, 0x31, 0x8a, 0x72, 0x01, 0x2a, 0x0c, 0xd0, 0x81, 0x7a,
+ 0x49, 0x1c, 0x81, 0x72, 0x18, 0x68, 0x80, 0x19, 0x40, 0x8f, 0x00, 0x23, 0xc0, 0xb2, 0x02, 0x22,
+ 0x07, 0x21, 0x00, 0x94, 0x01, 0x90, 0x0b, 0xe0, 0xc8, 0x7a, 0x01, 0x28, 0x0b, 0xd0, 0x18, 0x68,
+ 0x80, 0x19, 0x40, 0x8f, 0x00, 0x23, 0xc0, 0xb2, 0x02, 0x22, 0x06, 0x21, 0x00, 0x94, 0x01, 0x90,
+ 0x01, 0x20, 0x06, 0xf0, 0x99, 0xfd, 0x1c, 0xe1, 0xfe, 0xff, 0x00, 0x00, 0x84, 0x00, 0x00, 0x20,
+ 0x60, 0xea, 0x00, 0x00, 0x90, 0x00, 0x00, 0x20, 0x00, 0xa3, 0x01, 0x00, 0xc0, 0xa1, 0x01, 0x00,
+ 0x00, 0x04, 0x00, 0x20, 0x0f, 0xfc, 0x00, 0x00, 0xc0, 0xa0, 0x01, 0x00, 0xff, 0xdf, 0x00, 0x00,
+ 0x01, 0x46, 0x40, 0x31, 0x8a, 0x7a, 0xf7, 0x4f, 0x00, 0x2a, 0x4c, 0x72, 0x03, 0xd0, 0x02, 0x20,
+ 0x00, 0x94, 0x01, 0x90, 0x04, 0xe1, 0xca, 0x79, 0x52, 0x08, 0x52, 0x00, 0xca, 0x71, 0x80, 0x78,
+ 0x00, 0x28, 0x58, 0xd1, 0x08, 0x7a, 0x00, 0x28, 0x55, 0xd0, 0x03, 0x20, 0x00, 0x07, 0x81, 0x8a,
+ 0x20, 0x21, 0xc9, 0x43, 0x81, 0x82, 0xec, 0x48, 0x00, 0x21, 0x02, 0x68, 0x0d, 0x20, 0x40, 0x03,
+ 0x10, 0x18, 0x01, 0x84, 0x02, 0xf0, 0x4f, 0xfb, 0xe7, 0x49, 0x08, 0x68, 0x40, 0x19, 0xc0, 0x8a,
+ 0x09, 0x68, 0x00, 0x07, 0x00, 0x0f, 0xff, 0x31, 0x01, 0x31, 0x89, 0x8d, 0x00, 0x23, 0x89, 0x07,
+ 0xc9, 0x0f, 0x09, 0x01, 0x01, 0x43, 0x38, 0x68, 0x00, 0x88, 0x02, 0x0a, 0x12, 0x02, 0x11, 0x43,
+ 0x00, 0x06, 0x00, 0x0a, 0x01, 0x43, 0x03, 0x20, 0x01, 0x91, 0x00, 0x90, 0x02, 0x22, 0x1a, 0x21,
+ 0x01, 0x20, 0x06, 0xf0, 0x41, 0xfd, 0xd9, 0x48, 0x02, 0x21, 0x00, 0x88, 0x0a, 0x46, 0x40, 0xba,
+ 0x00, 0x91, 0x01, 0x90, 0x00, 0x23, 0x19, 0x21, 0x01, 0x20, 0x06, 0xf0, 0x35, 0xfd, 0x38, 0x68,
+ 0x80, 0x30, 0x84, 0x46, 0x00, 0x7a, 0x40, 0x06, 0x7e, 0xd4, 0xcf, 0x4d, 0x00, 0x22, 0x03, 0x21,
+ 0x09, 0x07, 0x88, 0x8a, 0x84, 0x20, 0xc0, 0x43, 0x88, 0x82, 0xd0, 0x07, 0x2e, 0x68, 0x00, 0x0e,
+ 0xcb, 0x4b, 0xf6, 0x18, 0x00, 0x1d, 0xb0, 0x85, 0x00, 0x20, 0x00, 0x21, 0x10, 0x28, 0x05, 0xd2,
+ 0x1f, 0x23, 0x1b, 0x1a, 0x04, 0xe0, 0x02, 0xf0, 0x76, 0xfa, 0xb5, 0xe7, 0x03, 0x46, 0x10, 0x3b,
+ 0xc4, 0x4f, 0xdb, 0xb2, 0xbe, 0x8a, 0x00, 0x2a, 0x07, 0xd0, 0x1f, 0x26, 0xf6, 0x43, 0xbe, 0x82,
+ 0x2f, 0x68, 0xbf, 0x4e, 0xbe, 0x19, 0xf3, 0x85, 0x06, 0xe0, 0xbf, 0x4e, 0xbe, 0x82, 0x2f, 0x68,
+ 0x1e, 0x02, 0xbb, 0x4b, 0xfb, 0x18, 0x9e, 0x85, 0xb9, 0x4f, 0x00, 0x23, 0x80, 0x37, 0x2e, 0x68,
+ 0xf6, 0x19, 0x36, 0x8a, 0x36, 0x0a, 0xf6, 0x07, 0xf6, 0x0f, 0x01, 0xd0, 0x49, 0x1c, 0xc9, 0xb2,
+ 0x5b, 0x1c, 0xdb, 0xb2, 0x0a, 0x2b, 0xf2, 0xd3, 0x00, 0x28, 0x04, 0xd0, 0x05, 0x29, 0x2d, 0xd8,
+ 0x1f, 0x28, 0x0f, 0xd0, 0x26, 0xe0, 0x05, 0x29, 0x24, 0xd9, 0x00, 0x2a, 0x17, 0xd0, 0xad, 0x48,
+ 0x81, 0x8a, 0x1f, 0x21, 0xc9, 0x43, 0x81, 0x82, 0x2b, 0x68, 0x10, 0x21, 0xa8, 0x48, 0x18, 0x18,
+ 0xc1, 0x85, 0x1b, 0xe0, 0x00, 0x2a, 0x0a, 0xd0, 0xa6, 0x48, 0x81, 0x8a, 0x1f, 0x21, 0xc9, 0x43,
+ 0x81, 0x82, 0x2b, 0x68, 0x10, 0x20, 0xa2, 0x49, 0x59, 0x18, 0xc8, 0x85, 0x0e, 0xe0, 0xa1, 0x48,
+ 0x81, 0x8a, 0xa1, 0x49, 0x81, 0x82, 0x01, 0x20, 0x2b, 0x68, 0x00, 0x03, 0x9c, 0x49, 0x59, 0x18,
+ 0x88, 0x85, 0x03, 0xe0, 0x40, 0x1c, 0xc0, 0xb2, 0x20, 0x28, 0x9e, 0xd3, 0x52, 0x1c, 0xd2, 0xb2,
+ 0x02, 0x2a, 0x8c, 0xd3, 0x97, 0x48, 0x81, 0x8a, 0x04, 0x21, 0xc9, 0x43, 0x81, 0x82, 0x2a, 0x68,
+ 0x00, 0x20, 0x93, 0x49, 0x51, 0x18, 0x00, 0xe0, 0x06, 0xe0, 0x88, 0x85, 0x60, 0x46, 0x00, 0x7a,
+ 0x40, 0x21, 0x08, 0x43, 0x61, 0x46, 0x08, 0x72, 0x8e, 0x48, 0x81, 0x8a, 0x8f, 0x49, 0x81, 0x82,
+ 0x89, 0x48, 0x01, 0x22, 0x01, 0x68, 0x92, 0x03, 0x0d, 0x20, 0x40, 0x03, 0x08, 0x18, 0x02, 0x84,
+ 0x85, 0x48, 0x01, 0x68, 0x0d, 0x20, 0x40, 0x03, 0x08, 0x18, 0x80, 0x8f, 0x81, 0x4d, 0xc0, 0x0a,
+ 0x29, 0x68, 0x80, 0x31, 0x88, 0x72, 0x03, 0x28, 0x05, 0xd0, 0xc9, 0x7a, 0x03, 0x29, 0x08, 0xd9,
+ 0x11, 0x29, 0x06, 0xd0, 0x0d, 0xe0, 0xc8, 0x7a, 0x03, 0x28, 0x0a, 0xd0, 0x01, 0x21, 0x25, 0x20,
+ 0x05, 0xe0, 0x03, 0x28, 0x05, 0xd9, 0x11, 0x28, 0x03, 0xd0, 0x01, 0x21, 0x26, 0x20, 0x06, 0xf0,
+ 0xf1, 0xfc, 0x28, 0x68, 0x40, 0x30, 0x84, 0x74, 0xfe, 0xbd, 0x44, 0x72, 0x00, 0x94, 0x01, 0x94,
+ 0x00, 0x23, 0x02, 0x22, 0x15, 0x21, 0x01, 0x20, 0x06, 0xf0, 0x6e, 0xfc, 0x71, 0x48, 0x81, 0x8a,
+ 0x86, 0x82, 0x6d, 0x48, 0x01, 0x68, 0x0d, 0x20, 0x40, 0x03, 0x08, 0x18, 0x44, 0x86, 0xfe, 0xbd,
+ 0x11, 0x29, 0x0a, 0xd0, 0x00, 0x20, 0xc0, 0x43, 0x06, 0xf0, 0x62, 0xfa, 0x06, 0xf0, 0x75, 0xfa,
+ 0x28, 0x68, 0x8a, 0x21, 0x09, 0x5c, 0x07, 0x29, 0x03, 0xd0, 0x28, 0x68, 0x40, 0x30, 0x84, 0x72,
+ 0xfe, 0xbd, 0x81, 0x78, 0x00, 0x29, 0x06, 0xd1, 0x40, 0x30, 0x01, 0x7a, 0x00, 0x29, 0x02, 0xd0,
+ 0x13, 0x21, 0x81, 0x72, 0xd6, 0xe0, 0x03, 0xf0, 0x17, 0xf9, 0x02, 0x28, 0xf0, 0xd0, 0x5d, 0x48,
+ 0x81, 0x8a, 0x87, 0x82, 0x58, 0x4c, 0x80, 0x23, 0x26, 0x68, 0x0d, 0x22, 0x52, 0x03, 0xb6, 0x18,
+ 0x73, 0x80, 0x83, 0x8a, 0x87, 0x82, 0x21, 0x68, 0x00, 0x20, 0x89, 0x18, 0x48, 0x80, 0x28, 0x68,
+ 0x06, 0x21, 0x40, 0x30, 0x81, 0x72, 0xfe, 0xbd, 0x04, 0xf0, 0xc3, 0xfd, 0x02, 0x28, 0xfa, 0xd0,
+ 0x04, 0xf0, 0xbf, 0xfd, 0x01, 0x28, 0xf6, 0xd0, 0x03, 0xf0, 0xcd, 0xfe, 0x02, 0x28, 0xf2, 0xd0,
+ 0x28, 0x68, 0x53, 0x21, 0x09, 0x5c, 0x00, 0x29, 0x04, 0xd0, 0x01, 0x29, 0x26, 0xd1, 0x01, 0x78,
+ 0x49, 0x07, 0x23, 0xd5, 0x00, 0x78, 0x00, 0x06, 0x20, 0xd4, 0x17, 0x20, 0x00, 0xf0, 0x82, 0xfa,
+ 0x03, 0xf0, 0xca, 0xf8, 0x28, 0x68, 0x05, 0x21, 0x41, 0x84, 0x09, 0x20, 0x03, 0xf0, 0x19, 0xff,
+ 0x03, 0xf0, 0x9a, 0xfc, 0x29, 0x68, 0x60, 0x31, 0x08, 0x70, 0x00, 0xf0, 0x48, 0xfa, 0x28, 0x68,
+ 0x0b, 0x21, 0x40, 0x30, 0x81, 0x72, 0x00, 0xf0, 0x8a, 0xfa, 0x00, 0x28, 0xcb, 0xd0, 0x04, 0xf0,
+ 0x8f, 0xf8, 0x28, 0x68, 0x40, 0x30, 0xc0, 0x7d, 0x00, 0x28, 0xee, 0xd0, 0x28, 0x68, 0x00, 0x23,
+ 0x60, 0x30, 0x02, 0x78, 0x41, 0x78, 0x12, 0x02, 0x80, 0x78, 0x11, 0x43, 0x00, 0x04, 0x01, 0x43,
+ 0x03, 0x20, 0x01, 0x22, 0x01, 0x91, 0x00, 0x90, 0x12, 0x21, 0x10, 0x46, 0x06, 0xf0, 0xe4, 0xfb,
+ 0x28, 0x68, 0x00, 0x21, 0x40, 0x30, 0x81, 0x74, 0x01, 0x75, 0x28, 0x68, 0x01, 0x46, 0x40, 0x31,
+ 0xca, 0x7a, 0x28, 0x2a, 0x01, 0xd0, 0x29, 0x2a, 0x02, 0xd1, 0x0a, 0x7d, 0x01, 0x2a, 0x73, 0xd0,
+ 0xca, 0x7c, 0x00, 0x2a, 0x04, 0xd0, 0x01, 0x2a, 0x0a, 0xd1, 0x03, 0x78, 0x5b, 0x07, 0x07, 0xd5,
+ 0x03, 0x78, 0x1b, 0x06, 0x04, 0xd4, 0x00, 0x23, 0x60, 0x30, 0x83, 0x71, 0x03, 0x72, 0x02, 0xe0,
+ 0x60, 0x30, 0x84, 0x71, 0x04, 0x72, 0x02, 0x2a, 0x27, 0xd3, 0x1a, 0x48, 0x82, 0x8a, 0x0f, 0x22,
+ 0xd2, 0x43, 0x82, 0x82, 0x14, 0x4a, 0x02, 0x24, 0x15, 0x68, 0x0d, 0x23, 0x5b, 0x03, 0xed, 0x18,
+ 0x2c, 0x86, 0x84, 0x8a, 0x16, 0x4c, 0x84, 0x82, 0x12, 0x68, 0x00, 0x15, 0xd2, 0x18, 0x10, 0x86,
+ 0x09, 0x20, 0x27, 0xe1, 0x00, 0x21, 0x81, 0x72, 0x0e, 0x48, 0x82, 0x8a, 0x0f, 0x22, 0xd2, 0x43,
+ 0x82, 0x82, 0x09, 0x4a, 0x13, 0x68, 0x0d, 0x26, 0x76, 0x03, 0x9b, 0x19, 0x19, 0x86, 0x83, 0x8a,
+ 0x0b, 0x4b, 0x83, 0x82, 0x10, 0x68, 0x80, 0x19, 0x01, 0x86, 0x04, 0xf0, 0xb1, 0xfc, 0x00, 0x28,
+ 0x10, 0xd0, 0x60, 0xe7, 0x90, 0x00, 0x00, 0x20, 0x84, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x20,
+ 0x00, 0xa1, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xff, 0xe0, 0x00, 0x00, 0xff, 0xbf, 0x00, 0x00,
+ 0xff, 0xfc, 0x00, 0x00, 0x52, 0xe0, 0x03, 0xf0, 0x53, 0xfe, 0x02, 0x28, 0xe9, 0xd0, 0x28, 0x68,
+ 0x80, 0x30, 0xc1, 0x7b, 0x00, 0x29, 0x18, 0xd0, 0x00, 0x21, 0xc1, 0x73, 0x04, 0xf0, 0xd2, 0xfd,
+ 0x00, 0x28, 0xde, 0xd1, 0x92, 0x49, 0x0a, 0x68, 0x0d, 0x20, 0x40, 0x03, 0x12, 0x18, 0x92, 0x8e,
+ 0xd2, 0x07, 0x7d, 0xd0, 0x28, 0x68, 0x88, 0x21, 0x09, 0x5c, 0x49, 0x07, 0x79, 0xd5, 0x40, 0x30,
+ 0xc0, 0x7c, 0x00, 0x28, 0x76, 0xd0, 0xe3, 0xe0, 0x44, 0xe0, 0x04, 0xf0, 0xa2, 0xfb, 0x02, 0x28,
+ 0xc7, 0xd0, 0x28, 0x68, 0x40, 0x30, 0x81, 0x79, 0x49, 0x07, 0x05, 0xd5, 0x80, 0x7d, 0x01, 0x28,
+ 0x02, 0xd0, 0x04, 0xf0, 0xd4, 0xf9, 0x01, 0xe0, 0x04, 0xf0, 0x27, 0xfa, 0x02, 0x28, 0xb8, 0xd0,
+ 0x28, 0x68, 0x84, 0x21, 0x09, 0x5c, 0x00, 0x29, 0x4e, 0xd1, 0x60, 0x30, 0x81, 0x79, 0x02, 0x29,
+ 0x02, 0xd0, 0x00, 0x29, 0x02, 0xd0, 0x05, 0xe0, 0x84, 0x71, 0x08, 0xe0, 0x04, 0xf0, 0xb5, 0xfa,
+ 0x02, 0x28, 0xa6, 0xd0, 0x28, 0x68, 0x60, 0x30, 0x80, 0x79, 0x01, 0x28, 0xb3, 0xd1, 0x28, 0x68,
+ 0x60, 0x30, 0x01, 0x7a, 0x02, 0x29, 0x1c, 0xd0, 0x04, 0xf0, 0x93, 0xf8, 0x28, 0x68, 0x60, 0x30,
+ 0x81, 0x79, 0x01, 0x29, 0xa7, 0xd1, 0x00, 0x7a, 0x01, 0x28, 0xa4, 0xd1, 0x28, 0x68, 0x40, 0x30,
+ 0x81, 0x7d, 0x01, 0x29, 0x06, 0xd0, 0x01, 0x7d, 0x49, 0x1c, 0xc9, 0xb2, 0x01, 0x75, 0x04, 0x29,
+ 0x00, 0xd2, 0x3a, 0xe7, 0x29, 0x68, 0x0a, 0x46, 0x40, 0x32, 0xd0, 0x7c, 0x00, 0x28, 0x02, 0xd0,
+ 0x23, 0xe0, 0x04, 0x72, 0xea, 0xe7, 0x08, 0x88, 0x43, 0x07, 0x1e, 0xd5, 0x0b, 0x79, 0x1e, 0x06,
+ 0x05, 0xd5, 0x58, 0x06, 0x40, 0x0e, 0xd0, 0x73, 0x00, 0xf0, 0xee, 0xfb, 0x15, 0xe0, 0x83, 0x06,
+ 0x9b, 0x0f, 0x02, 0x2b, 0x11, 0xd0, 0x92, 0x79, 0x12, 0x07, 0x0e, 0xd5, 0x00, 0x06, 0x0c, 0xd4,
+ 0x80, 0x31, 0x48, 0x7b, 0xc0, 0x06, 0x08, 0xd4, 0x04, 0xf0, 0x92, 0xfe, 0x02, 0x28, 0x97, 0xd0,
+ 0x28, 0x68, 0x80, 0x30, 0x00, 0x79, 0x00, 0x28, 0x8f, 0xd1, 0x95, 0x21, 0x28, 0x68, 0x02, 0xe0,
+ 0x2b, 0xe0, 0x73, 0xe0, 0x68, 0xe0, 0x09, 0x5c, 0x00, 0x29, 0x0d, 0xd0, 0x40, 0x30, 0xc1, 0x7a,
+ 0x2c, 0x29, 0x09, 0xd0, 0x16, 0x21, 0x81, 0x72, 0xff, 0xf7, 0xba, 0xf9, 0x28, 0x68, 0x40, 0x30,
+ 0xc0, 0x7a, 0x2c, 0x28, 0x00, 0xd0, 0xa6, 0xe6, 0x28, 0x68, 0x56, 0x21, 0x09, 0x5c, 0x01, 0x29,
+ 0x00, 0xd1, 0x5b, 0xe7, 0x01, 0x78, 0x09, 0x06, 0xfb, 0xd4, 0x00, 0x21, 0x60, 0x30, 0xc1, 0x71,
+ 0x04, 0xf0, 0x57, 0xfb, 0x02, 0x28, 0xee, 0xd0, 0x28, 0x68, 0x60, 0x30, 0xc0, 0x79, 0x00, 0x28,
+ 0xf6, 0xd0, 0x28, 0x68, 0x80, 0x30, 0xc4, 0x73, 0x3d, 0xe7, 0x03, 0x26, 0x36, 0x07, 0xb2, 0x8a,
+ 0x38, 0x4b, 0xb3, 0x82, 0x36, 0x4a, 0x00, 0x27, 0x11, 0x68, 0x09, 0x18, 0x0f, 0x84, 0xb1, 0x8a,
+ 0xb3, 0x82, 0x12, 0x68, 0x20, 0x21, 0x10, 0x18, 0x01, 0x84, 0x06, 0xf0, 0xd5, 0xf8, 0x40, 0x1c,
+ 0x40, 0x42, 0x01, 0x21, 0xc0, 0x08, 0x09, 0x04, 0x88, 0x42, 0x01, 0xd3, 0x49, 0x1e, 0x00, 0xe0,
+ 0x81, 0xb2, 0x28, 0x68, 0x41, 0x82, 0x01, 0x7b, 0x49, 0x1c, 0x01, 0x73, 0x40, 0x30, 0x04, 0x72,
+ 0x02, 0x21, 0x0e, 0x20, 0x06, 0xf0, 0x0e, 0xfb, 0x28, 0x68, 0x01, 0x46, 0x80, 0x30, 0x42, 0x7d,
+ 0x00, 0x2a, 0x0b, 0xd0, 0x42, 0x7e, 0x00, 0x2a, 0x08, 0xd0, 0xb2, 0x8a, 0x07, 0x22, 0xd2, 0x43,
+ 0xb2, 0x82, 0x1f, 0x4a, 0x12, 0x68, 0x20, 0x4b, 0xd2, 0x18, 0x17, 0x85, 0x07, 0x73, 0x40, 0x31,
+ 0x8c, 0x74, 0x02, 0x20, 0x88, 0x72, 0xfe, 0xbd, 0x03, 0xf0, 0x26, 0xf8, 0x02, 0x28, 0xfa, 0xd0,
+ 0x28, 0x68, 0xfb, 0x22, 0x80, 0x30, 0x01, 0x7a, 0x11, 0x40, 0x01, 0x72, 0x1f, 0x20, 0x03, 0xf0,
+ 0xd8, 0xfd, 0x28, 0x68, 0x15, 0x21, 0x40, 0x30, 0x81, 0x72, 0x03, 0x20, 0x00, 0x07, 0x81, 0x8a,
+ 0x87, 0x82, 0x0f, 0x48, 0x80, 0x21, 0x02, 0x68, 0x0d, 0x20, 0x40, 0x03, 0x10, 0x18, 0x01, 0x84,
+ 0x29, 0x68, 0xff, 0x20, 0x80, 0x31, 0x88, 0x72, 0x28, 0x68, 0x40, 0x30, 0x84, 0x74, 0x00, 0xf0,
+ 0xe6, 0xf8, 0x00, 0x28, 0xd7, 0xd0, 0x28, 0x68, 0x01, 0x7a, 0xc9, 0x09, 0xe5, 0xd1, 0x90, 0x21,
+ 0x09, 0x5c, 0x00, 0x29, 0xe1, 0xd1, 0x40, 0x30, 0x84, 0x75, 0xff, 0xf7, 0x91, 0xf8, 0x67, 0xe6,
+ 0x84, 0x00, 0x00, 0x20, 0xdf, 0xff, 0x00, 0x00, 0x80, 0xa0, 0x01, 0x00, 0x00, 0x28, 0x16, 0xd0,
+ 0x01, 0x28, 0x15, 0xd0, 0x00, 0x21, 0x40, 0x00, 0x40, 0x08, 0x49, 0x1c, 0x40, 0x00, 0x49, 0xb2,
+ 0x00, 0x28, 0xfa, 0xda, 0xc0, 0x0d, 0xe0, 0x22, 0x10, 0x40, 0xca, 0x17, 0xd2, 0x0e, 0x52, 0x18,
+ 0x52, 0x09, 0x52, 0x01, 0x89, 0x1a, 0x1f, 0x22, 0x51, 0x1a, 0x40, 0x18, 0xc0, 0xb2, 0x70, 0x47,
+ 0xe0, 0x20, 0x70, 0x47, 0xf0, 0xb5, 0x03, 0x24, 0x24, 0x07, 0xa1, 0x8a, 0xfa, 0x49, 0xa1, 0x82,
+ 0x00, 0x28, 0x01, 0xdd, 0x01, 0x21, 0x00, 0xe0, 0x00, 0x21, 0xf8, 0x4a, 0x89, 0x02, 0xf8, 0x4e,
+ 0x89, 0x18, 0x32, 0x68, 0x0d, 0x27, 0x7f, 0x03, 0xd2, 0x19, 0x11, 0x81, 0x01, 0x23, 0x00, 0x21,
+ 0x5b, 0x02, 0x45, 0x42, 0x07, 0xe0, 0xa2, 0x8a, 0xf2, 0x4a, 0xa2, 0x82, 0x32, 0x68, 0xd2, 0x19,
+ 0x13, 0x81, 0x49, 0x1c, 0x49, 0xb2, 0x00, 0x28, 0x01, 0xdb, 0x02, 0x46, 0x00, 0xe0, 0x2a, 0x46,
+ 0x8a, 0x42, 0xf0, 0xdc, 0xf0, 0xbd, 0xf0, 0xb5, 0xeb, 0x48, 0x53, 0x21, 0x00, 0x68, 0x01, 0x23,
+ 0x09, 0x5c, 0x0d, 0x27, 0x03, 0x24, 0xe7, 0x4a, 0x5b, 0x02, 0x7f, 0x03, 0x24, 0x07, 0xe4, 0x4d,
+ 0x00, 0x29, 0x0c, 0xd0, 0x26, 0x21, 0x41, 0x5e, 0xe4, 0x4e, 0x08, 0x46, 0x11, 0x30, 0x0c, 0xd0,
+ 0x0f, 0x29, 0x17, 0xd0, 0xa0, 0x8a, 0xa2, 0x82, 0x28, 0x68, 0xc0, 0x19, 0x03, 0x81, 0xa0, 0x8a,
+ 0xa2, 0x82, 0x28, 0x68, 0xc0, 0x19, 0x03, 0x81, 0x1b, 0xe0, 0x3e, 0x20, 0xc0, 0x43, 0xff, 0xf7,
+ 0xb1, 0xff, 0x01, 0x20, 0xff, 0xf7, 0xae, 0xff, 0xa0, 0x8a, 0xff, 0x20, 0xa0, 0x82, 0x01, 0x20,
+ 0x80, 0x02, 0x0b, 0xe0, 0x3e, 0x20, 0xc0, 0x43, 0xff, 0xf7, 0xa4, 0xff, 0x01, 0x20, 0xff, 0xf7,
+ 0xa1, 0xff, 0xa0, 0x8a, 0xff, 0x20, 0xa0, 0x82, 0x01, 0x20, 0xc0, 0x02, 0x29, 0x68, 0x89, 0x19,
+ 0x88, 0x84, 0xcd, 0x48, 0x00, 0x68, 0xc1, 0x8c, 0x49, 0x1c, 0xc1, 0x84, 0xf0, 0xbd, 0x30, 0xb5,
+ 0x03, 0x20, 0x00, 0x07, 0x81, 0x8a, 0xca, 0x4a, 0x82, 0x82, 0xc5, 0x49, 0x00, 0x24, 0x0d, 0x68,
+ 0xc6, 0x4b, 0xed, 0x18, 0x2c, 0x84, 0x84, 0x8a, 0x82, 0x82, 0x0c, 0x68, 0x52, 0x1c, 0xe3, 0x18,
+ 0x1a, 0x84, 0x82, 0x8a, 0x80, 0x22, 0xd2, 0x43, 0x82, 0x82, 0x09, 0x68, 0x80, 0x20, 0x0d, 0x22,
+ 0x52, 0x03, 0x89, 0x18, 0x08, 0x84, 0xbc, 0x48, 0xff, 0x21, 0x00, 0x68, 0x80, 0x30, 0x81, 0x72,
+ 0x30, 0xbd, 0xb7, 0x48, 0x00, 0x68, 0xb9, 0x49, 0x40, 0x18, 0x80, 0x8e, 0x80, 0x04, 0x80, 0x16,
+ 0x40, 0x42, 0x70, 0x47, 0x30, 0xb5, 0x03, 0x21, 0x09, 0x07, 0x8a, 0x8a, 0x8a, 0x13, 0x8a, 0x82,
+ 0x42, 0x42, 0x92, 0x06, 0x0d, 0x23, 0xd2, 0x0d, 0x5b, 0x02, 0xd4, 0x18, 0xac, 0x4b, 0x1d, 0x68,
+ 0xae, 0x4a, 0xad, 0x18, 0xec, 0x82, 0x8c, 0x8a, 0xad, 0x4c, 0x8c, 0x82, 0x1b, 0x68, 0x61, 0x1c,
+ 0x9a, 0x18, 0xd1, 0x82, 0xa8, 0x49, 0x09, 0x68, 0x60, 0x31, 0x48, 0x70, 0x30, 0xbd, 0xa6, 0x48,
+ 0x00, 0x68, 0x80, 0x30, 0x80, 0x7a, 0x07, 0x28, 0x01, 0xd0, 0x00, 0x20, 0x70, 0x47, 0x01, 0x20,
+ 0x70, 0x47, 0x70, 0xb5, 0xa0, 0x48, 0x00, 0x21, 0x04, 0x68, 0x22, 0x7f, 0xa3, 0x7d, 0x9a, 0x42,
+ 0x01, 0xd3, 0xd0, 0x1a, 0x02, 0xe0, 0xbf, 0x20, 0xc0, 0x1a, 0x80, 0x18, 0xc5, 0xb2, 0xe0, 0x8c,
+ 0x63, 0x28, 0x01, 0xd1, 0x01, 0x21, 0xc9, 0x03, 0xbf, 0x2a, 0x01, 0xd3, 0x00, 0x20, 0x00, 0xe0,
+ 0x50, 0x1c, 0xc0, 0xb2, 0x83, 0x42, 0x02, 0xd1, 0x01, 0x26, 0xb6, 0x03, 0x31, 0x43, 0x9a, 0x42,
+ 0x02, 0xd1, 0x01, 0x22, 0x52, 0x03, 0x11, 0x43, 0x29, 0x43, 0xa1, 0x82, 0x70, 0xbd, 0x70, 0xb5,
+ 0xff, 0xf7, 0xd7, 0xff, 0x05, 0x46, 0xff, 0xf7, 0xca, 0xff, 0x00, 0x28, 0x63, 0xd0, 0x8a, 0x4c,
+ 0x21, 0x68, 0x08, 0x7d, 0xbb, 0x28, 0x5e, 0xd2, 0x26, 0x22, 0x8a, 0x5e, 0x63, 0x2a, 0x5a, 0xd0,
+ 0x40, 0x31, 0xce, 0x7c, 0x82, 0x48, 0x85, 0x49, 0x86, 0x4b, 0x00, 0x2e, 0x16, 0xd0, 0x10, 0x32,
+ 0x1f, 0x2a, 0x02, 0x68, 0x1d, 0xd8, 0x56, 0x18, 0x28, 0x22, 0xb2, 0x5e, 0x00, 0x68, 0x92, 0x02,
+ 0x40, 0x18, 0x40, 0x8d, 0xc0, 0xb2, 0x10, 0x43, 0xff, 0xf7, 0xd8, 0xfe, 0x02, 0x46, 0x20, 0x68,
+ 0x44, 0x21, 0x09, 0x5a, 0x00, 0x7f, 0x08, 0x18, 0x1a, 0x54, 0x1c, 0xe0, 0x02, 0x68, 0x56, 0x18,
+ 0x30, 0x22, 0xb2, 0x5e, 0x00, 0x68, 0x92, 0x02, 0x40, 0x18, 0x40, 0x8e, 0x80, 0x05, 0x80, 0x0d,
+ 0x07, 0xe0, 0x56, 0x18, 0x2c, 0x22, 0xb2, 0x5e, 0x00, 0x68, 0x92, 0x02, 0x40, 0x18, 0xc0, 0x8d,
+ 0xc0, 0xb2, 0x10, 0x43, 0xff, 0xf7, 0xba, 0xfe, 0x01, 0x46, 0x20, 0x68, 0x44, 0x22, 0x12, 0x5a,
+ 0x00, 0x7f, 0x10, 0x18, 0x19, 0x54, 0x20, 0x68, 0x05, 0x77, 0xff, 0xf7, 0x5a, 0xff, 0x1f, 0x21,
+ 0xc8, 0x42, 0x1c, 0xdc, 0x20, 0x68, 0x44, 0x22, 0x12, 0x5a, 0x04, 0x7f, 0x00, 0x21, 0x12, 0x19,
+ 0x99, 0x54, 0x01, 0x7f, 0xbf, 0x29, 0x01, 0xd3, 0x00, 0x21, 0x00, 0xe0, 0x49, 0x1c, 0x01, 0x77,
+ 0x26, 0x21, 0x41, 0x5e, 0x1f, 0x29, 0x07, 0xda, 0xff, 0xf7, 0xdd, 0xfe, 0x1f, 0x20, 0xff, 0xf7,
+ 0x49, 0xff, 0xff, 0xf7, 0x1c, 0xff, 0x70, 0xbd, 0x63, 0x21, 0xc1, 0x84, 0x70, 0xbd, 0xff, 0xf7,
+ 0x38, 0xff, 0x40, 0x1e, 0x40, 0xb2, 0xf2, 0xe7, 0xf0, 0xb5, 0xff, 0xf7, 0x62, 0xff, 0x07, 0x46,
+ 0xff, 0xf7, 0x55, 0xff, 0x00, 0x28, 0x6f, 0xd0, 0x4f, 0x4e, 0x30, 0x68, 0x01, 0x7d, 0xbb, 0x29,
+ 0x6a, 0xd2, 0x26, 0x21, 0x41, 0x5e, 0x63, 0x29, 0x66, 0xd0, 0x40, 0x30, 0xc0, 0x7c, 0x48, 0x4c,
+ 0x4a, 0x4d, 0x4c, 0x4b, 0x00, 0x28, 0x0b, 0xd0, 0x10, 0x31, 0x20, 0x68, 0x1f, 0x29, 0x12, 0xd8,
+ 0x41, 0x19, 0x28, 0x20, 0x08, 0x5e, 0x21, 0x68, 0x80, 0x02, 0x49, 0x19, 0x49, 0x8d, 0x11, 0xe0,
+ 0x20, 0x68, 0x41, 0x19, 0x30, 0x20, 0x08, 0x5e, 0x21, 0x68, 0x80, 0x02, 0x49, 0x19, 0x49, 0x8e,
+ 0x89, 0x05, 0x89, 0x0d, 0x07, 0xe0, 0x41, 0x19, 0x2c, 0x20, 0x08, 0x5e, 0x21, 0x68, 0x80, 0x02,
+ 0x49, 0x19, 0xc9, 0x8d, 0xc9, 0xb2, 0x08, 0x43, 0xff, 0xf7, 0x50, 0xfe, 0x01, 0x46, 0x30, 0x68,
+ 0x44, 0x22, 0x12, 0x5a, 0x00, 0x7f, 0x10, 0x18, 0x19, 0x54, 0x30, 0x68, 0x26, 0x21, 0x07, 0x77,
+ 0x41, 0x5e, 0x1f, 0x29, 0x02, 0xda, 0xff, 0xf7, 0x86, 0xfe, 0x2b, 0xe0, 0x44, 0x22, 0x12, 0x5a,
+ 0x00, 0x21, 0xd2, 0x19, 0x99, 0x54, 0x01, 0x7f, 0xbf, 0x29, 0x01, 0xd3, 0x00, 0x21, 0x00, 0xe0,
+ 0x49, 0x1c, 0x01, 0x77, 0xff, 0xf7, 0xdd, 0xfe, 0x1e, 0x27, 0xff, 0x43, 0xb8, 0x42, 0x24, 0xdd,
+ 0x30, 0x68, 0x40, 0x30, 0xc0, 0x7c, 0x00, 0x28, 0x17, 0xd0, 0x04, 0x20, 0xff, 0xf7, 0x42, 0xfe,
+ 0x03, 0x20, 0x00, 0x07, 0x81, 0x8a, 0xff, 0x21, 0x81, 0x82, 0x01, 0x20, 0x21, 0x68, 0x40, 0x02,
+ 0x49, 0x19, 0x88, 0x84, 0x30, 0x68, 0xc7, 0x84, 0xff, 0xf7, 0xc3, 0xfe, 0x40, 0x1e, 0x40, 0xb2,
+ 0xff, 0xf7, 0xc8, 0xfe, 0xff, 0xf7, 0x9b, 0xfe, 0xf0, 0xbd, 0x3e, 0x20, 0xc0, 0x43, 0xff, 0xf7,
+ 0x29, 0xfe, 0x01, 0x20, 0xff, 0xf7, 0x26, 0xfe, 0xec, 0xe7, 0x31, 0x68, 0x63, 0x20, 0xc8, 0x84,
+ 0xf0, 0xbd, 0x10, 0xb5, 0x05, 0xf0, 0x3e, 0xfe, 0x0f, 0x49, 0x02, 0x0c, 0x09, 0x68, 0x08, 0x87,
+ 0xca, 0x86, 0x88, 0x84, 0x4a, 0x84, 0x10, 0xbd, 0x10, 0xb5, 0x09, 0x4a, 0x11, 0x68, 0x0e, 0x4b,
+ 0xc9, 0x18, 0x89, 0x8e, 0x00, 0x24, 0x49, 0x04, 0x04, 0x70, 0x48, 0x08, 0x11, 0x68, 0xc9, 0x18,
+ 0xc9, 0x8e, 0x08, 0x43, 0x10, 0xbd, 0x00, 0x00, 0x80, 0x8b, 0x00, 0x00, 0x01, 0x20, 0x00, 0x00,
+ 0x84, 0x00, 0x00, 0x20, 0xff, 0xfd, 0x00, 0x00, 0x90, 0x00, 0x00, 0x20, 0x40, 0xa0, 0x01, 0x00,
+ 0xff, 0x7f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x20, 0x80, 0xa1, 0x01, 0x00, 0x10, 0xb5, 0x03, 0x20,
+ 0x00, 0x07, 0x81, 0x8a, 0xff, 0x21, 0x04, 0x31, 0x81, 0x82, 0xff, 0x4a, 0x00, 0x21, 0x14, 0x68,
+ 0xfe, 0x4b, 0xe4, 0x18, 0x21, 0x84, 0x84, 0x8a, 0x81, 0x82, 0x14, 0x68, 0xe4, 0x18, 0x61, 0x84,
+ 0x84, 0x8a, 0x81, 0x82, 0x14, 0x68, 0xe4, 0x18, 0xa1, 0x84, 0x84, 0x8a, 0x81, 0x82, 0x10, 0x68,
+ 0xc0, 0x18, 0xc1, 0x84, 0xce, 0xe7, 0x10, 0xb5, 0x04, 0x46, 0xff, 0xf7, 0xdf, 0xff, 0x03, 0x21,
+ 0x09, 0x07, 0x88, 0x8a, 0x1f, 0x20, 0xc0, 0x43, 0x88, 0x82, 0xef, 0x48, 0xe2, 0x06, 0x03, 0x68,
+ 0xd2, 0x0e, 0x0d, 0x24, 0x64, 0x03, 0x1b, 0x19, 0x5a, 0x85, 0x8a, 0x8a, 0xec, 0x4a, 0x8a, 0x82,
+ 0x04, 0x68, 0x0b, 0x14, 0xe9, 0x4a, 0xa4, 0x18, 0x23, 0x84, 0x8b, 0x8a, 0xff, 0x23, 0x8b, 0x82,
+ 0x01, 0x23, 0x04, 0x68, 0x9b, 0x02, 0xa4, 0x18, 0xa3, 0x84, 0x8b, 0x8a, 0x03, 0x23, 0xdb, 0x43,
+ 0x8b, 0x82, 0x00, 0x68, 0x03, 0x21, 0x80, 0x18, 0xc1, 0x84, 0xa3, 0xe7, 0x10, 0xb5, 0x1f, 0x20,
+ 0xff, 0xf7, 0xd1, 0xff, 0x03, 0x20, 0x00, 0x07, 0x81, 0x8a, 0x30, 0x21, 0xc9, 0x43, 0x81, 0x82,
+ 0xd9, 0x49, 0x10, 0x22, 0x0b, 0x68, 0x0d, 0x24, 0x64, 0x03, 0x1b, 0x19, 0x5a, 0x84, 0x82, 0x8a,
+ 0xd8, 0x4a, 0x82, 0x82, 0x01, 0x20, 0x09, 0x68, 0x80, 0x02, 0xd7, 0x4a, 0x89, 0x18, 0x48, 0x84,
+ 0x88, 0xe7, 0xf8, 0xb5, 0xd5, 0x4e, 0x26, 0x21, 0x30, 0x68, 0x41, 0x5e, 0x0c, 0x12, 0x4d, 0xb2,
+ 0x29, 0x46, 0x1f, 0x31, 0x3f, 0x29, 0x04, 0xd2, 0x1f, 0x2c, 0x02, 0xdc, 0x1f, 0x21, 0xcc, 0x42,
+ 0x09, 0xda, 0x01, 0x22, 0xe1, 0xb2, 0xd2, 0x03, 0x89, 0x18, 0x81, 0x82, 0x80, 0x30, 0x44, 0x70,
+ 0x85, 0x70, 0x01, 0x20, 0xf8, 0xbd, 0xff, 0xf7, 0x04, 0xfe, 0x31, 0x68, 0x40, 0x31, 0x48, 0x76,
+ 0x28, 0x46, 0xff, 0xf7, 0x07, 0xfe, 0xff, 0xf7, 0xc1, 0xff, 0x31, 0x68, 0x53, 0x20, 0x40, 0x5c,
+ 0x00, 0x28, 0x0e, 0xd0, 0x03, 0x20, 0x10, 0x27, 0x00, 0x07, 0xff, 0x22, 0xba, 0x4b, 0xfc, 0x42,
+ 0x09, 0xda, 0x67, 0x00, 0x40, 0x37, 0xcf, 0x84, 0x87, 0x8a, 0x82, 0x82, 0x01, 0x22, 0x52, 0x02,
+ 0x0a, 0xe0, 0xcc, 0x84, 0x0f, 0xe0, 0x0f, 0x2c, 0x0b, 0xdd, 0x67, 0x00, 0x3c, 0x3f, 0xcf, 0x84,
+ 0x87, 0x8a, 0x82, 0x82, 0x01, 0x22, 0xd2, 0x02, 0x1b, 0x68, 0xb0, 0x48, 0x18, 0x18, 0x82, 0x84,
+ 0x01, 0xe0, 0x60, 0x00, 0xc8, 0x84, 0xc8, 0x8c, 0x40, 0xb2, 0xff, 0xf7, 0x43, 0xfd, 0x68, 0x46,
+ 0xff, 0xf7, 0x2a, 0xff, 0xff, 0xf7, 0x1d, 0xff, 0xff, 0xf7, 0xa9, 0xfd, 0x30, 0x68, 0x01, 0x21,
+ 0x81, 0x82, 0x80, 0x30, 0x44, 0x70, 0x85, 0x70, 0x00, 0x20, 0xf8, 0xbd, 0xf0, 0xb5, 0xa2, 0x4c,
+ 0x21, 0x68, 0x0d, 0x23, 0x5b, 0x03, 0xc9, 0x18, 0x89, 0x8a, 0xa4, 0x4a, 0x09, 0x12, 0x15, 0x68,
+ 0x77, 0x22, 0x52, 0x5d, 0x09, 0x18, 0x51, 0x18, 0x49, 0x00, 0x49, 0xb2, 0x49, 0x10, 0x03, 0x22,
+ 0x12, 0x07, 0x96, 0x8a, 0x9a, 0x4e, 0x0c, 0x36, 0x96, 0x82, 0x01, 0x26, 0x27, 0x68, 0x76, 0x03,
+ 0xff, 0x18, 0x3e, 0x81, 0x0f, 0x06, 0x97, 0x4e, 0x97, 0x8a, 0x96, 0x82, 0x05, 0xd5, 0x27, 0x68,
+ 0x00, 0x26, 0xff, 0x18, 0x3e, 0x81, 0x49, 0x42, 0x04, 0xe0, 0x01, 0x26, 0x27, 0x68, 0xb6, 0x02,
+ 0xff, 0x18, 0x3e, 0x81, 0x96, 0x8a, 0x7f, 0x26, 0xf6, 0x43, 0x96, 0x82, 0x27, 0x68, 0x01, 0x26,
+ 0xff, 0x18, 0x3e, 0x81, 0x00, 0x26, 0x0a, 0xe0, 0x94, 0x8a, 0x8d, 0x4c, 0x94, 0x82, 0x86, 0x4f,
+ 0x01, 0x24, 0x3f, 0x68, 0x64, 0x02, 0xff, 0x18, 0x3c, 0x81, 0x76, 0x1c, 0x76, 0xb2, 0x8e, 0x42,
+ 0xf2, 0xdb, 0x40, 0x35, 0x28, 0x74, 0xf0, 0xbd, 0xf0, 0xb5, 0x7f, 0x4d, 0x29, 0x68, 0x0d, 0x26,
+ 0x76, 0x03, 0x89, 0x19, 0x89, 0x8a, 0x03, 0x24, 0x08, 0x18, 0x40, 0x00, 0x40, 0xb2, 0x40, 0x10,
+ 0x24, 0x07, 0xa1, 0x8a, 0x7a, 0x49, 0x0c, 0x31, 0xa1, 0x82, 0x01, 0x21, 0x2a, 0x68, 0x89, 0x03,
+ 0x92, 0x19, 0x11, 0x81, 0x03, 0x06, 0x00, 0x21, 0x00, 0x2b, 0x76, 0x4a, 0xa3, 0x8a, 0xa2, 0x82,
+ 0x04, 0xda, 0x2a, 0x68, 0x92, 0x19, 0x11, 0x81, 0x40, 0x42, 0x04, 0xe0, 0x01, 0x22, 0x2b, 0x68,
+ 0x92, 0x02, 0x9b, 0x19, 0x1a, 0x81, 0x71, 0x4a, 0x71, 0x4f, 0x12, 0x68, 0x40, 0x32, 0x93, 0x7b,
+ 0x01, 0x22, 0x52, 0x02, 0x00, 0x2b, 0x13, 0xd0, 0xa1, 0x8a, 0x7f, 0x21, 0xc9, 0x43, 0xa1, 0x82,
+ 0x2b, 0x68, 0x01, 0x21, 0x9b, 0x19, 0x19, 0x81, 0x00, 0x21, 0x06, 0xe0, 0xa3, 0x8a, 0xa7, 0x82,
+ 0x2b, 0x68, 0x9b, 0x19, 0x1a, 0x81, 0x49, 0x1c, 0x49, 0xb2, 0x81, 0x42, 0xf6, 0xdb, 0xf0, 0xbd,
+ 0xa3, 0x8a, 0x64, 0x4b, 0xa3, 0x82, 0x40, 0x06, 0x01, 0x23, 0x40, 0x0e, 0xdb, 0x02, 0xc0, 0x18,
+ 0x2b, 0x68, 0x9b, 0x19, 0x18, 0x81, 0xa0, 0x8a, 0xa7, 0x82, 0x28, 0x68, 0x80, 0x19, 0x02, 0x81,
+ 0xa0, 0x8a, 0x5c, 0x48, 0x7f, 0x30, 0xa0, 0x82, 0x28, 0x68, 0x80, 0x19, 0x01, 0x81, 0xf0, 0xbd,
+ 0x0f, 0x30, 0x40, 0x10, 0x70, 0x47, 0x10, 0xb5, 0x03, 0x21, 0x09, 0x07, 0x8a, 0x8a, 0x8a, 0x13,
+ 0x8a, 0x82, 0xc0, 0x05, 0x11, 0x22, 0xc0, 0x0d, 0x52, 0x02, 0x83, 0x18, 0x4a, 0x4a, 0x14, 0x68,
+ 0x4a, 0x48, 0x24, 0x18, 0xe3, 0x82, 0x8b, 0x8a, 0x4f, 0x4b, 0x8b, 0x82, 0x12, 0x68, 0x59, 0x1c,
+ 0x10, 0x18, 0xc1, 0x82, 0x6e, 0xe6, 0x10, 0xb5, 0x03, 0x21, 0x09, 0x07, 0x8a, 0x8a, 0x8a, 0x13,
+ 0x8a, 0x82, 0xc0, 0x05, 0x09, 0x22, 0xc0, 0x0d, 0x92, 0x02, 0x83, 0x18, 0x3e, 0x4a, 0x14, 0x68,
+ 0x3e, 0x48, 0x24, 0x18, 0xe3, 0x82, 0x8b, 0x8a, 0x43, 0x4b, 0x8b, 0x82, 0x12, 0x68, 0x59, 0x1c,
+ 0x10, 0x18, 0xc1, 0x82, 0x56, 0xe6, 0x10, 0xb5, 0x3c, 0x4c, 0x20, 0x68, 0xc2, 0x7d, 0x01, 0x46,
+ 0x53, 0x07, 0x40, 0x31, 0x00, 0x2b, 0x14, 0xda, 0x92, 0x07, 0x0d, 0xd4, 0x81, 0x21, 0x41, 0x56,
+ 0x0f, 0x31, 0x48, 0x10, 0xff, 0xf7, 0xd7, 0xff, 0x21, 0x68, 0x82, 0x20, 0x08, 0x56, 0x0f, 0x30,
+ 0x40, 0x10, 0xff, 0xf7, 0xb8, 0xff, 0x0d, 0xe0, 0x0f, 0x20, 0x08, 0x56, 0xff, 0xf7, 0x54, 0xff,
+ 0x08, 0xe0, 0x19, 0x20, 0x08, 0x56, 0xff, 0xf7, 0xd5, 0xfc, 0x21, 0x68, 0x50, 0x20, 0x08, 0x56,
+ 0xff, 0xf7, 0x04, 0xff, 0x21, 0x68, 0x01, 0x20, 0x48, 0x74, 0x2b, 0xe6, 0x70, 0xb5, 0x06, 0x46,
+ 0x05, 0xf0, 0x50, 0xfc, 0x25, 0x4d, 0x04, 0x46, 0x28, 0x68, 0x22, 0x30, 0x05, 0xf0, 0x64, 0xff,
+ 0x01, 0x46, 0x10, 0x20, 0xc1, 0x41, 0x60, 0x1a, 0x30, 0x60, 0x2d, 0x68, 0x28, 0x46, 0x36, 0x30,
+ 0x05, 0xf0, 0x5a, 0xff, 0x01, 0x46, 0x10, 0x20, 0xc1, 0x41, 0x20, 0x48, 0x6a, 0x7c, 0x61, 0x1a,
+ 0x40, 0x7c, 0x05, 0x2a, 0x04, 0xd0, 0x40, 0x04, 0x88, 0x42, 0x03, 0xd2, 0x01, 0x20, 0x70, 0xbd,
+ 0xc0, 0x01, 0xf9, 0xe7, 0x00, 0x20, 0x70, 0xbd, 0xf8, 0xb5, 0x14, 0x48, 0x00, 0x68, 0x80, 0x8a,
+ 0x00, 0x04, 0x18, 0xd4, 0x03, 0x26, 0x36, 0x07, 0xb0, 0x8a, 0x15, 0x4f, 0xb7, 0x82, 0x0a, 0x4c,
+ 0x20, 0x21, 0x22, 0x68, 0x0d, 0x20, 0x40, 0x03, 0x10, 0x18, 0x41, 0x84, 0x68, 0x46, 0xff, 0xf7,
+ 0xc5, 0xff, 0x00, 0x25, 0x01, 0x28, 0x1d, 0xd0, 0xb0, 0x8a, 0xb7, 0x82, 0x21, 0x68, 0x0d, 0x20,
+ 0x40, 0x03, 0x08, 0x18, 0x45, 0x84, 0xf8, 0xbd, 0x84, 0x00, 0x00, 0x20, 0x40, 0xa0, 0x01, 0x00,
+ 0xf3, 0x8f, 0x00, 0x00, 0xff, 0xfb, 0x00, 0x00, 0x80, 0xa1, 0x01, 0x00, 0x90, 0x00, 0x00, 0x20,
+ 0xff, 0xfd, 0x00, 0x00, 0x80, 0xf7, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x04, 0x00, 0x20,
+ 0xdf, 0xff, 0x00, 0x00, 0xff, 0xf7, 0x77, 0xff, 0xf9, 0x48, 0x53, 0x21, 0x00, 0x68, 0x09, 0x5c,
+ 0x00, 0x29, 0x0e, 0xd0, 0x81, 0x22, 0x11, 0x56, 0xf6, 0x4a, 0x10, 0x31, 0x1f, 0x29, 0x21, 0x68,
+ 0x0a, 0xd8, 0x8b, 0x18, 0x28, 0x21, 0x59, 0x5e, 0x23, 0x68, 0x89, 0x02, 0x9a, 0x18, 0x52, 0x8d,
+ 0x09, 0xe0, 0x05, 0x83, 0x45, 0x83, 0x0b, 0xe0, 0x8b, 0x18, 0x2c, 0x21, 0x59, 0x5e, 0x23, 0x68,
+ 0x89, 0x02, 0x9a, 0x18, 0xd2, 0x8d, 0xd2, 0xb2, 0x11, 0x43, 0x0a, 0x0c, 0x02, 0x83, 0x41, 0x83,
+ 0xe9, 0x49, 0x81, 0x82, 0xbf, 0xe7, 0x30, 0xb5, 0xff, 0xf7, 0x3b, 0xfc, 0xe4, 0x4d, 0x29, 0x68,
+ 0x40, 0x31, 0x48, 0x76, 0x1f, 0x20, 0xff, 0xf7, 0x3d, 0xfc, 0x1e, 0x21, 0x28, 0x68, 0xc9, 0x43,
+ 0xc1, 0x84, 0x40, 0x30, 0xc0, 0x7c, 0x00, 0x28, 0x1d, 0xd0, 0x02, 0x20, 0xff, 0xf7, 0x9a, 0xfb,
+ 0x28, 0x68, 0x00, 0x24, 0x04, 0x85, 0x04, 0x77, 0x84, 0x75, 0x1f, 0x20, 0xff, 0xf7, 0xbb, 0xfd,
+ 0x28, 0x68, 0x53, 0x21, 0x09, 0x5c, 0x00, 0x29, 0x0b, 0xd0, 0x03, 0x21, 0x09, 0x07, 0x8a, 0x8a,
+ 0xff, 0x22, 0x8a, 0x82, 0xd5, 0x4a, 0x01, 0x21, 0x12, 0x68, 0x49, 0x02, 0xd1, 0x4b, 0xd2, 0x18,
+ 0x91, 0x84, 0x84, 0x82, 0x30, 0xbd, 0x1f, 0x20, 0xc0, 0x43, 0xff, 0xf7, 0x7b, 0xfb, 0x01, 0x20,
+ 0xdc, 0xe7, 0x10, 0xb5, 0x04, 0x46, 0xff, 0xf7, 0x81, 0xfd, 0x03, 0x21, 0x09, 0x07, 0x88, 0x8a,
+ 0x1f, 0x20, 0xc0, 0x43, 0x88, 0x82, 0xc9, 0x48, 0xe2, 0x06, 0x03, 0x68, 0xd2, 0x0e, 0x0d, 0x24,
+ 0x64, 0x03, 0x1b, 0x19, 0x5a, 0x85, 0x8a, 0x8a, 0xc5, 0x4a, 0x8a, 0x82, 0xc5, 0x4b, 0x04, 0x68,
+ 0xc0, 0x4a, 0xa4, 0x18, 0x23, 0x84, 0x8b, 0x8a, 0xff, 0x23, 0x8b, 0x82, 0x01, 0x21, 0x00, 0x68,
+ 0x89, 0x02, 0x80, 0x18, 0x81, 0x84, 0x4d, 0xe5, 0x00, 0xb5, 0xff, 0xf7, 0xe2, 0xfb, 0xb8, 0x49,
+ 0x59, 0x22, 0x09, 0x68, 0x50, 0x54, 0x00, 0x20, 0x08, 0x77, 0x88, 0x75, 0x1c, 0x20, 0xff, 0xf7,
+ 0xd0, 0xff, 0x00, 0xbd, 0x00, 0xb5, 0xff, 0xf7, 0xe6, 0xfe, 0xff, 0xf7, 0x4f, 0xfd, 0x03, 0x20,
+ 0x00, 0x07, 0x81, 0x8a, 0x30, 0x21, 0xc9, 0x43, 0x81, 0x82, 0xb0, 0x49, 0x00, 0x20, 0x09, 0x68,
+ 0x0d, 0x22, 0x52, 0x03, 0x89, 0x18, 0x48, 0x84, 0x00, 0xbd, 0x10, 0xb5, 0x00, 0x23, 0x00, 0x28,
+ 0x1c, 0xd0, 0xad, 0x4c, 0x00, 0x22, 0xa0, 0x42, 0x00, 0xd9, 0x20, 0x46, 0x52, 0x1c, 0x40, 0x00,
+ 0x52, 0xb2, 0x00, 0x28, 0xfa, 0xda, 0xd4, 0x17, 0xe4, 0x0e, 0xa4, 0x18, 0x64, 0x09, 0x64, 0x01,
+ 0x12, 0x1b, 0x1f, 0x24, 0xa2, 0x1a, 0xd2, 0xb2, 0x0a, 0x70, 0x08, 0x2a, 0x09, 0xd2, 0x00, 0x0e,
+ 0x00, 0x06, 0xa2, 0x1a, 0xd0, 0x40, 0xc0, 0xb2, 0x0b, 0x70, 0x0b, 0xe5, 0x0b, 0x70, 0x00, 0x20,
+ 0x08, 0xe5, 0x00, 0x0e, 0xd2, 0x1f, 0x0a, 0x70, 0x04, 0xe5, 0xf0, 0xb5, 0x03, 0x24, 0x24, 0x07,
+ 0xa1, 0x8a, 0x9a, 0x49, 0xa1, 0x82, 0x00, 0x28, 0x01, 0xdd, 0x01, 0x21, 0x00, 0xe0, 0x00, 0x21,
+ 0x97, 0x4a, 0x89, 0x02, 0x91, 0x4e, 0x89, 0x18, 0x32, 0x68, 0x0d, 0x27, 0x7f, 0x03, 0xd2, 0x19,
+ 0x11, 0x81, 0x01, 0x23, 0x00, 0x21, 0x5b, 0x02, 0x45, 0x42, 0x07, 0xe0, 0xa2, 0x8a, 0x91, 0x4a,
+ 0xa2, 0x82, 0x32, 0x68, 0xd2, 0x19, 0x13, 0x81, 0x49, 0x1c, 0x49, 0xb2, 0x00, 0x28, 0x01, 0xdb,
+ 0x02, 0x46, 0x00, 0xe0, 0x2a, 0x46, 0x8a, 0x42, 0xf0, 0xdc, 0xf0, 0xbd, 0xf0, 0xb5, 0x0e, 0x27,
+ 0x00, 0x22, 0x82, 0x4d, 0x88, 0x4e, 0xff, 0x43, 0x7d, 0x4c, 0x0f, 0x23, 0x00, 0x29, 0x16, 0xd0,
+ 0x00, 0x28, 0x09, 0xd0, 0x10, 0x46, 0x09, 0xe0, 0x29, 0x68, 0x89, 0x19, 0x89, 0x88, 0x89, 0x06,
+ 0x89, 0x16, 0x79, 0x1a, 0xc1, 0x84, 0xf0, 0xbd, 0x1f, 0x46, 0x18, 0x46, 0xff, 0xf7, 0x53, 0xfe,
+ 0x20, 0x68, 0xc1, 0x7d, 0x09, 0x09, 0xc9, 0x43, 0x89, 0x07, 0xed, 0xd1, 0xf0, 0xbd, 0x00, 0x28,
+ 0x01, 0xd0, 0x10, 0x46, 0x01, 0xe0, 0x1f, 0x46, 0x18, 0x46, 0xff, 0xf7, 0x2c, 0xfe, 0x28, 0x68,
+ 0x80, 0x19, 0x40, 0x88, 0x21, 0x68, 0x80, 0x06, 0x80, 0x16, 0x38, 0x1a, 0xc8, 0x84, 0xf0, 0xbd,
+ 0x40, 0x00, 0x0f, 0x38, 0x40, 0xb2, 0x70, 0x47, 0x30, 0xb5, 0x65, 0x4c, 0x00, 0x20, 0x21, 0x68,
+ 0x66, 0x4a, 0x08, 0x85, 0x10, 0x68, 0x6c, 0x4b, 0xc0, 0x18, 0x80, 0x88, 0x80, 0x06, 0x80, 0x16,
+ 0xff, 0xf7, 0xee, 0xff, 0x21, 0x68, 0x80, 0x31, 0x48, 0x70, 0x10, 0x68, 0xc0, 0x18, 0x40, 0x88,
+ 0x80, 0x06, 0x80, 0x16, 0xff, 0xf7, 0xe4, 0xff, 0x21, 0x68, 0x01, 0x22, 0x0b, 0x46, 0x80, 0x33,
+ 0x98, 0x70, 0x9a, 0x56, 0x00, 0x2a, 0x01, 0xdb, 0x15, 0x46, 0x00, 0xe0, 0x55, 0x42, 0x00, 0x28,
+ 0x01, 0xdb, 0x03, 0x46, 0x00, 0xe0, 0x43, 0x42, 0x9d, 0x42, 0x03, 0xdd, 0x0b, 0x8d, 0x04, 0x25,
+ 0x2b, 0x43, 0x0b, 0x85, 0x00, 0x2a, 0x03, 0xdd, 0x0a, 0x8d, 0x02, 0x23, 0x1a, 0x43, 0x0a, 0x85,
+ 0x00, 0x28, 0x03, 0xdd, 0x08, 0x8d, 0x01, 0x22, 0x10, 0x43, 0x08, 0x85, 0xca, 0x7d, 0x90, 0x06,
+ 0x80, 0x0f, 0x13, 0xd0, 0x01, 0x28, 0x20, 0xd0, 0x02, 0x28, 0x21, 0xd0, 0x03, 0x28, 0x0c, 0xd1,
+ 0x08, 0x8d, 0x01, 0x21, 0x80, 0x07, 0xc0, 0x0f, 0xff, 0xf7, 0x80, 0xff, 0x20, 0x68, 0x00, 0x8d,
+ 0xc0, 0x07, 0xc0, 0x0f, 0x00, 0x21, 0xff, 0xf7, 0x79, 0xff, 0x30, 0xbd, 0x28, 0x20, 0x08, 0x5e,
+ 0x04, 0x28, 0x01, 0xdb, 0x01, 0x21, 0x00, 0xe0, 0x00, 0x21, 0x04, 0x28, 0x02, 0xdb, 0x80, 0x07,
+ 0xc0, 0x0f, 0xf0, 0xe7, 0xc0, 0x07, 0xc0, 0x0f, 0xed, 0xe7, 0xd0, 0x07, 0xc0, 0x0f, 0xe9, 0xe7,
+ 0xd0, 0x07, 0xc0, 0x0f, 0x01, 0x21, 0xe6, 0xe7, 0xf8, 0xb5, 0xff, 0xf7, 0xd2, 0xfa, 0x30, 0x4c,
+ 0x59, 0x22, 0x21, 0x68, 0x00, 0x27, 0x50, 0x54, 0x8f, 0x82, 0xc8, 0x7d, 0x39, 0x4d, 0x03, 0x07,
+ 0x36, 0x48, 0x37, 0x4a, 0xab, 0x8a, 0xa8, 0x82, 0x04, 0xd5, 0x2c, 0x48, 0x00, 0x68, 0x80, 0x18,
+ 0x07, 0x80, 0x04, 0xe0, 0x29, 0x48, 0x08, 0x23, 0x00, 0x68, 0x80, 0x18, 0x03, 0x80, 0xc8, 0x7d,
+ 0x1e, 0x26, 0x40, 0x07, 0x40, 0x0f, 0xf6, 0x43, 0x03, 0x00, 0x05, 0xf0, 0x99, 0xfd, 0x08, 0x05,
+ 0x0e, 0x17, 0x2d, 0x5d, 0x5d, 0x85, 0x8d, 0x5f, 0x1f, 0x20, 0xff, 0xf7, 0xb3, 0xfa, 0x21, 0x68,
+ 0x50, 0x20, 0x08, 0x56, 0xff, 0xf7, 0xe2, 0xfc, 0x14, 0xe0, 0x30, 0x46, 0xff, 0xf7, 0xaa, 0xfa,
+ 0x21, 0x68, 0x50, 0x20, 0x08, 0x56, 0xff, 0xf7, 0xd9, 0xfc, 0x20, 0xe0, 0x00, 0x20, 0xff, 0xf7,
+ 0xa1, 0xfa, 0x20, 0x68, 0x40, 0x30, 0xc0, 0x7c, 0x00, 0x28, 0x07, 0xd0, 0x01, 0x20, 0xc0, 0x43,
+ 0xff, 0xf7, 0x00, 0xfa, 0x21, 0x68, 0x1f, 0x20, 0xc8, 0x84, 0x37, 0xe0, 0x20, 0x20, 0xff, 0xf7,
+ 0xf9, 0xf9, 0x00, 0x20, 0xc0, 0x43, 0xf3, 0xe7, 0x00, 0x20, 0xff, 0xf7, 0x8b, 0xfa, 0x20, 0x68,
+ 0x40, 0x30, 0xc0, 0x7c, 0x00, 0x28, 0x05, 0xd0, 0x02, 0x20, 0xff, 0xf7, 0xeb, 0xf9, 0x20, 0x68,
+ 0xc6, 0x84, 0x23, 0xe0, 0x1f, 0x20, 0xc0, 0x43, 0xff, 0xf7, 0xe4, 0xf9, 0x01, 0x20, 0xf4, 0xe7,
+ 0x90, 0x00, 0x00, 0x20, 0x40, 0xa0, 0x01, 0x00, 0x01, 0xec, 0x00, 0x00, 0x84, 0x00, 0x00, 0x20,
+ 0xf3, 0x0f, 0x00, 0x00, 0x0c, 0xb0, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x00, 0x80, 0x8b, 0x00, 0x00,
+ 0x01, 0x40, 0x00, 0x00, 0xff, 0xfd, 0x00, 0x00, 0x80, 0xa2, 0x01, 0x00, 0xf7, 0xff, 0x00, 0x00,
+ 0x80, 0xa0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xff, 0xf7, 0x16, 0xff, 0x20, 0x68, 0xc0, 0x7d,
+ 0x40, 0x07, 0x15, 0xd4, 0xff, 0xf7, 0x12, 0xfc, 0x20, 0x68, 0x53, 0x21, 0x09, 0x5c, 0x00, 0x29,
+ 0x0c, 0xd0, 0xc0, 0x7d, 0x80, 0x07, 0x09, 0xd5, 0xa8, 0x8a, 0xff, 0x20, 0xa8, 0x82, 0xf9, 0x48,
+ 0x01, 0x21, 0x00, 0x68, 0xc9, 0x02, 0xf8, 0x4a, 0x80, 0x18, 0x81, 0x84, 0xff, 0xf7, 0x17, 0xfa,
+ 0xff, 0xf7, 0x87, 0xfb, 0x20, 0x68, 0x5e, 0x30, 0xff, 0xf7, 0x8e, 0xfb, 0x20, 0x68, 0x87, 0x75,
+ 0x07, 0x77, 0x47, 0x87, 0x87, 0x87, 0xae, 0xe5, 0x20, 0x20, 0xff, 0xf7, 0x8e, 0xfe, 0x00, 0x20,
+ 0xc0, 0x43, 0xff, 0xf7, 0x8a, 0xfe, 0x95, 0xe7, 0x1f, 0x20, 0xc0, 0x43, 0xff, 0xf7, 0x85, 0xfe,
+ 0x01, 0x20, 0xff, 0xf7, 0x82, 0xfe, 0xa2, 0xe7, 0x10, 0xb5, 0x05, 0xf0, 0xab, 0xf9, 0xe7, 0x49,
+ 0x09, 0x68, 0x88, 0x84, 0x00, 0x0c, 0x48, 0x84, 0x0c, 0xe5, 0x7c, 0xb5, 0x06, 0x46, 0x08, 0x68,
+ 0x69, 0x46, 0xc0, 0x08, 0xff, 0xf7, 0x49, 0xfe, 0xe0, 0x4d, 0x44, 0x22, 0x29, 0x68, 0xe0, 0x4c,
+ 0x52, 0x5a, 0x0b, 0x7f, 0xd2, 0x18, 0xa0, 0x54, 0x08, 0x7f, 0xbf, 0x28, 0x01, 0xd3, 0xbf, 0x20,
+ 0x00, 0xe0, 0x40, 0x1c, 0x08, 0x77, 0x01, 0xa9, 0x30, 0x68, 0xff, 0xf7, 0x36, 0xfe, 0x69, 0x46,
+ 0x09, 0x78, 0x0a, 0x01, 0x69, 0x46, 0x09, 0x79, 0x0a, 0x43, 0x29, 0x68, 0x0b, 0x46, 0x40, 0x33,
+ 0x9d, 0x88, 0x0e, 0x7f, 0xad, 0x19, 0x62, 0x55, 0x0a, 0x7f, 0xbf, 0x2a, 0x01, 0xd3, 0xbf, 0x22,
+ 0x00, 0xe0, 0x52, 0x1c, 0xd2, 0xb2, 0x0a, 0x77, 0x9b, 0x88, 0x9a, 0x18, 0xa0, 0x54, 0x08, 0x7f,
+ 0xbf, 0x28, 0x01, 0xd3, 0xbf, 0x20, 0x00, 0xe0, 0x40, 0x1c, 0x08, 0x77, 0x7c, 0xbd, 0x70, 0xb5,
+ 0xc6, 0x4a, 0x0e, 0x23, 0x14, 0x68, 0x00, 0x25, 0xe3, 0x84, 0xc2, 0x4b, 0xc5, 0x4c, 0x00, 0x29,
+ 0x2b, 0xd0, 0x00, 0x28, 0x18, 0x68, 0x11, 0xd0, 0x00, 0x19, 0x80, 0x88, 0x80, 0x06, 0x80, 0x16,
+ 0xff, 0xf7, 0x86, 0xfe, 0x11, 0x68, 0x81, 0x26, 0x8e, 0x57, 0xb0, 0x42, 0x1a, 0xda, 0x18, 0x68,
+ 0x00, 0x19, 0x80, 0x88, 0x80, 0x06, 0x80, 0x16, 0x40, 0x1c, 0x10, 0xe0, 0x00, 0x19, 0x80, 0x88,
+ 0x80, 0x06, 0x80, 0x16, 0xff, 0xf7, 0x74, 0xfe, 0x11, 0x68, 0x81, 0x26, 0x8e, 0x57, 0xb0, 0x42,
+ 0x08, 0xdd, 0x18, 0x68, 0x00, 0x19, 0x80, 0x88, 0x80, 0x06, 0x80, 0x16, 0x40, 0x1e, 0xff, 0xf7,
+ 0xa2, 0xfc, 0x70, 0xbd, 0x10, 0x68, 0xc5, 0x84, 0x70, 0xbd, 0x00, 0x28, 0x18, 0x68, 0x11, 0xd0,
+ 0x00, 0x19, 0x40, 0x88, 0x80, 0x06, 0x80, 0x16, 0xff, 0xf7, 0x5a, 0xfe, 0x11, 0x68, 0x82, 0x26,
+ 0x8e, 0x57, 0xb0, 0x42, 0xee, 0xda, 0x18, 0x68, 0x00, 0x19, 0x40, 0x88, 0x80, 0x06, 0x80, 0x16,
+ 0x40, 0x1c, 0x10, 0xe0, 0x00, 0x19, 0x40, 0x88, 0x80, 0x06, 0x80, 0x16, 0xff, 0xf7, 0x48, 0xfe,
+ 0x11, 0x68, 0x82, 0x26, 0x8e, 0x57, 0xb0, 0x42, 0xdc, 0xdd, 0x18, 0x68, 0x00, 0x19, 0x40, 0x88,
+ 0x80, 0x06, 0x80, 0x16, 0x40, 0x1e, 0xff, 0xf7, 0x5e, 0xfc, 0x70, 0xbd, 0xf0, 0xb5, 0x85, 0xb0,
+ 0x00, 0x20, 0x69, 0x46, 0x95, 0x4f, 0x08, 0x72, 0x38, 0x68, 0x81, 0x8a, 0x09, 0x04, 0x7d, 0xd4,
+ 0x03, 0x25, 0x2d, 0x07, 0xa9, 0x8a, 0x20, 0x21, 0xc9, 0x43, 0xa9, 0x82, 0x8d, 0x4c, 0x20, 0x21,
+ 0x22, 0x68, 0x0d, 0x26, 0x76, 0x03, 0x92, 0x19, 0x51, 0x84, 0x53, 0x21, 0x09, 0x5c, 0x00, 0x29,
+ 0x11, 0xd0, 0x26, 0x21, 0x41, 0x5e, 0x10, 0x31, 0x1f, 0x29, 0x02, 0xd9, 0xc0, 0x7d, 0x80, 0x07,
+ 0x0d, 0xd4, 0x20, 0x68, 0x84, 0x49, 0x42, 0x18, 0x28, 0x20, 0x10, 0x5e, 0x22, 0x68, 0x80, 0x02,
+ 0x51, 0x18, 0x49, 0x8d, 0x0c, 0xe0, 0x02, 0xa8, 0xff, 0xf7, 0xa6, 0xfa, 0x0a, 0xe0, 0x20, 0x68,
+ 0x7d, 0x49, 0x42, 0x18, 0x2c, 0x20, 0x10, 0x5e, 0x22, 0x68, 0x80, 0x02, 0x51, 0x18, 0xc9, 0x8d,
+ 0xc9, 0xb2, 0x08, 0x43, 0x00, 0x90, 0x01, 0xa8, 0xff, 0xf7, 0x78, 0xfc, 0x03, 0x90, 0x77, 0x48,
+ 0x07, 0x68, 0x38, 0x46, 0x3a, 0x30, 0x05, 0xf0, 0xdf, 0xfb, 0x10, 0x21, 0xc8, 0x41, 0x00, 0x99,
+ 0x40, 0x18, 0x88, 0x42, 0x01, 0xd2, 0x00, 0x20, 0xc0, 0x43, 0x03, 0x99, 0x00, 0x90, 0x01, 0x29,
+ 0x21, 0xd0, 0xf9, 0x8c, 0x00, 0x29, 0x1e, 0xd0, 0x6f, 0x49, 0x89, 0x7c, 0x09, 0x01, 0x81, 0x42,
+ 0x7c, 0xd2, 0x27, 0x22, 0x01, 0x99, 0x12, 0x02, 0x91, 0x42, 0x05, 0xd8, 0x6b, 0x4a, 0x91, 0x42,
+ 0x74, 0xd9, 0xf9, 0x7d, 0x49, 0x06, 0x71, 0xd5, 0x01, 0xa9, 0x68, 0x46, 0xff, 0xf7, 0xfd, 0xfe,
+ 0x62, 0x4a, 0x11, 0x68, 0xcb, 0x7d, 0xd8, 0x07, 0x65, 0x48, 0x08, 0x5e, 0x20, 0xd0, 0x00, 0x28,
+ 0x1c, 0xda, 0x40, 0x1c, 0x1f, 0xe0, 0x01, 0xa9, 0x68, 0x46, 0xff, 0xf7, 0xee, 0xfe, 0x68, 0x46,
+ 0x00, 0x7a, 0x00, 0x28, 0x10, 0xd0, 0x00, 0x20, 0x01, 0x21, 0x80, 0x03, 0xc9, 0x03, 0x41, 0x18,
+ 0x03, 0x98, 0x40, 0x03, 0x01, 0x43, 0x55, 0x48, 0x00, 0x68, 0x00, 0xe0, 0x02, 0xe0, 0x02, 0x7f,
+ 0x11, 0x43, 0x81, 0x82, 0x05, 0xb0, 0xf0, 0xbd, 0x01, 0x20, 0xed, 0xe7, 0x00, 0x20, 0x02, 0xe0,
+ 0x00, 0x28, 0xfb, 0xdd, 0x40, 0x1e, 0xc8, 0x84, 0x98, 0x07, 0x40, 0xd5, 0x53, 0x20, 0x47, 0x5c,
+ 0x01, 0x20, 0x50, 0x4a, 0x40, 0x02, 0x00, 0x2f, 0x01, 0xd0, 0x5f, 0x07, 0x05, 0xd5, 0xa9, 0x8a,
+ 0xaa, 0x82, 0x21, 0x68, 0x89, 0x19, 0x08, 0x81, 0x66, 0xe0, 0xdb, 0x07, 0xff, 0x27, 0x00, 0x2b,
+ 0x13, 0xd0, 0x26, 0x23, 0xcb, 0x5e, 0x10, 0x33, 0x12, 0xd1, 0x3e, 0x20, 0xc0, 0x43, 0xff, 0xf7,
+ 0x39, 0xf8, 0x01, 0x20, 0xff, 0xf7, 0x36, 0xf8, 0xa8, 0x8a, 0xaf, 0x82, 0x01, 0x21, 0x22, 0x68,
+ 0x89, 0x02, 0x39, 0x48, 0x10, 0x18, 0x81, 0x84, 0x4e, 0xe0, 0xc9, 0x8c, 0x0f, 0x29, 0x05, 0xd0,
+ 0xa9, 0x8a, 0xaa, 0x82, 0x21, 0x68, 0x89, 0x19, 0x08, 0x81, 0xd8, 0xe7, 0x3f, 0x20, 0xff, 0xf7,
+ 0x21, 0xf8, 0x00, 0x20, 0xc0, 0x43, 0xff, 0xf7, 0x1d, 0xf8, 0xa8, 0x8a, 0xaf, 0x82, 0x01, 0x20,
+ 0x22, 0x68, 0x80, 0x02, 0x2c, 0x49, 0x51, 0x18, 0x88, 0x84, 0x35, 0xe0, 0x64, 0xe0, 0x2b, 0x4f,
+ 0x58, 0x07, 0x2d, 0xd5, 0x98, 0x06, 0x80, 0x0f, 0x06, 0xd0, 0x01, 0x28, 0x15, 0xd0, 0x02, 0x28,
+ 0x16, 0xd0, 0x03, 0x28, 0x28, 0xd1, 0x17, 0xe0, 0x28, 0x20, 0x08, 0x5e, 0x04, 0x28, 0x01, 0xdb,
+ 0x01, 0x21, 0x00, 0xe0, 0x00, 0x21, 0x03, 0x28, 0x02, 0xdb, 0x80, 0x07, 0xc0, 0x0f, 0x01, 0xe0,
+ 0xc0, 0x07, 0xc0, 0x0f, 0xff, 0xf7, 0xab, 0xfe, 0x16, 0xe0, 0xd8, 0x07, 0xc0, 0x0f, 0x0d, 0xe0,
+ 0xd8, 0x07, 0xc0, 0x0f, 0x01, 0x21, 0xf5, 0xe7, 0x08, 0x8d, 0x01, 0x21, 0x80, 0x07, 0xc0, 0x0f,
+ 0xff, 0xf7, 0x9d, 0xfe, 0x38, 0x68, 0x00, 0x8d, 0xc0, 0x07, 0xc0, 0x0f, 0x00, 0x21, 0xe9, 0xe7,
+ 0xc8, 0x8c, 0x40, 0xb2, 0xff, 0xf7, 0x76, 0xf8, 0xff, 0xf7, 0x4e, 0xfe, 0x0f, 0x48, 0x00, 0x27,
+ 0x00, 0x68, 0x47, 0x87, 0x87, 0x87, 0xff, 0xf7, 0x42, 0xf8, 0x02, 0xa8, 0xff, 0xf7, 0xbc, 0xf9,
+ 0x00, 0x90, 0xa8, 0x8a, 0x20, 0x20, 0xc0, 0x43, 0xa8, 0x82, 0x20, 0x68, 0x80, 0x19, 0x47, 0x84,
+ 0x06, 0x48, 0x00, 0x68, 0xc1, 0x8c, 0x02, 0x7f, 0x49, 0x06, 0x49, 0x0c, 0x0a, 0x43, 0x82, 0x82,
+ 0x60, 0xe7, 0x00, 0x00, 0x84, 0x00, 0x00, 0x20, 0x40, 0xa0, 0x01, 0x00, 0x90, 0x00, 0x00, 0x20,
+ 0x00, 0x01, 0x00, 0x20, 0x80, 0xa2, 0x01, 0x00, 0x00, 0x04, 0x00, 0x20, 0xcc, 0x07, 0x00, 0x00,
+ 0x26, 0x00, 0x00, 0x00, 0xff, 0xfd, 0x00, 0x00, 0x01, 0x0c, 0x79, 0x87, 0xb8, 0x87, 0xff, 0xf7,
+ 0x16, 0xf8, 0xa8, 0x8a, 0x20, 0x20, 0xc0, 0x43, 0xa8, 0x82, 0x21, 0x68, 0x00, 0x20, 0x89, 0x19,
+ 0x48, 0x84, 0xd5, 0xe7, 0xf0, 0xb5, 0x03, 0x20, 0x00, 0x07, 0x81, 0x8a, 0xfa, 0x49, 0x81, 0x82,
+ 0xfa, 0x49, 0x00, 0x22, 0x0c, 0x68, 0x0d, 0x23, 0x5b, 0x03, 0xe4, 0x18, 0x62, 0x80, 0x84, 0x8a,
+ 0x01, 0x26, 0x86, 0x82, 0x69, 0x24, 0x0d, 0x68, 0x24, 0x01, 0xed, 0x18, 0xac, 0x80, 0x84, 0x8a,
+ 0x94, 0x1e, 0x84, 0x82, 0x0c, 0x68, 0xe4, 0x18, 0xe2, 0x80, 0x84, 0x8a, 0xf0, 0x4c, 0x84, 0x82,
+ 0x0c, 0x68, 0xe4, 0x18, 0x22, 0x81, 0x84, 0x8a, 0xee, 0x4c, 0x84, 0x82, 0x0c, 0x68, 0xe4, 0x18,
+ 0x22, 0x84, 0x84, 0x8a, 0xec, 0x4d, 0x85, 0x82, 0x0c, 0x68, 0xe4, 0x18, 0x62, 0x84, 0x84, 0x8a,
+ 0xea, 0x4c, 0x84, 0x82, 0x0f, 0x68, 0xdc, 0x10, 0xff, 0x18, 0x3c, 0x85, 0x84, 0x8a, 0x1f, 0x24,
+ 0xe4, 0x43, 0x84, 0x82, 0x0f, 0x68, 0x0d, 0x24, 0xff, 0x18, 0x7c, 0x85, 0x84, 0x8a, 0xe4, 0x4c,
+ 0x84, 0x82, 0x0c, 0x68, 0xe3, 0x18, 0x1e, 0x86, 0x83, 0x8a, 0xe2, 0x4b, 0x83, 0x82, 0x0c, 0x68,
+ 0xe1, 0x4b, 0xe4, 0x18, 0x22, 0x80, 0x84, 0x8a, 0xe0, 0x4e, 0x86, 0x82, 0x0c, 0x68, 0xe4, 0x18,
+ 0x62, 0x80, 0x84, 0x8a, 0x86, 0x82, 0x0c, 0x68, 0xe4, 0x18, 0xa2, 0x80, 0x84, 0x8a, 0xb4, 0x1c,
+ 0x84, 0x82, 0x0e, 0x68, 0xf6, 0x18, 0xf2, 0x80, 0x86, 0x8a, 0x84, 0x82, 0x0e, 0x68, 0xf6, 0x18,
+ 0x32, 0x81, 0x86, 0x8a, 0x84, 0x82, 0x0c, 0x68, 0xe4, 0x18, 0x62, 0x81, 0x84, 0x8a, 0xd4, 0x4c,
+ 0x84, 0x82, 0x0c, 0x68, 0xe4, 0x18, 0xa2, 0x81, 0x84, 0x8a, 0xc0, 0x24, 0xe4, 0x43, 0x84, 0x82,
+ 0x0e, 0x68, 0x40, 0x24, 0xf6, 0x18, 0xf4, 0x81, 0x84, 0x8a, 0x01, 0x24, 0xa4, 0x03, 0x84, 0x82,
+ 0x0c, 0x68, 0xe4, 0x18, 0xe2, 0x82, 0x84, 0x8a, 0xff, 0x24, 0x04, 0x34, 0x84, 0x82, 0x0c, 0x68,
+ 0xe4, 0x18, 0x22, 0x84, 0x84, 0x8a, 0x82, 0x82, 0x0c, 0x68, 0xe4, 0x18, 0x62, 0x84, 0x84, 0x8a,
+ 0x82, 0x82, 0x0c, 0x68, 0xe4, 0x18, 0xa2, 0x84, 0x84, 0x8a, 0x82, 0x82, 0x0c, 0x68, 0xe3, 0x18,
+ 0xda, 0x84, 0x83, 0x8a, 0x19, 0x23, 0xdb, 0x43, 0x83, 0x82, 0x0e, 0x68, 0x10, 0x24, 0xba, 0x4b,
+ 0x40, 0x33, 0xf6, 0x18, 0x34, 0x80, 0x84, 0x8a, 0x0f, 0x24, 0xe4, 0x43, 0x84, 0x82, 0x0c, 0x68,
+ 0xe4, 0x18, 0x62, 0x80, 0x84, 0x8a, 0xb0, 0x4c, 0x29, 0x34, 0x84, 0x82, 0x0e, 0x68, 0xf6, 0x18,
+ 0xb2, 0x80, 0x86, 0x8a, 0x84, 0x82, 0x0f, 0x68, 0x04, 0x26, 0xff, 0x18, 0x3e, 0x84, 0x86, 0x8a,
+ 0x84, 0x82, 0x0e, 0x68, 0xf3, 0x18, 0x1a, 0x85, 0x83, 0x8a, 0x82, 0x82, 0x0e, 0x68, 0xaa, 0x4b,
+ 0x80, 0x33, 0xf6, 0x18, 0x32, 0x80, 0x86, 0x8a, 0x82, 0x82, 0x0e, 0x68, 0xf6, 0x18, 0x72, 0x80,
+ 0x86, 0x8a, 0x84, 0x82, 0x0c, 0x68, 0xe3, 0x18, 0x9a, 0x80, 0x83, 0x8a, 0x85, 0x82, 0x0b, 0x68,
+ 0xa1, 0x4c, 0xc0, 0x34, 0x1b, 0x19, 0xda, 0x84, 0x83, 0x8a, 0x9d, 0x4b, 0xf1, 0x3b, 0x83, 0x82,
+ 0x08, 0x68, 0xa0, 0x49, 0x40, 0x18, 0x42, 0x84, 0xf0, 0xbd, 0x03, 0x21, 0x09, 0x07, 0x8a, 0x8a,
+ 0x00, 0x22, 0x8a, 0x82, 0x91, 0x49, 0x00, 0x02, 0x09, 0x68, 0x0d, 0x22, 0x52, 0x03, 0x89, 0x18,
+ 0x80, 0x30, 0x48, 0x83, 0x70, 0x47, 0x10, 0xb5, 0x00, 0x22, 0x11, 0x46, 0x96, 0x4c, 0x07, 0xe0,
+ 0xc3, 0x07, 0x02, 0xd0, 0x4b, 0x00, 0xe3, 0x5a, 0x5a, 0x40, 0x49, 0x1c, 0x89, 0xb2, 0x40, 0x08,
+ 0x00, 0x28, 0xf5, 0xd1, 0x10, 0x46, 0x27, 0xe5, 0xf0, 0xb5, 0x84, 0x48, 0x86, 0x4d, 0x00, 0x68,
+ 0x30, 0x35, 0x0d, 0x21, 0x49, 0x03, 0x40, 0x18, 0x86, 0x8b, 0x00, 0x27, 0x3c, 0x46, 0x09, 0xe0,
+ 0x38, 0x5d, 0x29, 0x0a, 0x48, 0x40, 0xff, 0xf7, 0xde, 0xff, 0x29, 0x02, 0x48, 0x40, 0x64, 0x1c,
+ 0x85, 0xb2, 0xa4, 0xb2, 0xb4, 0x42, 0xf3, 0xd3, 0x28, 0x46, 0xf0, 0xbd, 0x03, 0x22, 0x12, 0x07,
+ 0x93, 0x8a, 0x00, 0x23, 0x93, 0x82, 0x09, 0x07, 0x00, 0x01, 0x09, 0x0f, 0x08, 0x43, 0x00, 0x02,
+ 0x80, 0x21, 0x40, 0x30, 0x08, 0x43, 0x71, 0x49, 0x09, 0x68, 0x0d, 0x22, 0x52, 0x03, 0x89, 0x18,
+ 0x48, 0x83, 0x70, 0x47, 0xfe, 0xb5, 0x02, 0x46, 0x78, 0x48, 0x6c, 0x4f, 0x40, 0x7d, 0x00, 0x26,
+ 0xc0, 0x00, 0x01, 0x90, 0x76, 0x48, 0x13, 0x00, 0x04, 0x68, 0x21, 0x46, 0x80, 0x31, 0x00, 0x91,
+ 0x25, 0x46, 0x74, 0x49, 0x40, 0x35, 0x05, 0xf0, 0xe3, 0xf9, 0x15, 0x0c, 0x19, 0x18, 0x18, 0x8b,
+ 0xb8, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0, 0xef, 0xee, 0xed, 0x18, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7,
+ 0x18, 0x00, 0x03, 0x20, 0x00, 0x07, 0x81, 0x8a, 0xc0, 0x21, 0xc9, 0x43, 0x81, 0x82, 0x3a, 0x68,
+ 0x80, 0x21, 0x0d, 0x20, 0x40, 0x03, 0x10, 0x18, 0x41, 0x83, 0xfe, 0xbd, 0x57, 0x49, 0x09, 0x68,
+ 0x0d, 0x27, 0x7f, 0x03, 0xc9, 0x19, 0x49, 0x8b, 0x09, 0x0a, 0x06, 0xd0, 0x01, 0x29, 0x0a, 0xd0,
+ 0x02, 0x29, 0x2c, 0xd0, 0x01, 0x21, 0x08, 0x46, 0x34, 0xe1, 0xa8, 0x7c, 0x00, 0x28, 0xec, 0xd0,
+ 0x01, 0x20, 0x60, 0x74, 0xfb, 0xe1, 0x05, 0x46, 0x00, 0x98, 0x04, 0x21, 0x82, 0x7c, 0x57, 0x48,
+ 0x08, 0x24, 0x43, 0x7e, 0x9a, 0x42, 0x10, 0xd0, 0x83, 0x7e, 0x9a, 0x42, 0x02, 0xd1, 0x05, 0x21,
+ 0x09, 0x24, 0x0a, 0xe0, 0xc3, 0x7e, 0x9a, 0x42, 0x02, 0xd1, 0x06, 0x21, 0x0a, 0x24, 0x04, 0xe0,
+ 0x00, 0x7f, 0x82, 0x42, 0x01, 0xd1, 0x07, 0x21, 0x0b, 0x24, 0x08, 0x46, 0x00, 0xf0, 0x93, 0xff,
+ 0x20, 0x46, 0x00, 0xf0, 0x90, 0xff, 0x29, 0x68, 0x01, 0x20, 0x48, 0x74, 0xd7, 0xe1, 0x01, 0x21,
+ 0x69, 0x72, 0x66, 0x74, 0xfd, 0xf7, 0x84, 0xfe, 0x38, 0x48, 0x01, 0x68, 0xc9, 0x19, 0x89, 0x8e,
+ 0xc9, 0x07, 0x09, 0xd0, 0x03, 0x21, 0x09, 0x07, 0x8a, 0x8a, 0x20, 0x22, 0xd2, 0x43, 0x8a, 0x82,
+ 0x00, 0x68, 0x20, 0x21, 0xc0, 0x19, 0x01, 0x84, 0x00, 0x20, 0xff, 0xf7, 0x36, 0xff, 0x3c, 0x49,
+ 0x3a, 0x4a, 0x09, 0x68, 0x53, 0x7e, 0x80, 0x31, 0x89, 0x7c, 0x04, 0x20, 0x08, 0x24, 0x99, 0x42,
+ 0x10, 0xd0, 0x93, 0x7e, 0x99, 0x42, 0x02, 0xd1, 0x05, 0x20, 0x09, 0x24, 0x0a, 0xe0, 0xd3, 0x7e,
+ 0x99, 0x42, 0x02, 0xd1, 0x06, 0x20, 0x0a, 0x24, 0x04, 0xe0, 0x12, 0x7f, 0x91, 0x42, 0x01, 0xd1,
+ 0x07, 0x20, 0x0b, 0x24, 0x00, 0xf0, 0x4d, 0xff, 0x20, 0x46, 0x00, 0xf0, 0x4a, 0xff, 0xfe, 0xbd,
+ 0x38, 0x68, 0x0d, 0x24, 0x64, 0x03, 0x00, 0x19, 0x40, 0x8b, 0x00, 0x0a, 0x06, 0xd0, 0x01, 0x28,
+ 0x0b, 0xd0, 0x02, 0x28, 0x13, 0xd0, 0x03, 0x28, 0x94, 0xd1, 0x17, 0xe0, 0x03, 0x20, 0x00, 0x07,
+ 0x81, 0x8a, 0x86, 0x82, 0x04, 0xf0, 0xf6, 0xfd, 0x05, 0xe0, 0x03, 0x20, 0x00, 0x07, 0x81, 0x8a,
+ 0x86, 0x82, 0x04, 0xf0, 0xea, 0xfd, 0x39, 0x68, 0x09, 0x19, 0x88, 0x83, 0x7f, 0xe1, 0x03, 0x20,
+ 0x00, 0x07, 0x81, 0x8a, 0x86, 0x82, 0x00, 0x98, 0x80, 0x7c, 0xf4, 0xe7, 0x03, 0x20, 0x00, 0x07,
+ 0x81, 0x8a, 0x86, 0x82, 0x04, 0xf0, 0x08, 0xfe, 0xed, 0xe7, 0x3a, 0x68, 0x0d, 0x21, 0x49, 0x03,
+ 0x52, 0x18, 0x52, 0x8b, 0x12, 0x0a, 0x92, 0x1e, 0x13, 0x00, 0x05, 0xf0, 0x21, 0xf9, 0x05, 0x55,
+ 0x62, 0x7b, 0x8d, 0x33, 0x04, 0x00, 0xc2, 0xe7, 0x7f, 0xf8, 0x00, 0x00, 0x84, 0x00, 0x00, 0x20,
+ 0x80, 0x81, 0x00, 0x00, 0x1f, 0xbf, 0x00, 0x00, 0xcf, 0xff, 0x00, 0x00, 0xff, 0x83, 0x00, 0x00,
+ 0xf0, 0xfc, 0x00, 0x00, 0xff, 0x3f, 0x00, 0x00, 0x40, 0xa0, 0x01, 0x00, 0xfd, 0x13, 0x00, 0x00,
+ 0xc0, 0xc0, 0x00, 0x00, 0x80, 0xa1, 0x01, 0x00, 0xc4, 0x79, 0x00, 0x00, 0x00, 0x04, 0x00, 0x20,
+ 0x90, 0x00, 0x00, 0x20, 0x00, 0x01, 0x00, 0x20, 0xf9, 0xe1, 0x88, 0xe1, 0xd9, 0xe1, 0xc3, 0xe1,
+ 0x44, 0xe1, 0xef, 0xe0, 0xdb, 0xe0, 0xc7, 0xe0, 0xb8, 0xe0, 0xa5, 0xe0, 0x98, 0xe0, 0x8e, 0xe0,
+ 0x82, 0xe0, 0x79, 0xe0, 0x62, 0x7c, 0x02, 0x2a, 0x01, 0xd3, 0x11, 0x46, 0x3c, 0xe1, 0xeb, 0x7c,
+ 0x01, 0x2b, 0x70, 0xd8, 0xab, 0x7c, 0x00, 0x2b, 0x01, 0xd1, 0x00, 0x2a, 0x87, 0xd0, 0x2a, 0x76,
+ 0x38, 0x68, 0x0d, 0x46, 0x40, 0x19, 0x80, 0x8b, 0xe0, 0x84, 0xfe, 0xf7, 0xd2, 0xff, 0x01, 0x00,
+ 0x01, 0xd0, 0x06, 0x20, 0x4e, 0xe0, 0xff, 0x48, 0x05, 0x21, 0x00, 0x68, 0x41, 0x74, 0x03, 0x21,
+ 0x09, 0x07, 0x8a, 0x8a, 0x8e, 0x82, 0x56, 0xe1, 0xa8, 0x7c, 0x00, 0x28, 0x02, 0xd1, 0x60, 0x7c,
+ 0x00, 0x28, 0xa8, 0xd0, 0x60, 0x7c, 0x28, 0x76, 0x01, 0x20, 0x60, 0x74, 0xff, 0xf7, 0xf4, 0xf9,
+ 0x05, 0xe1, 0x01, 0x21, 0x07, 0x46, 0x69, 0x72, 0x60, 0x7c, 0x02, 0x28, 0x0a, 0xd3, 0xf2, 0x48,
+ 0xf3, 0x4c, 0x06, 0x60, 0xf1, 0x48, 0x60, 0x81, 0x20, 0x81, 0x41, 0x1c, 0xf1, 0x48, 0x05, 0xf0,
+ 0x6f, 0xf8, 0x66, 0x75, 0xff, 0xf7, 0xee, 0xf9, 0x38, 0x68, 0x58, 0x21, 0x09, 0x5c, 0x41, 0x74,
+ 0x86, 0x82, 0xec, 0xe0, 0x60, 0x7c, 0x02, 0x28, 0x11, 0xd2, 0xe9, 0x7c, 0x01, 0x29, 0xb8, 0xd8,
+ 0xa9, 0x7c, 0x00, 0x29, 0x01, 0xd1, 0x00, 0x28, 0xb8, 0xd0, 0xe5, 0x49, 0x01, 0x20, 0x48, 0x75,
+ 0x60, 0x7c, 0x28, 0x76, 0x02, 0x20, 0x18, 0xe0, 0x60, 0x7c, 0x02, 0x28, 0x03, 0xd3, 0x01, 0x99,
+ 0x01, 0x43, 0xc9, 0xb2, 0xe0, 0xe0, 0xe9, 0x7c, 0x01, 0x29, 0xa2, 0xd8, 0xa9, 0x7c, 0x00, 0x29,
+ 0x05, 0xd1, 0x02, 0xe0, 0xff, 0xf7, 0x7a, 0xfe, 0xfe, 0xbd, 0x00, 0x28, 0xfc, 0xd0, 0xd8, 0x49,
+ 0x01, 0x20, 0x48, 0x75, 0x60, 0x7c, 0x28, 0x76, 0x03, 0x20, 0x60, 0x74, 0xff, 0xf7, 0x53, 0xf9,
+ 0xfe, 0xf7, 0x6d, 0xfd, 0xbb, 0xe0, 0xda, 0xe0, 0x38, 0x68, 0x0d, 0x22, 0x52, 0x03, 0x80, 0x18,
+ 0x40, 0x8b, 0x00, 0x0a, 0x20, 0x5c, 0x2a, 0xe0, 0x39, 0x68, 0x0d, 0x20, 0x40, 0x03, 0x09, 0x18,
+ 0x49, 0x8b, 0x3a, 0x68, 0x09, 0x0a, 0x10, 0x18, 0x80, 0x8b, 0x60, 0x54, 0xa7, 0xe0, 0x38, 0x68,
+ 0x0d, 0x22, 0x52, 0x03, 0x80, 0x18, 0x40, 0x8b, 0x01, 0x0a, 0xc5, 0x48, 0x40, 0x5c, 0x16, 0xe0,
+ 0x38, 0x68, 0x0d, 0x21, 0x49, 0x03, 0x40, 0x18, 0x80, 0x8b, 0x3a, 0x68, 0x51, 0x18, 0x49, 0x8b,
+ 0x0a, 0x0a, 0xbf, 0x49, 0x88, 0x54, 0x92, 0xe0, 0x38, 0x68, 0x0d, 0x22, 0x52, 0x03, 0x80, 0x18,
+ 0x40, 0x8b, 0x00, 0x0a, 0x21, 0x18, 0x49, 0x78, 0x20, 0x5c, 0x09, 0x02, 0x08, 0x43, 0x03, 0x21,
+ 0x09, 0x07, 0x8b, 0x8a, 0x8e, 0x82, 0x39, 0x68, 0x89, 0x18, 0xfe, 0xe6, 0x38, 0x68, 0x0d, 0x21,
+ 0x49, 0x03, 0x40, 0x18, 0x80, 0x8b, 0x3a, 0x68, 0x51, 0x18, 0x49, 0x8b, 0x09, 0x0a, 0x60, 0x54,
+ 0x00, 0x0a, 0x61, 0x18, 0x48, 0x70, 0x72, 0xe0, 0x38, 0x68, 0x0d, 0x23, 0x5b, 0x03, 0xc0, 0x18,
+ 0x40, 0x8b, 0xab, 0x4a, 0x00, 0x0a, 0x11, 0x18, 0x49, 0x78, 0x10, 0x5c, 0x09, 0x02, 0x08, 0x43,
+ 0x03, 0x21, 0x09, 0x07, 0x8a, 0x8a, 0x8e, 0x82, 0x39, 0x68, 0xc9, 0x18, 0xdd, 0xe6, 0x38, 0x68,
+ 0x0d, 0x21, 0x49, 0x03, 0x40, 0x18, 0x80, 0x8b, 0x3a, 0x68, 0x03, 0x0a, 0x52, 0x18, 0x52, 0x8b,
+ 0x14, 0x0a, 0x9f, 0x4a, 0xa4, 0x18, 0x63, 0x70, 0x3b, 0x68, 0x59, 0x18, 0x49, 0x8b, 0x09, 0x0a,
+ 0x50, 0x54, 0x4c, 0xe0, 0x60, 0x7c, 0x02, 0x28, 0x4d, 0xd2, 0x38, 0x68, 0x0d, 0x23, 0x5b, 0x03,
+ 0xc0, 0x18, 0x40, 0x8b, 0x00, 0x0a, 0x10, 0xd0, 0x01, 0x28, 0x23, 0xd0, 0x02, 0x28, 0x00, 0xd0,
+ 0x72, 0xe7, 0x93, 0x48, 0x90, 0x49, 0x46, 0x75, 0x0e, 0x60, 0x90, 0x49, 0x41, 0x81, 0x01, 0x81,
+ 0x49, 0x1c, 0x90, 0x48, 0x04, 0xf0, 0xac, 0xff, 0x2f, 0xe0, 0x00, 0x23, 0x00, 0x96, 0x1a, 0x46,
+ 0x11, 0x21, 0x02, 0x20, 0x01, 0x96, 0x04, 0xf0, 0x97, 0xfe, 0x89, 0x49, 0x01, 0x20, 0x48, 0x75,
+ 0x48, 0x89, 0x86, 0x4a, 0x08, 0x81, 0x90, 0x42, 0x01, 0xd1, 0x00, 0x20, 0x00, 0xe0, 0x40, 0x1c,
+ 0x08, 0x81, 0x1c, 0xe0, 0x82, 0x4c, 0x22, 0x89, 0x88, 0x5c, 0x61, 0x89, 0x8a, 0x42, 0x03, 0xd1,
+ 0xff, 0x21, 0x01, 0x31, 0x08, 0x43, 0x06, 0xe0, 0x7c, 0x49, 0x8a, 0x42, 0x01, 0xd1, 0x00, 0x22,
+ 0x00, 0xe0, 0x52, 0x1c, 0x22, 0x81, 0x03, 0x21, 0x09, 0x07, 0x8a, 0x8a, 0x8e, 0x82, 0x3a, 0x68,
+ 0xc1, 0xb2, 0xd2, 0x18, 0x91, 0x83, 0x00, 0x0a, 0x01, 0xd0, 0x01, 0x20, 0x00, 0xe0, 0x00, 0x20,
+ 0xff, 0xf7, 0x73, 0xfd, 0xfe, 0xbd, 0x00, 0x21, 0x05, 0x20, 0x2b, 0xe7, 0x61, 0x7c, 0x02, 0x29,
+ 0x04, 0xd3, 0x01, 0x98, 0x08, 0x43, 0xc1, 0xb2, 0x0c, 0x20, 0x23, 0xe7, 0x3a, 0x68, 0x0d, 0x20,
+ 0x40, 0x03, 0x12, 0x18, 0x52, 0x8b, 0x12, 0x0a, 0x52, 0x07, 0x05, 0xd5, 0x3b, 0x68, 0x6a, 0x4a,
+ 0x9b, 0x18, 0x5b, 0x8e, 0xdb, 0x07, 0x05, 0xd0, 0xeb, 0x7c, 0x01, 0x2b, 0x09, 0xd9, 0x02, 0x21,
+ 0x0d, 0x20, 0x0f, 0xe7, 0x38, 0x68, 0x80, 0x18, 0x40, 0x8e, 0xc1, 0x07, 0xc9, 0x0f, 0x08, 0x20,
+ 0x08, 0xe7, 0xab, 0x7c, 0x00, 0x2b, 0x01, 0xd1, 0x00, 0x29, 0xd3, 0xd0, 0x5c, 0x4b, 0x01, 0x21,
+ 0x59, 0x75, 0x61, 0x7c, 0x29, 0x76, 0x04, 0x21, 0x61, 0x74, 0x39, 0x68, 0x05, 0x46, 0x48, 0x19,
+ 0x40, 0x8b, 0x00, 0x0a, 0xe0, 0x75, 0xff, 0xf7, 0xbf, 0xf9, 0x03, 0x20, 0x00, 0x07, 0x81, 0x8a,
+ 0x86, 0x82, 0x50, 0x48, 0x00, 0x68, 0x39, 0x68, 0xc0, 0x8c, 0x49, 0x19, 0x35, 0xe6, 0x01, 0x21,
+ 0x69, 0x72, 0x4d, 0x48, 0x00, 0x21, 0x01, 0x60, 0x4c, 0x48, 0x4d, 0x4e, 0x41, 0x1c, 0x70, 0x81,
+ 0x30, 0x81, 0x4c, 0x48, 0x04, 0xf0, 0x24, 0xff, 0x00, 0x20, 0x70, 0x75, 0xe0, 0x7d, 0x41, 0x07,
+ 0x15, 0xd5, 0x44, 0x4c, 0x80, 0x07, 0x0e, 0xd4, 0x00, 0x99, 0x01, 0x20, 0x08, 0x56, 0x0f, 0x30,
+ 0x40, 0x10, 0xfe, 0xf7, 0x68, 0xff, 0x21, 0x68, 0x82, 0x20, 0x08, 0x56, 0x0f, 0x30, 0x40, 0x10,
+ 0xfe, 0xf7, 0x49, 0xff, 0x03, 0xe0, 0x0f, 0x20, 0x28, 0x56, 0xfe, 0xf7, 0xe5, 0xfe, 0xff, 0xf7,
+ 0x89, 0xf8, 0x38, 0x48, 0x00, 0x21, 0x00, 0x68, 0x81, 0x82, 0x03, 0x21, 0x09, 0x07, 0x8a, 0x8a,
+ 0x08, 0x22, 0xd2, 0x43, 0x8a, 0x82, 0x3a, 0x68, 0x08, 0x21, 0x38, 0x4b, 0xd2, 0x18, 0x11, 0x80,
+ 0x58, 0x21, 0x09, 0x5c, 0x41, 0x74, 0x7a, 0xe7, 0xa8, 0x88, 0xa2, 0x7d, 0x80, 0x18, 0x08, 0x5c,
+ 0x03, 0x21, 0x09, 0x07, 0x8a, 0x8a, 0x8e, 0x82, 0x3a, 0x68, 0x0d, 0x21, 0x49, 0x03, 0x51, 0x18,
+ 0x88, 0x83, 0xa0, 0x7d, 0xbf, 0x28, 0x01, 0xd3, 0x00, 0x20, 0x00, 0xe0, 0x40, 0x1c, 0xa0, 0x75,
+ 0x65, 0xe7, 0xaa, 0x88, 0xa0, 0x7d, 0x13, 0x18, 0xcb, 0x5c, 0xbf, 0x28, 0x01, 0xd3, 0x00, 0x20,
+ 0x00, 0xe0, 0x40, 0x1c, 0xc0, 0xb2, 0xa0, 0x75, 0x12, 0x18, 0x89, 0x5c, 0xbf, 0x28, 0x01, 0xd3,
+ 0x00, 0x20, 0x00, 0xe0, 0x40, 0x1c, 0xa0, 0x75, 0x03, 0x20, 0x00, 0x07, 0x82, 0x8a, 0x86, 0x82,
+ 0x18, 0x02, 0x08, 0x43, 0x3a, 0x68, 0x0d, 0x21, 0x49, 0x03, 0x51, 0x18, 0xc5, 0xe5, 0x03, 0x20,
+ 0x00, 0x07, 0x81, 0x8a, 0x86, 0x82, 0xff, 0xf7, 0xd7, 0xfc, 0xf3, 0xe7, 0x70, 0xb5, 0x01, 0xf0,
+ 0x63, 0xfa, 0x10, 0x49, 0x00, 0x20, 0x0b, 0x68, 0x11, 0x49, 0x18, 0x86, 0x1a, 0x46, 0x58, 0x86,
+ 0x80, 0x32, 0x90, 0x72, 0x1c, 0x46, 0xd0, 0x72, 0x40, 0x34, 0x20, 0x72, 0x60, 0x72, 0xa0, 0x72,
+ 0xe0, 0x72, 0x20, 0x73, 0xd0, 0x73, 0xa0, 0x73, 0x89, 0x7f, 0xe1, 0x73, 0x19, 0x46, 0x20, 0x74,
+ 0x60, 0x31, 0xc8, 0x75, 0x10, 0x71, 0x50, 0x71, 0x20, 0x75, 0xa0, 0x75, 0x08, 0x71, 0x48, 0x71,
+ 0x50, 0x72, 0x0d, 0xe0, 0x90, 0x00, 0x00, 0x20, 0x88, 0x00, 0x00, 0x20, 0xff, 0x02, 0x00, 0x00,
+ 0x00, 0x04, 0x00, 0x20, 0x00, 0x01, 0x00, 0x20, 0x80, 0xa1, 0x01, 0x00, 0x80, 0xa0, 0x01, 0x00,
+ 0xe0, 0x77, 0x58, 0x85, 0x88, 0x71, 0xc8, 0x71, 0x08, 0x72, 0x98, 0x85, 0xd8, 0x85, 0x48, 0x72,
+ 0x08, 0x75, 0xc8, 0x74, 0x48, 0x75, 0x88, 0x75, 0x48, 0x76, 0x88, 0x76, 0xc8, 0x76, 0x08, 0x77,
+ 0x90, 0x75, 0x10, 0x76, 0x01, 0x25, 0xd5, 0x75, 0x60, 0x80, 0x50, 0x76, 0x90, 0x76, 0xd0, 0x76,
+ 0x58, 0x82, 0x58, 0x73, 0x98, 0x73, 0xd8, 0x73, 0x18, 0x74, 0x48, 0x77, 0x88, 0x77, 0xc8, 0x77,
+ 0x10, 0x70, 0x08, 0x76, 0x90, 0x71, 0x98, 0x86, 0x10, 0x74, 0x70, 0xbd, 0x10, 0xb5, 0xff, 0xf7,
+ 0x89, 0xfb, 0xff, 0xf7, 0xa3, 0xff, 0x00, 0x21, 0x01, 0x20, 0x01, 0xf0, 0x81, 0xfb, 0x00, 0x21,
+ 0x02, 0x20, 0x01, 0xf0, 0x7d, 0xfb, 0x00, 0x21, 0x03, 0x20, 0x01, 0xf0, 0x79, 0xfb, 0x00, 0x21,
+ 0x04, 0x20, 0x01, 0xf0, 0x75, 0xfb, 0x00, 0x21, 0x05, 0x20, 0x01, 0xf0, 0x71, 0xfb, 0x62, 0xe4,
+ 0xf8, 0x48, 0x00, 0x68, 0xf8, 0x49, 0x40, 0x18, 0x80, 0x8a, 0xf8, 0x49, 0x00, 0x06, 0x02, 0x0f,
+ 0x08, 0x7c, 0xd2, 0x1e, 0x0b, 0x2a, 0x02, 0xd3, 0x10, 0x22, 0x10, 0x43, 0x01, 0xe0, 0xef, 0x22,
+ 0x10, 0x40, 0x08, 0x74, 0x70, 0x47, 0x70, 0xb5, 0x03, 0x20, 0x00, 0x07, 0x81, 0x8a, 0xf0, 0x49,
+ 0x81, 0x82, 0xec, 0x49, 0x01, 0x22, 0x0c, 0x68, 0xd2, 0x02, 0xeb, 0x4b, 0x40, 0x3b, 0xe4, 0x18,
+ 0x22, 0x85, 0x82, 0x8a, 0x40, 0x22, 0xd2, 0x43, 0x82, 0x82, 0x0c, 0x68, 0x40, 0x22, 0xe4, 0x18,
+ 0x22, 0x84, 0xe6, 0x4a, 0xd2, 0x7b, 0x00, 0x2a, 0x2b, 0xd1, 0x82, 0x8a, 0xe5, 0x4a, 0x82, 0x82,
+ 0x0d, 0x68, 0x84, 0x14, 0xe0, 0x4a, 0xad, 0x18, 0xec, 0x81, 0x85, 0x8a, 0xe2, 0x4d, 0x85, 0x82,
+ 0x0e, 0x68, 0x80, 0x25, 0xb6, 0x18, 0xf5, 0x81, 0x85, 0x8a, 0xe0, 0x4d, 0x85, 0x82, 0x0d, 0x68,
+ 0xad, 0x18, 0xec, 0x80, 0x84, 0x8a, 0xde, 0x4c, 0x84, 0x82, 0xff, 0x24, 0x0d, 0x68, 0xc1, 0x34,
+ 0xad, 0x18, 0xec, 0x80, 0x84, 0x8a, 0x78, 0x24, 0xe4, 0x43, 0x84, 0x82, 0x0d, 0x68, 0x08, 0x24,
+ 0xaa, 0x18, 0x14, 0x80, 0x82, 0x8a, 0xd7, 0x4a, 0x82, 0x82, 0x09, 0x68, 0xa0, 0x02, 0xc9, 0x18,
+ 0xc8, 0x84, 0x70, 0xbd, 0x70, 0x47, 0x70, 0xb5, 0x04, 0xf0, 0xdc, 0xfa, 0xcb, 0x4a, 0xd1, 0x88,
+ 0x00, 0x29, 0x14, 0xd0, 0xcb, 0x08, 0xc0, 0x1a, 0x08, 0x18, 0xd0, 0x80, 0x10, 0x7b, 0x01, 0x21,
+ 0x14, 0x28, 0x0e, 0xd2, 0xcc, 0x4b, 0xcd, 0x4d, 0x43, 0x43, 0x5b, 0x19, 0x9b, 0x12, 0xd4, 0x88,
+ 0x5b, 0x1c, 0x5b, 0x10, 0x9c, 0x42, 0x04, 0xdc, 0xd1, 0x74, 0x40, 0x1c, 0x0f, 0xe0, 0xc0, 0x00,
+ 0xeb, 0xe7, 0x00, 0x28, 0x0d, 0xd0, 0xc4, 0x4b, 0xc5, 0x4d, 0x43, 0x43, 0x5b, 0x19, 0x9b, 0x12,
+ 0xd4, 0x88, 0x5b, 0x1c, 0x5b, 0x10, 0x9c, 0x42, 0x03, 0xdb, 0xd1, 0x74, 0x40, 0x1e, 0x10, 0x73,
+ 0x70, 0xbd, 0x00, 0x20, 0xd0, 0x74, 0x70, 0xbd, 0x70, 0xb5, 0x24, 0x21, 0xb3, 0x48, 0x04, 0xf0,
+ 0xb7, 0xfd, 0xb2, 0x4c, 0x26, 0x20, 0x20, 0x80, 0xba, 0x48, 0xa0, 0x80, 0x0c, 0x20, 0xa0, 0x73,
+ 0x0b, 0x20, 0x00, 0x26, 0x20, 0x73, 0xe6, 0x74, 0x26, 0x75, 0x66, 0x75, 0x04, 0xf0, 0x9a, 0xfa,
+ 0xc0, 0x00, 0xe0, 0x80, 0x00, 0x25, 0xff, 0xf7, 0xb6, 0xff, 0x6d, 0x1c, 0xed, 0xb2, 0x08, 0x2d,
+ 0xf9, 0xd3, 0xa4, 0x48, 0x00, 0x68, 0xa4, 0x49, 0x40, 0x18, 0xc0, 0x8f, 0x28, 0x21, 0x00, 0x07,
+ 0x00, 0x0f, 0xe0, 0x73, 0x26, 0x74, 0x01, 0x20, 0x60, 0x73, 0xa1, 0x75, 0x04, 0x21, 0xe1, 0x75,
+ 0x10, 0x21, 0x21, 0x76, 0x66, 0x76, 0xa0, 0x76, 0x02, 0x20, 0xe0, 0x76, 0x03, 0x20, 0x20, 0x77,
+ 0x24, 0x20, 0x60, 0x77, 0x20, 0x20, 0xa0, 0x77, 0x05, 0x20, 0xe6, 0x77, 0xc0, 0x01, 0x20, 0x84,
+ 0x0b, 0x20, 0x80, 0x01, 0x60, 0x84, 0x5f, 0x21, 0xc9, 0x00, 0x9f, 0x48, 0x04, 0xf0, 0x78, 0xfd,
+ 0x9e, 0x48, 0x06, 0x60, 0x9e, 0x48, 0x60, 0x81, 0x20, 0x81, 0x41, 0x1c, 0x9a, 0x48, 0x04, 0xf0,
+ 0x6f, 0xfd, 0x70, 0xbd, 0x10, 0xb5, 0x9b, 0x48, 0x00, 0x21, 0x00, 0x68, 0x0a, 0x23, 0x02, 0x46,
+ 0x01, 0x80, 0x40, 0x32, 0x93, 0x71, 0xd1, 0x71, 0xc1, 0x72, 0x81, 0x72, 0x01, 0x73, 0x41, 0x73,
+ 0x81, 0x73, 0x01, 0x74, 0xc1, 0x73, 0x41, 0x82, 0x41, 0x74, 0x91, 0x74, 0x01, 0x71, 0x81, 0x71,
+ 0xc1, 0x71, 0x01, 0x72, 0x41, 0x72, 0x41, 0x77, 0x02, 0x22, 0x42, 0x71, 0x01, 0x22, 0x82, 0x70,
+ 0x80, 0x30, 0x01, 0x72, 0xff, 0xf7, 0x92, 0xfe, 0x01, 0xe7, 0x70, 0xb5, 0x7b, 0x4a, 0x79, 0x4b,
+ 0xd0, 0x7b, 0x00, 0x28, 0x22, 0xd1, 0x18, 0x68, 0x77, 0x4c, 0x00, 0x19, 0x80, 0x8a, 0x0f, 0x21,
+ 0x00, 0x06, 0x00, 0x0f, 0x09, 0x1a, 0x03, 0x20, 0x00, 0x07, 0x85, 0x8a, 0x77, 0x4d, 0x0f, 0x3d,
+ 0x85, 0x82, 0x8d, 0x02, 0x1e, 0x68, 0x0d, 0x43, 0x36, 0x19, 0xb5, 0x84, 0x85, 0x8a, 0x0f, 0x25,
+ 0xed, 0x43, 0x85, 0x82, 0x1d, 0x68, 0x2c, 0x19, 0xa1, 0x85, 0x81, 0x8a, 0x2a, 0x21, 0xc9, 0x43,
+ 0x81, 0x82, 0x19, 0x68, 0x2a, 0x20, 0x78, 0x4c, 0x09, 0x19, 0x88, 0x81, 0x19, 0x68, 0x76, 0x48,
+ 0x40, 0x30, 0x09, 0x18, 0x09, 0x8c, 0xc9, 0x06, 0xc9, 0x0e, 0x51, 0x76, 0x19, 0x68, 0x09, 0x18,
+ 0x49, 0x8c, 0xc9, 0x06, 0xc9, 0x0e, 0x91, 0x76, 0x19, 0x68, 0x09, 0x18, 0x89, 0x8c, 0xc9, 0x06,
+ 0xc9, 0x0e, 0xd1, 0x76, 0x19, 0x68, 0x08, 0x18, 0xc0, 0x8c, 0xc0, 0x06, 0xc0, 0x0e, 0x10, 0x77,
+ 0x70, 0xbd, 0xf8, 0xb5, 0x57, 0x4d, 0x29, 0x68, 0x67, 0x48, 0xc0, 0x30, 0x08, 0x18, 0xc0, 0x8a,
+ 0x64, 0x4f, 0x01, 0x07, 0x38, 0x68, 0x09, 0x0f, 0x40, 0x30, 0xc1, 0x74, 0x53, 0x48, 0x03, 0x24,
+ 0xc0, 0x7b, 0x51, 0x4e, 0x24, 0x07, 0x00, 0x28, 0x2e, 0xd1, 0x28, 0x68, 0x80, 0x19, 0x80, 0x8a,
+ 0x0f, 0x21, 0x00, 0x06, 0x00, 0x0f, 0x0b, 0x1a, 0xa0, 0x8a, 0x5c, 0x48, 0xa0, 0x82, 0x2a, 0x68,
+ 0x19, 0x03, 0x49, 0x48, 0x40, 0x38, 0x12, 0x18, 0x11, 0x85, 0xa1, 0x8a, 0x0f, 0x21, 0xc9, 0x43,
+ 0xa1, 0x82, 0x29, 0x68, 0x09, 0x18, 0x4b, 0x85, 0xa1, 0x8a, 0x03, 0x21, 0xc9, 0x43, 0xa1, 0x82,
+ 0x2a, 0x68, 0x03, 0x21, 0x10, 0x18, 0x01, 0x86, 0xa0, 0x8a, 0x78, 0x20, 0xc0, 0x43, 0xa0, 0x82,
+ 0x29, 0x68, 0xd8, 0x00, 0x89, 0x19, 0x08, 0x80, 0xa0, 0x8a, 0x02, 0x20, 0xc0, 0x43, 0xa0, 0x82,
+ 0x29, 0x68, 0x02, 0x20, 0x89, 0x19, 0x48, 0x82, 0xfd, 0xf7, 0xfa, 0xf9, 0x38, 0x68, 0x36, 0x4a,
+ 0x01, 0x78, 0x47, 0x4b, 0x4f, 0x07, 0xc0, 0x3a, 0x00, 0x21, 0x00, 0x2f, 0x09, 0xdb, 0x53, 0x27,
+ 0x3f, 0x5c, 0x00, 0x2f, 0x0b, 0xd1, 0x31, 0x4f, 0x3f, 0x78, 0xbf, 0x06, 0xff, 0x0e, 0x06, 0x2f,
+ 0x05, 0xd3, 0xa7, 0x8a, 0xa3, 0x82, 0x2b, 0x68, 0x9b, 0x18, 0x19, 0x80, 0x05, 0xe0, 0xa7, 0x8a,
+ 0xa3, 0x82, 0x2f, 0x68, 0x04, 0x23, 0xbf, 0x18, 0x3b, 0x80, 0x03, 0x78, 0x5b, 0x07, 0x12, 0xd4,
+ 0x53, 0x23, 0x1b, 0x5c, 0x00, 0x2b, 0x0e, 0xd1, 0x24, 0x4b, 0x1b, 0x78, 0x9b, 0x06, 0xdb, 0x0e,
+ 0x0e, 0x2b, 0x08, 0xd9, 0xa3, 0x8a, 0x80, 0x23, 0xdb, 0x43, 0xa3, 0x82, 0x2f, 0x68, 0x80, 0x23,
+ 0xba, 0x18, 0x13, 0x80, 0x06, 0xe0, 0xa3, 0x8a, 0x80, 0x23, 0xdb, 0x43, 0xa3, 0x82, 0x2b, 0x68,
+ 0x9a, 0x18, 0x11, 0x80, 0x02, 0x78, 0x52, 0x07, 0x14, 0xd5, 0x53, 0x22, 0x12, 0x5c, 0x00, 0x2a,
+ 0x10, 0xd1, 0x16, 0x4a, 0x12, 0x78, 0x92, 0x06, 0xd2, 0x0e, 0x16, 0x2a, 0x0a, 0xd9, 0xa2, 0x8a,
+ 0x02, 0x22, 0xd2, 0x43, 0xa2, 0x82, 0x2f, 0x68, 0x02, 0x22, 0x0f, 0x4b, 0x40, 0x3b, 0xfb, 0x18,
+ 0x9a, 0x85, 0x08, 0xe0, 0xa2, 0x8a, 0x02, 0x22, 0xd2, 0x43, 0xa2, 0x82, 0x2b, 0x68, 0x0a, 0x4a,
+ 0x40, 0x3a, 0x9a, 0x18, 0x91, 0x85, 0x02, 0x78, 0x53, 0x07, 0x09, 0x4a, 0xa3, 0x8a, 0xa2, 0x82,
+ 0x30, 0xd5, 0x01, 0x23, 0x2f, 0x68, 0xdb, 0x02, 0x03, 0x4a, 0x40, 0x3a, 0xba, 0x18, 0x53, 0x85,
+ 0x2c, 0xe0, 0x00, 0x00, 0x84, 0x00, 0x00, 0x20, 0x40, 0xa1, 0x01, 0x00, 0x00, 0x04, 0x00, 0x20,
+ 0xff, 0xf7, 0x00, 0x00, 0xff, 0xe1, 0x00, 0x00, 0x1f, 0xfe, 0x00, 0x00, 0xff, 0xc3, 0x00, 0x00,
+ 0x3f, 0xfc, 0x00, 0x00, 0xff, 0xdf, 0x00, 0x00, 0x99, 0x56, 0xfc, 0xff, 0xe6, 0xf7, 0xd3, 0x00,
+ 0x5a, 0x60, 0xda, 0x00, 0x01, 0xd1, 0x00, 0x00, 0x00, 0x01, 0x00, 0x20, 0x88, 0x00, 0x00, 0x20,
+ 0xff, 0x02, 0x00, 0x00, 0x90, 0x00, 0x00, 0x20, 0x40, 0xa2, 0x01, 0x00, 0xff, 0x0f, 0x00, 0x00,
+ 0xfb, 0xff, 0x00, 0x00, 0x2b, 0x68, 0xfe, 0x4a, 0x9a, 0x18, 0x51, 0x85, 0x2a, 0x68, 0xff, 0x32,
+ 0x01, 0x32, 0x92, 0x8d, 0x92, 0x07, 0xd3, 0x0f, 0x02, 0x46, 0x80, 0x32, 0x53, 0x75, 0x94, 0x46,
+ 0x00, 0x2b, 0xf8, 0x4a, 0xa3, 0x8a, 0xa2, 0x82, 0x02, 0xd0, 0x1b, 0x23, 0x5b, 0x01, 0x01, 0xe0,
+ 0x11, 0x23, 0x5b, 0x01, 0x2f, 0x68, 0xf2, 0x4a, 0x80, 0x32, 0xba, 0x18, 0x13, 0x80, 0x62, 0x46,
+ 0x52, 0x7d, 0x00, 0x2a, 0x07, 0xd0, 0xa2, 0x8a, 0xef, 0x4a, 0xa2, 0x82, 0x07, 0x22, 0x2b, 0x68,
+ 0xd2, 0x02, 0x9b, 0x19, 0x5a, 0x81, 0xa2, 0x8a, 0x01, 0x22, 0xd2, 0x43, 0xa2, 0x82, 0x2f, 0x68,
+ 0x01, 0x22, 0x0d, 0x23, 0x5b, 0x03, 0xfb, 0x18, 0x5a, 0x80, 0x40, 0x30, 0xc2, 0x7c, 0xe5, 0x48,
+ 0x92, 0x1e, 0xe0, 0x30, 0x13, 0x00, 0x04, 0xf0, 0x33, 0xfc, 0x08, 0x05, 0x05, 0x05, 0x0a, 0x0a,
+ 0x05, 0x05, 0x0a, 0x14, 0xa2, 0x8a, 0xa0, 0x82, 0xff, 0x22, 0x01, 0x32, 0x03, 0xe0, 0xa2, 0x8a,
+ 0xa0, 0x82, 0x01, 0x22, 0x52, 0x02, 0x2b, 0x68, 0x0d, 0x20, 0x40, 0x03, 0x18, 0x18, 0xc2, 0x80,
+ 0x06, 0xe0, 0xa2, 0x8a, 0xa0, 0x82, 0x2a, 0x68, 0x0d, 0x20, 0x40, 0x03, 0x10, 0x18, 0xc1, 0x80,
+ 0x2a, 0x68, 0xd6, 0x48, 0x10, 0x18, 0xc0, 0x8e, 0x00, 0x07, 0x00, 0x0f, 0x01, 0x28, 0x0f, 0xd0,
+ 0x04, 0x28, 0xa0, 0x8a, 0xd2, 0x48, 0xa0, 0x82, 0x28, 0x68, 0x11, 0xd0, 0x80, 0x19, 0x01, 0x80,
+ 0xa0, 0x8a, 0x01, 0x20, 0xc0, 0x43, 0xa0, 0x82, 0x28, 0x68, 0x80, 0x19, 0x41, 0x80, 0xf8, 0xbd,
+ 0xa0, 0x8a, 0xcb, 0x48, 0xa0, 0x82, 0x2a, 0x68, 0x80, 0x20, 0x92, 0x19, 0x10, 0x80, 0xef, 0xe7,
+ 0x80, 0x19, 0x01, 0x80, 0xa0, 0x8a, 0x01, 0x20, 0xc0, 0x43, 0xa0, 0x82, 0x29, 0x68, 0x01, 0x20,
+ 0x89, 0x19, 0x48, 0x80, 0xf8, 0xbd, 0xf8, 0xb5, 0x1f, 0x20, 0x01, 0xf0, 0x9e, 0xfd, 0x01, 0xf0,
+ 0x2b, 0xfb, 0xc0, 0x4f, 0x03, 0x24, 0x39, 0x68, 0x60, 0x31, 0x08, 0x70, 0x24, 0x07, 0xa0, 0x8a,
+ 0x09, 0x20, 0xc0, 0x43, 0xa0, 0x82, 0xbc, 0x4d, 0x08, 0x20, 0x29, 0x68, 0xb4, 0x4e, 0x80, 0x3e,
+ 0x89, 0x19, 0x08, 0x80, 0x00, 0x20, 0xfe, 0xf7, 0xf5, 0xf8, 0xb8, 0x49, 0xb8, 0x4a, 0xc8, 0x7f,
+ 0x03, 0x06, 0x15, 0xd5, 0xa3, 0x8a, 0xa2, 0x82, 0x40, 0x06, 0x40, 0x0e, 0x2a, 0x68, 0x92, 0x19,
+ 0x50, 0x80, 0xb0, 0x48, 0x00, 0x27, 0x00, 0x68, 0x02, 0x46, 0x40, 0x32, 0xd6, 0x7c, 0x33, 0x00,
+ 0x04, 0xf0, 0xbe, 0xfb, 0x09, 0x1b, 0x19, 0x43, 0x14, 0x43, 0x43, 0x14, 0x43, 0x14, 0x43, 0x00,
+ 0x38, 0x68, 0x03, 0x88, 0x9c, 0x46, 0x1b, 0x06, 0xeb, 0xd4, 0x83, 0x79, 0xdb, 0x07, 0xe8, 0xd1,
+ 0x63, 0x46, 0xa0, 0x8a, 0x5b, 0x07, 0xa2, 0x82, 0x07, 0x20, 0xdf, 0xe7, 0x2a, 0x21, 0xd1, 0x73,
+ 0x15, 0x21, 0x11, 0x74, 0x0d, 0xe0, 0xd7, 0x73, 0x0a, 0xe0, 0x03, 0x79, 0x1e, 0x06, 0x02, 0xd5,
+ 0x59, 0x06, 0x49, 0x0e, 0x03, 0xe0, 0x03, 0x78, 0x5b, 0x07, 0x1e, 0xd5, 0x49, 0x7f, 0xd1, 0x73,
+ 0x17, 0x74, 0x60, 0x30, 0xc7, 0x75, 0x0f, 0x20, 0x96, 0x4e, 0x10, 0x56, 0xfe, 0xf7, 0x2c, 0xfb,
+ 0x31, 0x68, 0x50, 0x20, 0x08, 0x56, 0xfe, 0xf7, 0xe1, 0xfa, 0x30, 0x68, 0x95, 0x4f, 0x00, 0x78,
+ 0x40, 0x07, 0x1b, 0xd5, 0x01, 0xf0, 0xef, 0xfd, 0x30, 0x68, 0x01, 0x78, 0x49, 0x07, 0x15, 0xd5,
+ 0x40, 0x30, 0xc0, 0x7c, 0x01, 0x28, 0x02, 0xd0, 0x10, 0xe0, 0x89, 0x7f, 0xdf, 0xe7, 0xa0, 0x8a,
+ 0x10, 0x20, 0xc0, 0x43, 0xa0, 0x82, 0x2a, 0x68, 0x10, 0x21, 0x81, 0x48, 0x12, 0x18, 0xd1, 0x84,
+ 0xa1, 0x8a, 0xa7, 0x82, 0x2a, 0x68, 0x20, 0x21, 0x10, 0x18, 0xc1, 0x84, 0xa0, 0x8a, 0xa7, 0x82,
+ 0x29, 0x68, 0x20, 0x20, 0x0d, 0x22, 0x52, 0x03, 0x89, 0x18, 0x08, 0x84, 0x30, 0x68, 0x01, 0x21,
+ 0x40, 0x30, 0x81, 0x73, 0xf8, 0xbd, 0x10, 0xb5, 0x7a, 0x4c, 0x20, 0x68, 0x60, 0x30, 0x00, 0x78,
+ 0x01, 0xf0, 0x0b, 0xfd, 0x21, 0x68, 0x61, 0x20, 0x08, 0x56, 0xfe, 0xf7, 0x73, 0xf8, 0x21, 0x68,
+ 0x00, 0x20, 0x40, 0x31, 0x88, 0x73, 0x0f, 0x20, 0x08, 0x56, 0xfe, 0xf7, 0xe5, 0xfa, 0x21, 0x68,
+ 0x50, 0x20, 0x08, 0x56, 0xfe, 0xf7, 0x9a, 0xfa, 0x03, 0x20, 0x00, 0x07, 0x81, 0x8a, 0x20, 0x21,
+ 0xc9, 0x43, 0x81, 0x82, 0x6c, 0x49, 0x20, 0x20, 0x09, 0x68, 0x0d, 0x22, 0x52, 0x03, 0x89, 0x18,
+ 0x08, 0x84, 0x20, 0x68, 0x01, 0x21, 0x40, 0x30, 0x81, 0x73, 0xa8, 0xe4, 0x30, 0xb5, 0x66, 0x4c,
+ 0x20, 0x68, 0x5f, 0x4d, 0xc0, 0x3d, 0x40, 0x19, 0xc0, 0x8e, 0x21, 0x68, 0x80, 0x04, 0x40, 0x0f,
+ 0x49, 0x19, 0xc9, 0x8e, 0x49, 0x05, 0x49, 0x0f, 0x40, 0x18, 0x21, 0x68, 0x40, 0x08, 0x49, 0x19,
+ 0xc9, 0x8e, 0x89, 0x06, 0x89, 0x0e, 0x43, 0x18, 0x20, 0x68, 0x40, 0x19, 0x00, 0x8f, 0x21, 0x68,
+ 0x80, 0x04, 0x40, 0x0f, 0x49, 0x19, 0x09, 0x8f, 0xc9, 0x06, 0xc9, 0x0e, 0x40, 0x18, 0x21, 0x68,
+ 0x49, 0x19, 0x09, 0x8f, 0x89, 0x09, 0xc9, 0x07, 0xc9, 0x0f, 0x00, 0xd0, 0x40, 0x42, 0x21, 0x68,
+ 0x49, 0x19, 0x09, 0x8f, 0x22, 0x68, 0x49, 0x05, 0x49, 0x0f, 0x52, 0x19, 0x12, 0x8f, 0xd2, 0x06,
+ 0xd2, 0x0e, 0x89, 0x18, 0x22, 0x68, 0x52, 0x19, 0x12, 0x8f, 0x52, 0x09, 0xd2, 0x07, 0xd2, 0x0f,
+ 0x00, 0xd0, 0x49, 0x42, 0x40, 0x18, 0x42, 0x10, 0x20, 0x68, 0x40, 0x19, 0x40, 0x8f, 0x80, 0x06,
+ 0x81, 0x16, 0x20, 0x68, 0x40, 0x19, 0x40, 0x8f, 0x24, 0x68, 0x40, 0x05, 0xc0, 0x16, 0x65, 0x19,
+ 0x3a, 0x24, 0x2c, 0x5f, 0xe4, 0x12, 0x00, 0x2b, 0x00, 0xda, 0x5b, 0x42, 0x00, 0x2a, 0x00, 0xda,
+ 0x52, 0x42, 0x9a, 0x18, 0x00, 0x29, 0x00, 0xda, 0x49, 0x42, 0x51, 0x18, 0x00, 0x28, 0x00, 0xda,
+ 0x40, 0x42, 0x08, 0x18, 0x00, 0x2c, 0x00, 0xda, 0x64, 0x42, 0x00, 0x19, 0x80, 0xb2, 0x30, 0xbd,
+ 0xf0, 0xb5, 0x35, 0x4c, 0x21, 0x68, 0x2e, 0x48, 0xc0, 0x38, 0x09, 0x18, 0xc9, 0x8e, 0x22, 0x68,
+ 0x89, 0x04, 0x49, 0x0f, 0x12, 0x18, 0xd2, 0x8e, 0x52, 0x05, 0x52, 0x0f, 0x89, 0x18, 0x22, 0x68,
+ 0x49, 0x08, 0x12, 0x18, 0xd2, 0x8e, 0x92, 0x06, 0x92, 0x0e, 0x8e, 0x18, 0x21, 0x68, 0x09, 0x18,
+ 0x09, 0x8f, 0x22, 0x68, 0x89, 0x04, 0x49, 0x0f, 0x12, 0x18, 0x12, 0x8f, 0xd2, 0x06, 0xd2, 0x0e,
+ 0x89, 0x18, 0x22, 0x68, 0x12, 0x18, 0x12, 0x8f, 0x92, 0x09, 0xd2, 0x07, 0xd2, 0x0f, 0x00, 0xd0,
+ 0x49, 0x42, 0x22, 0x68, 0x12, 0x18, 0x12, 0x8f, 0x23, 0x68, 0x52, 0x05, 0x52, 0x0f, 0x1b, 0x18,
+ 0x1b, 0x8f, 0xdb, 0x06, 0xdb, 0x0e, 0xd2, 0x18, 0x23, 0x68, 0x1b, 0x18, 0x1b, 0x8f, 0x5b, 0x09,
+ 0xdb, 0x07, 0xdb, 0x0f, 0x00, 0xd0, 0x52, 0x42, 0x89, 0x18, 0x4a, 0x10, 0x21, 0x68, 0x10, 0x48,
+ 0xc0, 0x38, 0x09, 0x18, 0x49, 0x8f, 0x27, 0x68, 0x89, 0x06, 0x89, 0x16, 0x55, 0x18, 0x4b, 0x00,
+ 0x5d, 0x19, 0x3f, 0x18, 0x7f, 0x8f, 0x7f, 0x05, 0xff, 0x16, 0x7f, 0x00, 0xed, 0x19, 0x27, 0x68,
+ 0x3f, 0x18, 0x3a, 0x20, 0x38, 0x5e, 0xc0, 0x12, 0x28, 0x18, 0x0a, 0x4d, 0x2d, 0x68, 0x2d, 0x88,
+ 0xaf, 0x06, 0xbf, 0x0f, 0x02, 0x2f, 0x28, 0xd1, 0x6d, 0x07, 0x26, 0xd5, 0x50, 0x00, 0x13, 0xe0,
+ 0x00, 0xa1, 0x01, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0xff, 0xc7, 0x00, 0x00, 0x00, 0xa3, 0x01, 0x00,
+ 0x7f, 0xff, 0xff, 0xff, 0x90, 0x00, 0x00, 0x20, 0x84, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x20,
+ 0xf0, 0xff, 0x00, 0x00, 0xdf, 0xff, 0x00, 0x00, 0x80, 0x19, 0x40, 0x18, 0x22, 0x68, 0xc1, 0x18,
+ 0x2e, 0x48, 0x12, 0x18, 0x52, 0x8f, 0x52, 0x05, 0xd2, 0x16, 0x52, 0x00, 0x89, 0x18, 0x22, 0x68,
+ 0x12, 0x18, 0x3a, 0x20, 0x10, 0x5e, 0xc0, 0x12, 0x08, 0x18, 0xf0, 0xbd, 0x00, 0xb5, 0xff, 0xf7,
+ 0x15, 0xff, 0x81, 0x00, 0x40, 0x00, 0x08, 0x18, 0x80, 0xb2, 0x00, 0xbd, 0x00, 0xb5, 0x00, 0x22,
+ 0xfd, 0xf7, 0x57, 0xff, 0x00, 0x28, 0x01, 0xda, 0x40, 0x42, 0x01, 0x22, 0x20, 0x49, 0x09, 0x68,
+ 0x1e, 0x4b, 0x40, 0x33, 0xc9, 0x18, 0x09, 0x88, 0xc9, 0x08, 0xc9, 0x07, 0xc9, 0x0f, 0x02, 0xd0,
+ 0x40, 0x00, 0x1c, 0x49, 0x02, 0xe0, 0x1b, 0x49, 0x40, 0x00, 0x40, 0x39, 0x08, 0x5e, 0x00, 0x2a,
+ 0x01, 0xd0, 0x40, 0x42, 0x00, 0xb2, 0x00, 0xbd, 0x10, 0xb5, 0x03, 0x21, 0x09, 0x07, 0x8a, 0x8a,
+ 0x8a, 0x13, 0x8a, 0x82, 0x12, 0x4a, 0x80, 0x06, 0x14, 0x68, 0xc3, 0x0d, 0x0f, 0x48, 0x24, 0x18,
+ 0xe3, 0x82, 0x8b, 0x8a, 0x10, 0x4b, 0x8b, 0x82, 0x12, 0x68, 0x59, 0x1c, 0x10, 0x18, 0xc1, 0x82,
+ 0x82, 0xe4, 0xc2, 0x06, 0xd2, 0x0e, 0x01, 0x21, 0x91, 0x40, 0x40, 0x09, 0x0b, 0x4a, 0x80, 0x00,
+ 0x80, 0x18, 0x01, 0x60, 0x70, 0x47, 0xc2, 0x06, 0xd2, 0x0e, 0x01, 0x21, 0x91, 0x40, 0x07, 0x4a,
+ 0x40, 0x09, 0x80, 0x00, 0x80, 0x32, 0x80, 0x18, 0x01, 0x60, 0x70, 0x47, 0x40, 0xa0, 0x01, 0x00,
+ 0x84, 0x00, 0x00, 0x20, 0x14, 0x7a, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00, 0x00, 0xe1, 0x00, 0xe0,
+ 0x70, 0xb5, 0xfd, 0x49, 0x00, 0x25, 0x0a, 0x68, 0x11, 0x46, 0x40, 0x31, 0x13, 0x46, 0x60, 0x33,
+ 0xcd, 0x75, 0x4d, 0x77, 0x1d, 0x73, 0xd5, 0x83, 0x1c, 0x46, 0x15, 0x84, 0x00, 0x28, 0x09, 0xd0,
+ 0x0f, 0x24, 0xe4, 0x43, 0x01, 0x28, 0x08, 0xd0, 0x00, 0x23, 0x02, 0x28, 0x1a, 0xd0, 0x03, 0x28,
+ 0x17, 0xd0, 0x05, 0xe0, 0x0f, 0x23, 0xe5, 0x77, 0x02, 0xe0, 0x80, 0x32, 0x23, 0x46, 0x15, 0x70,
+ 0x10, 0x24, 0x0c, 0x57, 0x02, 0x28, 0x0d, 0xd0, 0x03, 0x28, 0x0b, 0xd0, 0x4b, 0x76, 0xcd, 0x76,
+ 0x48, 0x7e, 0x88, 0x76, 0x18, 0x46, 0xfd, 0xf7, 0xe5, 0xfe, 0x20, 0x46, 0xfe, 0xf7, 0x16, 0xf9,
+ 0x70, 0xbd, 0x0f, 0x24, 0x4c, 0x76, 0xf2, 0xe7, 0x70, 0xb5, 0xe3, 0x4c, 0x00, 0x25, 0x21, 0x68,
+ 0x0a, 0x46, 0x40, 0x32, 0x0b, 0x46, 0x60, 0x33, 0xd5, 0x75, 0x00, 0x28, 0x07, 0xd0, 0x01, 0x28,
+ 0x0c, 0xd0, 0xd5, 0x76, 0x02, 0x28, 0x1d, 0xd0, 0x03, 0x28, 0x22, 0xd0, 0x0f, 0xe0, 0xc8, 0x7b,
+ 0xc6, 0x08, 0xd6, 0x76, 0xdb, 0x7f, 0x00, 0x02, 0xc0, 0x18, 0x07, 0xe0, 0x08, 0x7c, 0xc3, 0x08,
+ 0x5b, 0x42, 0xd3, 0x76, 0x03, 0x02, 0x80, 0x20, 0x40, 0x5c, 0x18, 0x18, 0x88, 0x84, 0x95, 0x76,
+ 0x1b, 0x20, 0x10, 0x56, 0xfd, 0xf7, 0xb6, 0xfe, 0x21, 0x68, 0x5a, 0x20, 0x08, 0x56, 0xfe, 0xf7,
+ 0xe5, 0xf8, 0x70, 0xbd, 0x48, 0x7b, 0xc5, 0x08, 0x6d, 0x42, 0x95, 0x76, 0x00, 0x02, 0x5b, 0x7f,
+ 0x04, 0xe0, 0x88, 0x7b, 0xc5, 0x08, 0x95, 0x76, 0x9b, 0x7f, 0x00, 0x02, 0xc0, 0x18, 0x88, 0x84,
+ 0xe6, 0xe7, 0xf0, 0xb5, 0xc4, 0x4c, 0x94, 0x46, 0x24, 0x68, 0x08, 0x9a, 0x01, 0x25, 0x05, 0x9f,
+ 0x06, 0x9e, 0x60, 0x34, 0x01, 0x2a, 0x03, 0xd0, 0x00, 0x29, 0x16, 0xdb, 0x01, 0x21, 0x0a, 0xe0,
+ 0x00, 0x29, 0x06, 0xd0, 0x02, 0xda, 0x00, 0x2b, 0x03, 0xdc, 0x0e, 0xe0, 0x00, 0x2b, 0xf5, 0xda,
+ 0x60, 0x46, 0x25, 0x73, 0x05, 0xe0, 0x07, 0x9a, 0x51, 0x43, 0x40, 0x1a, 0x00, 0x21, 0x40, 0xb2,
+ 0x21, 0x73, 0xb0, 0x42, 0x04, 0xdd, 0x30, 0x46, 0x05, 0xe0, 0x00, 0x21, 0xc9, 0x43, 0xf2, 0xe7,
+ 0xb8, 0x42, 0x01, 0xda, 0x38, 0x46, 0x25, 0x73, 0xf0, 0xbd, 0xf0, 0xb5, 0x85, 0xb0, 0x05, 0x00,
+ 0x4c, 0xd0, 0x1e, 0x20, 0xc0, 0x43, 0x01, 0x2d, 0x01, 0xd0, 0x03, 0x2d, 0x46, 0xd0, 0x00, 0x22,
+ 0xa9, 0x49, 0x1e, 0x23, 0x09, 0x68, 0x20, 0x24, 0xcb, 0x5e, 0x0c, 0x5f, 0x9b, 0x02, 0x23, 0x43,
+ 0x0c, 0x46, 0x40, 0x34, 0xe6, 0x7c, 0x0f, 0x3b, 0x01, 0x2e, 0xa4, 0x4e, 0x36, 0x68, 0xa4, 0x4f,
+ 0x37, 0xd0, 0xf6, 0x19, 0x36, 0x8e, 0xce, 0x83, 0xa0, 0x4e, 0x36, 0x68, 0xf6, 0x19, 0x76, 0x8e,
+ 0xb6, 0x05, 0xb6, 0x0d, 0x0e, 0x84, 0x1e, 0x26, 0x8e, 0x5f, 0x20, 0x27, 0xcf, 0x5f, 0xb6, 0x02,
+ 0x3e, 0x43, 0x19, 0x21, 0x0f, 0x3e, 0x61, 0x56, 0xb4, 0x46, 0x4e, 0x1c, 0x02, 0x2e, 0x01, 0xd9,
+ 0x49, 0x10, 0x61, 0x76, 0x61, 0x7f, 0x5a, 0x27, 0x49, 0x1c, 0xce, 0xb2, 0x92, 0x49, 0x66, 0x77,
+ 0x09, 0x68, 0x05, 0x2e, 0xcf, 0x57, 0x1d, 0xd8, 0x19, 0x21, 0x61, 0x56, 0x00, 0x26, 0x01, 0x92,
+ 0x02, 0x91, 0x00, 0x90, 0x03, 0x96, 0x1b, 0x22, 0xa2, 0x56, 0x38, 0x46, 0x61, 0x46, 0xff, 0xf7,
+ 0x88, 0xff, 0x89, 0x49, 0x09, 0x68, 0x40, 0x31, 0xce, 0x75, 0x23, 0xe0, 0x1f, 0x22, 0x00, 0x20,
+ 0xb6, 0xe7, 0xf6, 0x19, 0x36, 0x8d, 0xce, 0x83, 0x84, 0x4e, 0x36, 0x68, 0xf6, 0x19, 0x76, 0x8d,
+ 0xf6, 0xb2, 0xc7, 0xe7, 0x01, 0x21, 0x07, 0x2e, 0x12, 0xd8, 0x19, 0x26, 0xa6, 0x57, 0x01, 0x92,
+ 0x03, 0x91, 0x00, 0x90, 0x02, 0x96, 0x1b, 0x22, 0xa2, 0x56, 0x38, 0x46, 0x61, 0x46, 0xff, 0xf7,
+ 0x68, 0xff, 0x79, 0x49, 0x6c, 0x22, 0x09, 0x68, 0x52, 0x5c, 0x40, 0x31, 0xca, 0x75, 0x01, 0xe0,
+ 0x38, 0x46, 0xe1, 0x75, 0x74, 0x4c, 0x21, 0x68, 0x40, 0x31, 0x8a, 0x7e, 0xca, 0x76, 0x88, 0x76,
+ 0x00, 0x2d, 0x0a, 0xd0, 0x01, 0x2d, 0x08, 0xd0, 0xfe, 0xf7, 0x28, 0xf8, 0x20, 0x68, 0x01, 0x46,
+ 0x40, 0x30, 0xc2, 0x7d, 0x01, 0x2a, 0x03, 0xd0, 0x0f, 0xe0, 0xfd, 0xf7, 0xeb, 0xfd, 0xf5, 0xe7,
+ 0x00, 0x2d, 0x0d, 0xd0, 0x01, 0x2d, 0x13, 0xd0, 0x6a, 0x4a, 0x02, 0x2d, 0x82, 0x56, 0x17, 0xd0,
+ 0x00, 0x2a, 0x00, 0xda, 0x52, 0x42, 0xd0, 0x00, 0x88, 0x73, 0x00, 0x20, 0x05, 0xb0, 0xf0, 0xbd,
+ 0x1a, 0x22, 0x82, 0x56, 0x00, 0x2a, 0x00, 0xda, 0x52, 0x42, 0xd0, 0x00, 0xc8, 0x73, 0xf4, 0xe7,
+ 0x1a, 0x22, 0x82, 0x56, 0x00, 0x2a, 0x00, 0xda, 0x52, 0x42, 0xd0, 0x00, 0x08, 0x74, 0xec, 0xe7,
+ 0x00, 0x2a, 0x00, 0xda, 0x52, 0x42, 0xd0, 0x00, 0x48, 0x73, 0xe6, 0xe7, 0xf8, 0xb5, 0x56, 0x4e,
+ 0x04, 0x46, 0x30, 0x68, 0x53, 0x21, 0x0b, 0x5c, 0x00, 0x25, 0x54, 0x49, 0x01, 0x2b, 0x54, 0x4a,
+ 0x0b, 0x68, 0x17, 0xd0, 0x9b, 0x18, 0x1b, 0x8e, 0xc3, 0x83, 0x09, 0x68, 0x89, 0x18, 0x49, 0x8e,
+ 0x89, 0x05, 0x89, 0x0d, 0x01, 0x84, 0xfd, 0xf7, 0xa4, 0xfd, 0x31, 0x68, 0x0b, 0x46, 0x40, 0x33,
+ 0xd8, 0x76, 0x02, 0x2c, 0x0e, 0xd0, 0x03, 0x2c, 0x0f, 0xd0, 0x01, 0x2c, 0x10, 0xd0, 0x00, 0x2c,
+ 0x11, 0xd0, 0x12, 0xe0, 0x9b, 0x18, 0x1b, 0x8d, 0xc3, 0x83, 0x09, 0x68, 0x89, 0x18, 0x49, 0x8d,
+ 0xc9, 0xb2, 0xe7, 0xe7, 0x79, 0x20, 0x45, 0x5c, 0x07, 0xe0, 0x7a, 0x20, 0x45, 0x5c, 0x04, 0xe0,
+ 0x7b, 0x20, 0x45, 0x5c, 0x01, 0xe0, 0x7c, 0x20, 0x45, 0x5c, 0xca, 0x8b, 0x00, 0x20, 0x00, 0x2a,
+ 0x05, 0xd0, 0x0a, 0x20, 0x0c, 0xe0, 0x52, 0x10, 0x40, 0x1c, 0x0a, 0x84, 0x40, 0xb2, 0x20, 0x22,
+ 0x8a, 0x5e, 0x00, 0x2a, 0xf7, 0xdc, 0x07, 0xe0, 0x52, 0x10, 0x40, 0x1c, 0xca, 0x83, 0x40, 0xb2,
+ 0x1e, 0x22, 0x8a, 0x5e, 0x00, 0x2a, 0xf7, 0xdc, 0x00, 0x1f, 0x40, 0xb2, 0x8a, 0x8c, 0xc0, 0x01,
+ 0xd2, 0x08, 0xc0, 0x10, 0x1f, 0x27, 0x10, 0x1a, 0x3f, 0x02, 0x02, 0x2c, 0x05, 0xd0, 0x03, 0x2c,
+ 0x03, 0xd0, 0x01, 0x2c, 0x01, 0xd0, 0x00, 0x2c, 0x02, 0xd1, 0xb8, 0x42, 0x00, 0xdd, 0x38, 0x46,
+ 0xc2, 0x04, 0x16, 0x0c, 0xea, 0x00, 0x12, 0x18, 0x8e, 0x84, 0x02, 0x2c, 0x05, 0xd0, 0x03, 0x2c,
+ 0x03, 0xd0, 0x01, 0x2c, 0x01, 0xd0, 0x00, 0x2c, 0x02, 0xd1, 0xba, 0x42, 0x00, 0xdd, 0x3a, 0x46,
+ 0xd0, 0x04, 0x00, 0x0c, 0x42, 0x05, 0x1f, 0x27, 0x12, 0x0e, 0x7d, 0x42, 0x00, 0x2c, 0x0a, 0xd0,
+ 0x03, 0x2c, 0x08, 0xd0, 0xc0, 0x0a, 0x40, 0x42, 0x01, 0x2c, 0x07, 0xd0, 0x02, 0x2c, 0x11, 0xd0,
+ 0x03, 0x2c, 0x0f, 0xd0, 0x19, 0xe0, 0xc0, 0x0a, 0x00, 0x2c, 0xf5, 0xd1, 0x1f, 0x28, 0x01, 0xdd,
+ 0xdf, 0x76, 0x12, 0xe0, 0xa8, 0x42, 0x01, 0xda, 0xdd, 0x76, 0x0e, 0xe0, 0x00, 0x28, 0x0c, 0xd0,
+ 0xd8, 0x76, 0x0a, 0xe0, 0x1f, 0x28, 0x01, 0xdd, 0x9f, 0x76, 0x06, 0xe0, 0xa8, 0x42, 0x01, 0xda,
+ 0x9d, 0x76, 0x02, 0xe0, 0x00, 0x28, 0x00, 0xd0, 0x98, 0x76, 0x01, 0x20, 0xd8, 0x75, 0x00, 0x2c,
+ 0x12, 0xd0, 0x01, 0x2c, 0x16, 0xd0, 0x02, 0x2c, 0x1b, 0xd0, 0x30, 0x0a, 0x88, 0x73, 0x60, 0x31,
+ 0x8e, 0x77, 0x8a, 0x76, 0x00, 0x20, 0xf8, 0xbd, 0x90, 0x00, 0x00, 0x20, 0x84, 0x00, 0x00, 0x20,
+ 0x40, 0xa0, 0x01, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x30, 0x0a, 0xc8, 0x73, 0x60, 0x31, 0xce, 0x77,
+ 0x0a, 0x77, 0xef, 0xe7, 0x30, 0x0a, 0x08, 0x74, 0x80, 0x20, 0x46, 0x54, 0x60, 0x31, 0xca, 0x76,
+ 0xe8, 0xe7, 0x30, 0x0a, 0x48, 0x73, 0x60, 0x31, 0x4e, 0x77, 0x4a, 0x76, 0xe2, 0xe7, 0x30, 0xb5,
+ 0x03, 0x21, 0x09, 0x07, 0x8a, 0x8a, 0x80, 0x22, 0xd2, 0x43, 0x8a, 0x82, 0xfe, 0x4a, 0xc4, 0x01,
+ 0x15, 0x68, 0xfe, 0x4b, 0xed, 0x18, 0xec, 0x81, 0x8c, 0x8a, 0x40, 0x24, 0xe4, 0x43, 0x8c, 0x82,
+ 0x11, 0x68, 0x80, 0x01, 0xc9, 0x18, 0xc8, 0x81, 0x30, 0xbd, 0x10, 0xb5, 0x03, 0x21, 0x09, 0x07,
+ 0x8a, 0x8a, 0x8a, 0x13, 0x8a, 0x82, 0xc0, 0x05, 0x15, 0x22, 0xc0, 0x0d, 0x52, 0x02, 0x83, 0x18,
+ 0xf1, 0x4a, 0x14, 0x68, 0xf1, 0x48, 0x24, 0x18, 0xe3, 0x82, 0x8b, 0x8a, 0xf0, 0x4b, 0x8b, 0x82,
+ 0x12, 0x68, 0x59, 0x1c, 0x10, 0x18, 0xc1, 0x82, 0x10, 0xbd, 0x10, 0xb5, 0x03, 0x21, 0x09, 0x07,
+ 0x8a, 0x8a, 0x8a, 0x13, 0x8a, 0x82, 0xc0, 0x05, 0x0b, 0x22, 0xc0, 0x0d, 0x92, 0x02, 0x83, 0x18,
+ 0xe5, 0x4a, 0x14, 0x68, 0xe5, 0x48, 0x24, 0x18, 0xe3, 0x82, 0x8b, 0x8a, 0xe4, 0x4b, 0x8b, 0x82,
+ 0x12, 0x68, 0x59, 0x1c, 0x10, 0x18, 0xc1, 0x82, 0x10, 0xbd, 0x10, 0xb5, 0x03, 0x21, 0x09, 0x07,
+ 0x8a, 0x8a, 0x8a, 0x13, 0x8a, 0x82, 0xc0, 0x05, 0x13, 0x22, 0xc0, 0x0d, 0x52, 0x02, 0x83, 0x18,
+ 0xd9, 0x4a, 0x14, 0x68, 0xd9, 0x48, 0x24, 0x18, 0xe3, 0x82, 0x8b, 0x8a, 0xd8, 0x4b, 0x8b, 0x82,
+ 0x12, 0x68, 0x59, 0x1c, 0x10, 0x18, 0xc1, 0x82, 0x10, 0xbd, 0x10, 0xb5, 0x03, 0x21, 0x09, 0x07,
+ 0x8a, 0x8a, 0x8a, 0x13, 0x8a, 0x82, 0xc0, 0x05, 0x05, 0x22, 0xc0, 0x0d, 0xd2, 0x02, 0x83, 0x18,
+ 0xcd, 0x4a, 0x14, 0x68, 0xcd, 0x48, 0x24, 0x18, 0xe3, 0x82, 0x8b, 0x8a, 0xcc, 0x4b, 0x8b, 0x82,
+ 0x12, 0x68, 0x59, 0x1c, 0x10, 0x18, 0xc1, 0x82, 0x10, 0xbd, 0x10, 0xb5, 0x00, 0x24, 0x00, 0x28,
+ 0x06, 0xdd, 0x20, 0x46, 0xff, 0xf7, 0xe1, 0xff, 0x20, 0x46, 0xff, 0xf7, 0xc6, 0xff, 0x10, 0xbd,
+ 0x00, 0x28, 0x20, 0x46, 0x05, 0xda, 0xff, 0xf7, 0xa8, 0xff, 0x20, 0x46, 0xff, 0xf7, 0x8d, 0xff,
+ 0x10, 0xbd, 0xfd, 0xf7, 0x60, 0xff, 0x20, 0x46, 0xfd, 0xf7, 0x45, 0xff, 0x10, 0xbd, 0x10, 0xb5,
+ 0xbc, 0x4b, 0x8a, 0x40, 0x1b, 0x68, 0x02, 0x40, 0x1c, 0x8e, 0x84, 0x43, 0x14, 0x43, 0x1c, 0x86,
+ 0x10, 0xbd, 0x10, 0xb5, 0xb7, 0x4b, 0x8a, 0x40, 0x1b, 0x68, 0x02, 0x40, 0x5c, 0x8e, 0x84, 0x43,
+ 0x14, 0x43, 0x5c, 0x86, 0x10, 0xbd, 0x10, 0xb5, 0x04, 0x46, 0xfd, 0xf7, 0xc7, 0xfd, 0x03, 0x21,
+ 0x09, 0x07, 0x88, 0x8a, 0x1f, 0x20, 0xc0, 0x43, 0x88, 0x82, 0xab, 0x48, 0xe2, 0x06, 0x03, 0x68,
+ 0xd2, 0x0e, 0x0d, 0x24, 0x64, 0x03, 0x1b, 0x19, 0x5a, 0x85, 0x8a, 0x8a, 0xaa, 0x4a, 0x8a, 0x82,
+ 0xaa, 0x4b, 0x04, 0x68, 0xa5, 0x4a, 0xa4, 0x18, 0x23, 0x84, 0x8b, 0x8a, 0xff, 0x23, 0x8b, 0x82,
+ 0x01, 0x21, 0x00, 0x68, 0x89, 0x02, 0x80, 0x18, 0x81, 0x84, 0x10, 0xbd, 0x10, 0xb5, 0x04, 0x46,
+ 0xfd, 0xf7, 0xa4, 0xfd, 0x03, 0x21, 0x09, 0x07, 0x88, 0x8a, 0x1f, 0x20, 0xc0, 0x43, 0x88, 0x82,
+ 0x99, 0x48, 0xe2, 0x06, 0x03, 0x68, 0xd2, 0x0e, 0x0d, 0x24, 0x64, 0x03, 0x1b, 0x19, 0x5a, 0x85,
+ 0x8a, 0x8a, 0x99, 0x4a, 0x8a, 0x82, 0x09, 0x23, 0x04, 0x68, 0x1b, 0x03, 0x93, 0x4a, 0xa4, 0x18,
+ 0x23, 0x84, 0x8b, 0x8a, 0xff, 0x23, 0x8b, 0x82, 0x01, 0x21, 0x00, 0x68, 0x89, 0x02, 0x80, 0x18,
+ 0x81, 0x84, 0x10, 0xbd, 0x10, 0xb5, 0x04, 0x46, 0xfd, 0xf7, 0x80, 0xfd, 0x03, 0x21, 0x09, 0x07,
+ 0x88, 0x8a, 0x1f, 0x20, 0xc0, 0x43, 0x88, 0x82, 0x87, 0x48, 0xe2, 0x06, 0x03, 0x68, 0xd2, 0x0e,
+ 0x0d, 0x24, 0x64, 0x03, 0x1b, 0x19, 0x5a, 0x85, 0x8a, 0x8a, 0x87, 0x4a, 0x20, 0x3a, 0x8a, 0x82,
+ 0x86, 0x4b, 0x04, 0x68, 0x14, 0x33, 0x81, 0x4a, 0xa4, 0x18, 0x23, 0x84, 0x8b, 0x8a, 0x00, 0x23,
+ 0x8b, 0x82, 0x83, 0x4b, 0x04, 0x68, 0xa4, 0x18, 0x63, 0x84, 0x8b, 0x8a, 0xff, 0x23, 0x8b, 0x82,
+ 0x01, 0x21, 0x00, 0x68, 0x89, 0x02, 0x80, 0x18, 0x81, 0x84, 0x10, 0xbd, 0x00, 0x28, 0x00, 0xda,
+ 0xc0, 0x43, 0x80, 0xb2, 0x70, 0x47, 0xff, 0xb5, 0x76, 0x4c, 0x07, 0x46, 0x20, 0x68, 0x00, 0x22,
+ 0x09, 0x9e, 0x0a, 0x9d, 0x60, 0x30, 0x94, 0x46, 0x00, 0x29, 0x03, 0xd0, 0x04, 0xda, 0x00, 0x2b,
+ 0x04, 0xdc, 0x14, 0xe0, 0x01, 0x21, 0x19, 0xe0, 0x00, 0x2b, 0x0e, 0xda, 0x08, 0x46, 0xff, 0xf7,
+ 0xe5, 0xff, 0x01, 0x46, 0x18, 0x46, 0xff, 0xf7, 0xe1, 0xff, 0x81, 0x42, 0x00, 0xd3, 0x02, 0x9f,
+ 0x21, 0x68, 0x01, 0x20, 0x60, 0x31, 0x08, 0x73, 0x09, 0xe0, 0x01, 0x21, 0x01, 0xe0, 0x00, 0x21,
+ 0xc9, 0x43, 0x0b, 0x9b, 0x59, 0x43, 0x79, 0x1a, 0x4f, 0xb2, 0x00, 0x21, 0x01, 0x73, 0xaf, 0x42,
+ 0x01, 0xdd, 0x2f, 0x46, 0x02, 0xe0, 0xb7, 0x42, 0x04, 0xda, 0x37, 0x46, 0x21, 0x68, 0x01, 0x22,
+ 0x60, 0x31, 0x0a, 0x73, 0xaf, 0x42, 0x01, 0xd0, 0xb7, 0x42, 0x01, 0xd1, 0x01, 0x20, 0x84, 0x46,
+ 0x20, 0x68, 0x61, 0x46, 0x60, 0x30, 0x82, 0x72, 0xc1, 0x72, 0x38, 0x46, 0x04, 0xb0, 0xf0, 0xbd,
+ 0xf0, 0xb5, 0x04, 0x24, 0xa6, 0x46, 0x01, 0x27, 0x06, 0x9d, 0x00, 0x24, 0x05, 0x9e, 0xbc, 0x46,
+ 0xa8, 0x42, 0x36, 0xdc, 0xaa, 0x42, 0x34, 0xdc, 0xb0, 0x42, 0x32, 0xdb, 0xb2, 0x42, 0x30, 0xdb,
+ 0x07, 0x9f, 0x4d, 0x42, 0x5e, 0x42, 0x87, 0x42, 0x0e, 0xd1, 0x00, 0x29, 0x29, 0xd0, 0x90, 0x42,
+ 0x01, 0xdd, 0x60, 0x1e, 0x84, 0x46, 0x00, 0x29, 0x00, 0xda, 0x29, 0x46, 0x08, 0xb2, 0x00, 0x2b,
+ 0x00, 0xda, 0x33, 0x46, 0x19, 0xb2, 0x10, 0xe0, 0x97, 0x42, 0x1a, 0xd1, 0x00, 0x2b, 0x18, 0xd0,
+ 0x82, 0x42, 0x02, 0xdd, 0x00, 0x20, 0xc0, 0x43, 0x84, 0x46, 0x00, 0x2b, 0x00, 0xda, 0x33, 0x46,
+ 0x18, 0xb2, 0x00, 0x29, 0x00, 0xda, 0x29, 0x46, 0x09, 0xb2, 0x00, 0x22, 0x01, 0x23, 0xdb, 0x03,
+ 0x88, 0x42, 0x08, 0xda, 0x09, 0x1a, 0x64, 0x00, 0xc9, 0x03, 0xc9, 0x18, 0x64, 0xb2, 0x09, 0x14,
+ 0x08, 0xe0, 0x00, 0x20, 0xf0, 0xbd, 0x64, 0x00, 0x64, 0x1c, 0x40, 0x1a, 0xc0, 0x03, 0xc0, 0x18,
+ 0x64, 0xb2, 0x00, 0x14, 0x52, 0x1c, 0xd2, 0xb2, 0x72, 0x45, 0xe9, 0xd9, 0x64, 0x1c, 0x60, 0x10,
+ 0x61, 0x46, 0x49, 0x1c, 0xee, 0xd1, 0x40, 0x42, 0x40, 0xb2, 0xf0, 0xbd, 0xf0, 0xb5, 0x04, 0x46,
+ 0x87, 0xb0, 0x01, 0x20, 0x05, 0x90, 0x2b, 0x48, 0x23, 0x4f, 0x00, 0x2c, 0x08, 0xdd, 0x39, 0x68,
+ 0x09, 0x18, 0x09, 0x89, 0x89, 0x06, 0x8e, 0x16, 0x39, 0x68, 0x08, 0x18, 0xc0, 0x88, 0x11, 0xe0,
+ 0x39, 0x68, 0x00, 0x2c, 0x07, 0xda, 0x09, 0x18, 0x89, 0x89, 0x89, 0x06, 0x8e, 0x16, 0x39, 0x68,
+ 0x08, 0x18, 0x40, 0x89, 0x06, 0xe0, 0x09, 0x18, 0x89, 0x88, 0x89, 0x06, 0x8e, 0x16, 0x39, 0x68,
+ 0x08, 0x18, 0x40, 0x88, 0x80, 0x06, 0x85, 0x16, 0x16, 0x48, 0x00, 0x68, 0x01, 0x46, 0x40, 0x31,
+ 0x8c, 0x46, 0x49, 0x7f, 0x00, 0x29, 0x76, 0xd1, 0x3a, 0x68, 0x10, 0x49, 0x52, 0x18, 0x28, 0x21,
+ 0x51, 0x5e, 0x1f, 0x22, 0x03, 0x91, 0x05, 0x9b, 0x51, 0x42, 0x02, 0x93, 0x01, 0x92, 0x00, 0x91,
+ 0x1e, 0x23, 0xc3, 0x5e, 0x60, 0x46, 0x18, 0x22, 0x82, 0x56, 0x30, 0x46, 0x03, 0x99, 0xff, 0xf7,
+ 0x22, 0xff, 0x04, 0x90, 0x07, 0x48, 0x6c, 0x21, 0x00, 0x68, 0x09, 0x5c, 0x00, 0x29, 0x2f, 0xd0,
+ 0x1f, 0x22, 0x51, 0x42, 0x04, 0x9b, 0x0f, 0xe0, 0x84, 0x00, 0x00, 0x20, 0x40, 0xa0, 0x01, 0x00,
+ 0xff, 0x7f, 0x00, 0x00, 0x90, 0x00, 0x00, 0x20, 0xf3, 0x0f, 0x00, 0x00, 0x0c, 0xa0, 0x00, 0x00,
+ 0x20, 0x20, 0x00, 0x00, 0x80, 0xa2, 0x01, 0x00, 0x02, 0x93, 0x01, 0x92, 0x00, 0x91, 0x1e, 0x23,
+ 0x58, 0x22, 0xc3, 0x5e, 0x82, 0x56, 0x30, 0x46, 0x03, 0x99, 0xff, 0xf7, 0x41, 0xff, 0x01, 0x46,
+ 0xfe, 0x48, 0x5b, 0x22, 0x00, 0x68, 0x00, 0x2c, 0x11, 0x54, 0x02, 0xdd, 0x60, 0x30, 0x41, 0x74,
+ 0x06, 0xe0, 0x00, 0x2c, 0x02, 0xda, 0x60, 0x30, 0xc1, 0x73, 0x01, 0xe0, 0x60, 0x30, 0x41, 0x73,
+ 0xf6, 0x48, 0x00, 0x68, 0x01, 0x46, 0x40, 0x31, 0x0e, 0x76, 0x03, 0x9a, 0xc2, 0x83, 0x60, 0x30,
+ 0x00, 0x7b, 0x48, 0x77, 0x00, 0x2c, 0x03, 0xdd, 0x04, 0x98, 0xff, 0xf7, 0x1e, 0xfe, 0x07, 0xe0,
+ 0x04, 0x98, 0x00, 0x2c, 0x02, 0xda, 0xff, 0xf7, 0xe8, 0xfd, 0x01, 0xe0, 0xfd, 0xf7, 0xa3, 0xfd,
+ 0xea, 0x4e, 0x30, 0x68, 0x60, 0x30, 0x01, 0x7b, 0x00, 0x29, 0x25, 0xd0, 0x00, 0x2c, 0x0b, 0xdd,
+ 0x82, 0x7a, 0x05, 0x21, 0x20, 0x20, 0xff, 0xf7, 0x3a, 0xfe, 0x30, 0x68, 0x05, 0x21, 0x60, 0x30,
+ 0xc2, 0x7a, 0x20, 0x20, 0x16, 0xe0, 0x17, 0xe0, 0x82, 0x7a, 0x00, 0x2c, 0x09, 0xda, 0x01, 0x21,
+ 0x02, 0x20, 0xff, 0xf7, 0x2c, 0xfe, 0x30, 0x68, 0x01, 0x21, 0x60, 0x30, 0xc2, 0x7a, 0x02, 0x20,
+ 0x08, 0xe0, 0x03, 0x21, 0x08, 0x20, 0xff, 0xf7, 0x22, 0xfe, 0x30, 0x68, 0x03, 0x21, 0x60, 0x30,
+ 0xc2, 0x7a, 0x08, 0x20, 0xff, 0xf7, 0x25, 0xfe, 0xd4, 0x4e, 0x31, 0x68, 0x08, 0x46, 0x40, 0x30,
+ 0x82, 0x7f, 0x00, 0x2a, 0x77, 0xd1, 0x3b, 0x68, 0xd1, 0x4a, 0x9b, 0x18, 0x2c, 0x22, 0x9a, 0x5e,
+ 0x1f, 0x23, 0x03, 0x92, 0x5a, 0x42, 0x05, 0x9f, 0x01, 0x93, 0x00, 0x92, 0x02, 0x97, 0x20, 0x23,
+ 0x19, 0x22, 0xcb, 0x5e, 0x82, 0x56, 0x28, 0x46, 0x03, 0x99, 0xff, 0xf7, 0x8c, 0xfe, 0x07, 0x46,
+ 0x30, 0x68, 0x6c, 0x21, 0x09, 0x5c, 0x00, 0x29, 0x1c, 0xd0, 0x1f, 0x21, 0x4a, 0x42, 0x00, 0x92,
+ 0x01, 0x91, 0x02, 0x97, 0x20, 0x23, 0x59, 0x22, 0xc3, 0x5e, 0x82, 0x56, 0x28, 0x46, 0x03, 0x99,
+ 0xff, 0xf7, 0xbe, 0xfe, 0x01, 0x46, 0x5a, 0x22, 0x30, 0x68, 0x00, 0x2c, 0x11, 0x54, 0x02, 0xdd,
+ 0x60, 0x30, 0x81, 0x74, 0x06, 0xe0, 0x00, 0x2c, 0x02, 0xda, 0x60, 0x30, 0x01, 0x74, 0x01, 0xe0,
+ 0x60, 0x30, 0x81, 0x73, 0x30, 0x68, 0x01, 0x46, 0x40, 0x31, 0x4d, 0x76, 0x03, 0x9a, 0x02, 0x84,
+ 0x60, 0x30, 0x00, 0x7b, 0x88, 0x77, 0x00, 0x2c, 0x03, 0xdd, 0x38, 0x46, 0xff, 0xf7, 0x85, 0xfd,
+ 0x07, 0xe0, 0x00, 0x2c, 0x38, 0x46, 0x02, 0xda, 0xff, 0xf7, 0x4f, 0xfd, 0x01, 0xe0, 0xfd, 0xf7,
+ 0x0a, 0xfd, 0x30, 0x68, 0x60, 0x30, 0x01, 0x7b, 0x00, 0x29, 0x24, 0xd0, 0x00, 0x2c, 0x0a, 0xdd,
+ 0x82, 0x7a, 0x04, 0x21, 0x10, 0x20, 0xff, 0xf7, 0xba, 0xfd, 0x30, 0x68, 0x04, 0x21, 0x60, 0x30,
+ 0xc2, 0x7a, 0x10, 0x20, 0x15, 0xe0, 0x82, 0x7a, 0x00, 0x2c, 0x09, 0xda, 0x00, 0x21, 0x01, 0x20,
+ 0xff, 0xf7, 0xad, 0xfd, 0x30, 0x68, 0x00, 0x21, 0x60, 0x30, 0xc2, 0x7a, 0x01, 0x20, 0x08, 0xe0,
+ 0x02, 0x21, 0x04, 0x20, 0xff, 0xf7, 0xa3, 0xfd, 0x30, 0x68, 0x02, 0x21, 0x60, 0x30, 0xc2, 0x7a,
+ 0x04, 0x20, 0xff, 0xf7, 0xa6, 0xfd, 0x30, 0x68, 0x40, 0x30, 0x41, 0x7f, 0x00, 0x29, 0x04, 0xd0,
+ 0x81, 0x7f, 0x00, 0x29, 0x01, 0xd0, 0x01, 0x21, 0x00, 0xe0, 0x00, 0x21, 0xc1, 0x75, 0x07, 0xb0,
+ 0xf0, 0xbd, 0xf0, 0xb5, 0x8d, 0x48, 0x07, 0x27, 0x03, 0x68, 0xff, 0x43, 0x60, 0x33, 0x58, 0x7c,
+ 0x59, 0x7b, 0xfa, 0x10, 0x40, 0x1a, 0x40, 0xb2, 0xb8, 0x42, 0x01, 0xdc, 0x01, 0x21, 0x04, 0xe0,
+ 0x08, 0x28, 0x01, 0xdb, 0x11, 0x46, 0x00, 0xe0, 0x00, 0x21, 0x86, 0x4c, 0x20, 0x68, 0x86, 0x4e,
+ 0x80, 0x19, 0x00, 0x89, 0x1e, 0x25, 0x80, 0x06, 0x80, 0x16, 0x40, 0x18, 0xed, 0x43, 0xa8, 0x42,
+ 0x01, 0xda, 0x28, 0x46, 0x02, 0xe0, 0x1f, 0x28, 0x00, 0xdd, 0x1f, 0x20, 0x99, 0x7c, 0x9b, 0x7b,
+ 0xc9, 0x1a, 0x49, 0xb2, 0xb9, 0x42, 0x01, 0xdc, 0x01, 0x22, 0x02, 0xe0, 0x08, 0x29, 0x00, 0xda,
+ 0x00, 0x22, 0x21, 0x68, 0x89, 0x19, 0xc9, 0x88, 0x89, 0x06, 0x89, 0x16, 0x8c, 0x18, 0xac, 0x42,
+ 0x01, 0xda, 0x2c, 0x46, 0x02, 0xe0, 0x1f, 0x2c, 0x00, 0xdd, 0x1f, 0x24, 0xff, 0xf7, 0x1d, 0xfd,
+ 0x20, 0x46, 0xff, 0xf7, 0x02, 0xfd, 0xf0, 0xbd, 0x6c, 0x48, 0x00, 0x22, 0x00, 0x68, 0xc2, 0x83,
+ 0x01, 0x46, 0x02, 0x84, 0x40, 0x31, 0x4a, 0x75, 0xca, 0x75, 0x0a, 0x76, 0x4a, 0x76, 0x8a, 0x76,
+ 0xca, 0x76, 0x4a, 0x77, 0x8a, 0x77, 0x84, 0x21, 0x09, 0x5c, 0x01, 0x29, 0x01, 0xd0, 0x42, 0x84,
+ 0xc2, 0x84, 0x82, 0x84, 0x02, 0x85, 0x70, 0x47, 0x70, 0xb5, 0x60, 0x4c, 0x20, 0x68, 0x40, 0x30,
+ 0x81, 0x7a, 0x03, 0x29, 0x5a, 0xd0, 0x00, 0x25, 0xed, 0x43, 0x04, 0x29, 0x1f, 0xd0, 0x05, 0x29,
+ 0x37, 0xd0, 0x01, 0x20, 0xff, 0xf7, 0x93, 0xfc, 0x03, 0x21, 0x09, 0x07, 0x88, 0x8a, 0x10, 0x20,
+ 0xc0, 0x43, 0x88, 0x82, 0x57, 0x49, 0x10, 0x20, 0x09, 0x68, 0x55, 0x4a, 0x40, 0x32, 0x89, 0x18,
+ 0x08, 0x80, 0x28, 0x46, 0xff, 0xf7, 0xf9, 0xfc, 0xff, 0xf7, 0xc6, 0xff, 0x09, 0x20, 0xff, 0xf7,
+ 0x22, 0xfd, 0xfd, 0xf7, 0x4c, 0xf9, 0x20, 0x68, 0x04, 0x21, 0x40, 0x30, 0x81, 0x72, 0xfd, 0xf7,
+ 0x8e, 0xf9, 0x00, 0x28, 0x45, 0xd0, 0x28, 0x46, 0xff, 0xf7, 0x28, 0xfe, 0x20, 0x68, 0x40, 0x30,
+ 0xc0, 0x7d, 0x00, 0x28, 0xed, 0xd0, 0x00, 0x20, 0xff, 0xf7, 0xdf, 0xfc, 0xff, 0xf7, 0xac, 0xff,
+ 0x09, 0x20, 0xff, 0xf7, 0x2b, 0xfd, 0xfd, 0xf7, 0x32, 0xf9, 0x20, 0x68, 0x05, 0x21, 0x40, 0x30,
+ 0x81, 0x72, 0xfd, 0xf7, 0x74, 0xf9, 0x00, 0x28, 0x2b, 0xd0, 0x00, 0x20, 0xff, 0xf7, 0x0e, 0xfe,
+ 0x20, 0x68, 0x40, 0x30, 0xc0, 0x7d, 0x00, 0x28, 0xed, 0xd0, 0x00, 0x20, 0xfd, 0xf7, 0x4a, 0xf9,
+ 0x01, 0x20, 0xff, 0xf7, 0xc2, 0xfc, 0xff, 0xf7, 0x8f, 0xff, 0x09, 0x20, 0xfd, 0xf7, 0x31, 0xfd,
+ 0xfd, 0xf7, 0x15, 0xf9, 0x20, 0x68, 0x03, 0x21, 0x40, 0x30, 0x81, 0x72, 0xfd, 0xf7, 0x57, 0xf9,
+ 0x00, 0x28, 0x0e, 0xd0, 0x01, 0x20, 0xff, 0xf7, 0xf1, 0xfd, 0x20, 0x68, 0x40, 0x30, 0xc0, 0x7d,
+ 0x00, 0x28, 0xed, 0xd0, 0xff, 0xf7, 0x35, 0xff, 0x00, 0x20, 0xff, 0xf7, 0x30, 0xfc, 0x00, 0x20,
+ 0x70, 0xbd, 0x02, 0x20, 0x70, 0xbd, 0xf0, 0xb5, 0x26, 0x4a, 0x1e, 0x27, 0xff, 0x43, 0x1f, 0x26,
+ 0x10, 0x68, 0x85, 0xb0, 0x79, 0x11, 0x22, 0x4b, 0xc4, 0x18, 0x30, 0x20, 0x20, 0x5e, 0x1f, 0x28,
+ 0x01, 0xdd, 0x4c, 0x0c, 0x0c, 0xe0, 0x20, 0x24, 0xe0, 0x42, 0x01, 0xda, 0x0c, 0x46, 0x07, 0xe0,
+ 0x12, 0x68, 0x80, 0x02, 0xd2, 0x18, 0x52, 0x8e, 0x92, 0x05, 0x92, 0x0d, 0x10, 0x43, 0x04, 0xb2,
+ 0x16, 0x48, 0x10, 0x23, 0x02, 0x68, 0x10, 0x46, 0x40, 0x30, 0xc3, 0x56, 0x03, 0x93, 0x02, 0x91,
+ 0x00, 0x97, 0x01, 0x96, 0x20, 0x23, 0xd3, 0x5e, 0x18, 0x22, 0x82, 0x56, 0x21, 0x46, 0x03, 0x98,
+ 0xff, 0xf7, 0x19, 0xfd, 0x05, 0x46, 0x0d, 0x48, 0x6c, 0x21, 0x00, 0x68, 0x09, 0x5c, 0x00, 0x29,
+ 0x12, 0xd0, 0x29, 0x01, 0x81, 0x86, 0x00, 0x97, 0x01, 0x96, 0x02, 0x95, 0x20, 0x23, 0x58, 0x22,
+ 0xc3, 0x5e, 0x82, 0x56, 0x21, 0x46, 0x03, 0x98, 0xff, 0xf7, 0x4a, 0xfd, 0x01, 0x46, 0x03, 0x48,
+ 0x00, 0x68, 0x82, 0x8e, 0x89, 0x18, 0x81, 0x86, 0x00, 0x48, 0x07, 0xe0, 0x90, 0x00, 0x00, 0x20,
+ 0x40, 0xa0, 0x01, 0x00, 0x84, 0x00, 0x00, 0x20, 0x80, 0xa2, 0x01, 0x00, 0x00, 0x68, 0x03, 0x9a,
+ 0x01, 0x46, 0x40, 0x31, 0x0a, 0x76, 0x04, 0x84, 0x60, 0x30, 0x00, 0x7b, 0xc8, 0x75, 0x28, 0x46,
+ 0xfd, 0xf7, 0xfc, 0xfa, 0x05, 0xb0, 0xf0, 0xbd, 0xf8, 0xb5, 0xfe, 0x4c, 0x03, 0x25, 0x20, 0x68,
+ 0x2d, 0x07, 0x40, 0x30, 0x80, 0x7a, 0xfc, 0x4e, 0xfc, 0x4f, 0x0c, 0x28, 0x21, 0xd0, 0xff, 0xf7,
+ 0x03, 0xff, 0x20, 0x68, 0x40, 0x30, 0x01, 0x7c, 0x41, 0x76, 0xfd, 0xf7, 0xaa, 0xf8, 0x21, 0x68,
+ 0x40, 0x31, 0x88, 0x76, 0x00, 0x20, 0xfd, 0xf7, 0xe1, 0xfa, 0x00, 0x20, 0xfd, 0xf7, 0xaa, 0xf8,
+ 0xa8, 0x8a, 0xae, 0x82, 0x3a, 0x68, 0x01, 0x21, 0x0d, 0x20, 0x40, 0x03, 0x10, 0x18, 0xc1, 0x80,
+ 0x09, 0x20, 0xff, 0xf7, 0x8f, 0xfc, 0xfd, 0xf7, 0x72, 0xf8, 0x20, 0x68, 0x0c, 0x21, 0x40, 0x30,
+ 0x81, 0x72, 0xfd, 0xf7, 0xb4, 0xf8, 0x00, 0x28, 0x07, 0xd0, 0xff, 0xf7, 0x6c, 0xff, 0x21, 0x68,
+ 0x40, 0x31, 0xc8, 0x7d, 0x00, 0x28, 0x02, 0xd0, 0x04, 0xe0, 0x02, 0x20, 0xf8, 0xbd, 0x48, 0x7d,
+ 0x20, 0x28, 0xe8, 0xd3, 0xa8, 0x8a, 0xae, 0x82, 0x3b, 0x68, 0x00, 0x22, 0x0d, 0x20, 0x40, 0x03,
+ 0x18, 0x18, 0xc2, 0x80, 0x19, 0x20, 0x08, 0x56, 0xfd, 0xf7, 0xb0, 0xfa, 0x21, 0x68, 0x5a, 0x20,
+ 0x08, 0x56, 0xfd, 0xf7, 0x77, 0xf8, 0x00, 0x20, 0xf8, 0xbd, 0x70, 0xb5, 0x0d, 0x46, 0x03, 0x00,
+ 0x03, 0xf0, 0x4e, 0xfb, 0x06, 0x0e, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x08, 0x24, 0x08, 0xe0,
+ 0x10, 0x24, 0x06, 0xe0, 0x20, 0x24, 0x04, 0xe0, 0x40, 0x24, 0x02, 0xe0, 0x80, 0x24, 0x00, 0xe0,
+ 0x00, 0x24, 0xfd, 0xf7, 0xd3, 0xf9, 0x03, 0x20, 0x00, 0x07, 0x81, 0x8a, 0x1f, 0x21, 0xc9, 0x43,
+ 0x81, 0x82, 0xca, 0x49, 0xea, 0x06, 0x0b, 0x68, 0xd2, 0x0e, 0x0d, 0x25, 0x6d, 0x03, 0x5b, 0x19,
+ 0x5a, 0x85, 0x82, 0x8a, 0xc6, 0x4a, 0x82, 0x82, 0x0d, 0x68, 0x20, 0x23, 0xc5, 0x4a, 0xad, 0x18,
+ 0x2b, 0x84, 0x83, 0x8a, 0x00, 0x23, 0x83, 0x82, 0xc3, 0x4b, 0x0d, 0x68, 0xad, 0x18, 0x6b, 0x84,
+ 0x83, 0x8a, 0xff, 0x23, 0x83, 0x82, 0x09, 0x68, 0x20, 0x02, 0x89, 0x18, 0x88, 0x84, 0x70, 0xbd,
+ 0xf0, 0xb5, 0x03, 0x22, 0xcf, 0x05, 0x12, 0x07, 0xff, 0x0d, 0x96, 0x13, 0xb7, 0x4c, 0xb9, 0x4d,
+ 0x03, 0x00, 0x03, 0xf0, 0x0d, 0xfb, 0x06, 0x44, 0x04, 0x45, 0xb1, 0xb6, 0xbb, 0x44, 0x46, 0x29,
+ 0x01, 0xdd, 0x46, 0x21, 0x01, 0xe0, 0x3f, 0x29, 0x02, 0xdd, 0x08, 0x46, 0x3f, 0x38, 0x00, 0xe0,
+ 0x00, 0x20, 0x93, 0x8a, 0x40, 0xb2, 0x03, 0x23, 0x9b, 0x03, 0x93, 0x82, 0xc3, 0x05, 0x01, 0x26,
+ 0xdb, 0x0d, 0xb6, 0x02, 0x27, 0x68, 0x9e, 0x19, 0x7f, 0x19, 0xfe, 0x82, 0x96, 0x8a, 0xab, 0x4e,
+ 0x96, 0x82, 0x27, 0x68, 0x76, 0x1c, 0x7f, 0x19, 0xfe, 0x82, 0x97, 0x8a, 0x03, 0x27, 0xbf, 0x03,
+ 0x97, 0x82, 0x7f, 0x11, 0xdb, 0x19, 0x27, 0x68, 0x7f, 0x19, 0xfb, 0x82, 0x93, 0x8a, 0x73, 0x1e,
+ 0x93, 0x82, 0x23, 0x68, 0x5b, 0x19, 0xde, 0x82, 0x93, 0x8a, 0x03, 0x23, 0x9b, 0x03, 0x93, 0x82,
+ 0x08, 0x1a, 0xc0, 0x05, 0x21, 0x68, 0xc0, 0x0d, 0xff, 0x30, 0x49, 0x19, 0xff, 0x30, 0x02, 0x30,
+ 0xc8, 0x82, 0x90, 0x8a, 0x70, 0x1e, 0x90, 0x82, 0x20, 0x68, 0x40, 0x19, 0xc6, 0x82, 0xf0, 0xbd,
+ 0x0b, 0x46, 0x1f, 0x33, 0x48, 0x42, 0x3e, 0x2b, 0x06, 0xd9, 0x00, 0x29, 0x01, 0xdb, 0x0b, 0x46,
+ 0x00, 0xe0, 0x03, 0x46, 0x1f, 0x3b, 0x00, 0xe0, 0x00, 0x23, 0x97, 0x8a, 0x5b, 0xb2, 0x03, 0x26,
+ 0xb6, 0x03, 0x96, 0x82, 0xde, 0x05, 0xf6, 0x0d, 0x05, 0x27, 0x7f, 0x02, 0x87, 0x4c, 0xb4, 0x46,
+ 0xf7, 0x19, 0x26, 0x68, 0x76, 0x19, 0xf7, 0x82, 0x97, 0x8a, 0x88, 0x4f, 0x97, 0x82, 0x26, 0x68,
+ 0x7f, 0x1c, 0x76, 0x19, 0xf7, 0x82, 0x97, 0x8a, 0x03, 0x27, 0xbf, 0x03, 0x97, 0x82, 0x66, 0x46,
+ 0x3f, 0x11, 0xf6, 0x19, 0x27, 0x68, 0x7f, 0x19, 0xfe, 0x82, 0x97, 0x8a, 0x7f, 0x4f, 0x97, 0x82,
+ 0x24, 0x68, 0x7f, 0x1c, 0x64, 0x19, 0xe7, 0x82, 0x94, 0x8a, 0x03, 0x24, 0xa4, 0x03, 0x94, 0x82,
+ 0x00, 0x29, 0x00, 0xdb, 0x08, 0x46, 0xc0, 0x1a, 0xc0, 0x05, 0x01, 0x23, 0xc0, 0x0d, 0xdb, 0x02,
+ 0xc3, 0x18, 0x72, 0x48, 0x04, 0x68, 0x64, 0x19, 0xe3, 0x82, 0x93, 0x8a, 0x73, 0x4b, 0x93, 0x82,
+ 0x07, 0x68, 0x5c, 0x1c, 0x7f, 0x19, 0xfc, 0x82, 0x96, 0x8a, 0x03, 0x26, 0xb6, 0x03, 0x96, 0x82,
+ 0x05, 0x26, 0xc9, 0x0f, 0xb6, 0x02, 0x07, 0x68, 0x8e, 0x19, 0x7f, 0x19, 0xfe, 0x82, 0x96, 0x8a,
+ 0x93, 0x82, 0x06, 0x68, 0x76, 0x19, 0xf4, 0x82, 0x96, 0x8a, 0x03, 0x26, 0xb6, 0x03, 0x96, 0x82,
+ 0x0b, 0x26, 0x76, 0x02, 0x89, 0x19, 0x06, 0x68, 0x76, 0x19, 0xf1, 0x82, 0x91, 0x8a, 0x93, 0x82,
+ 0x00, 0x68, 0x40, 0x19, 0xc4, 0x82, 0xf0, 0xbd, 0x90, 0x8a, 0x96, 0x82, 0x07, 0x20, 0x40, 0x02,
+ 0x08, 0xe0, 0x90, 0x8a, 0x96, 0x82, 0x01, 0x20, 0x00, 0x03, 0x03, 0xe0, 0x90, 0x8a, 0x96, 0x82,
+ 0x09, 0x20, 0x40, 0x02, 0x21, 0x68, 0x38, 0x18, 0x49, 0x19, 0xc8, 0x82, 0x90, 0x8a, 0x57, 0x48,
+ 0x90, 0x82, 0x21, 0x68, 0x40, 0x1c, 0x49, 0x19, 0xc8, 0x82, 0xf0, 0xbd, 0x0f, 0xb4, 0xfe, 0xb5,
+ 0x08, 0xaf, 0xbc, 0x7b, 0xfb, 0x7b, 0x3d, 0x7c, 0x7f, 0x7c, 0x26, 0x46, 0x00, 0x2a, 0x01, 0xd1,
+ 0x1c, 0x46, 0x33, 0x46, 0x01, 0x29, 0x02, 0xd0, 0x49, 0x1c, 0x0c, 0xd0, 0x18, 0xe0, 0x07, 0x2c,
+ 0x01, 0xd2, 0x64, 0x1c, 0x0a, 0xe0, 0x00, 0x2b, 0x01, 0xd0, 0x5b, 0x1e, 0xdb, 0xb2, 0xbd, 0x42,
+ 0x0e, 0xd2, 0x6d, 0x1c, 0x0b, 0xe0, 0x00, 0x2c, 0x02, 0xd0, 0x64, 0x1e, 0xe4, 0xb2, 0x07, 0xe0,
+ 0x07, 0x2b, 0x01, 0xd2, 0x5b, 0x1c, 0xdb, 0xb2, 0x00, 0x2d, 0x01, 0xd0, 0x6d, 0x1e, 0xed, 0xb2,
+ 0x69, 0x46, 0x0d, 0x71, 0x00, 0x2a, 0x11, 0xd0, 0x8c, 0x70, 0xcb, 0x70, 0x08, 0xaa, 0x11, 0x7b,
+ 0x6a, 0x46, 0x11, 0x70, 0x08, 0xaa, 0x51, 0x7b, 0x6a, 0x46, 0x51, 0x70, 0x06, 0x22, 0x69, 0x46,
+ 0x03, 0xf0, 0x69, 0xf9, 0xfe, 0xbc, 0x08, 0xbc, 0x04, 0xb0, 0x18, 0x47, 0xcc, 0x70, 0x8b, 0x70,
+ 0xec, 0xe7, 0xfe, 0xb5, 0xd3, 0x1a, 0x2d, 0x4c, 0x2e, 0x4d, 0x5e, 0xb2, 0x01, 0x28, 0x05, 0xd0,
+ 0x02, 0x28, 0x7c, 0xd0, 0x11, 0x46, 0xff, 0xf7, 0xdb, 0xfe, 0xfe, 0xbd, 0x20, 0x68, 0x40, 0x19,
+ 0xc0, 0x8e, 0x6a, 0x46, 0x80, 0x04, 0x40, 0x0f, 0x90, 0x71, 0x20, 0x68, 0x40, 0x19, 0xc0, 0x8e,
+ 0x40, 0x05, 0x40, 0x0f, 0xd0, 0x71, 0x20, 0x68, 0x40, 0x19, 0xc0, 0x8e, 0x80, 0x06, 0x80, 0x0e,
+ 0x10, 0x72, 0x3f, 0x20, 0x50, 0x72, 0x00, 0x29, 0x02, 0xd0, 0x01, 0x29, 0x1d, 0xd1, 0x14, 0xe0,
+ 0x10, 0x89, 0x10, 0x80, 0x01, 0x22, 0x31, 0x46, 0x01, 0xa8, 0x01, 0x9b, 0xff, 0xf7, 0x8e, 0xff,
+ 0x14, 0x48, 0x00, 0x68, 0x80, 0x30, 0x01, 0x7a, 0xc9, 0x06, 0x02, 0xd5, 0x80, 0x7b, 0x80, 0x06,
+ 0x0b, 0xd5, 0x69, 0x46, 0x88, 0x79, 0xc8, 0x71, 0x07, 0xe0, 0x10, 0x89, 0x10, 0x80, 0x00, 0x22,
+ 0x31, 0x46, 0x01, 0xa8, 0x01, 0x9b, 0xff, 0xf7, 0x79, 0xff, 0x03, 0x20, 0x00, 0x07, 0x81, 0x8a,
+ 0x81, 0x13, 0x81, 0x82, 0x6b, 0x46, 0xda, 0x79, 0x01, 0x23, 0x9b, 0x02, 0xd2, 0x18, 0x23, 0x68,
+ 0x5b, 0x19, 0xda, 0x82, 0x82, 0x8a, 0x09, 0x4a, 0x82, 0x82, 0x23, 0x68, 0x56, 0x1c, 0x5b, 0x19,
+ 0xde, 0x82, 0x0d, 0xe0, 0x90, 0x00, 0x00, 0x20, 0xfe, 0xff, 0x00, 0x00, 0x84, 0x00, 0x00, 0x20,
+ 0xd3, 0x8b, 0x00, 0x00, 0x40, 0xa0, 0x01, 0x00, 0x20, 0x20, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00,
+ 0x83, 0x8a, 0x81, 0x82, 0x6b, 0x46, 0x9b, 0x79, 0xc7, 0x14, 0xdb, 0x19, 0x27, 0x68, 0x7f, 0x19,
+ 0xfb, 0x82, 0x83, 0x8a, 0x82, 0x82, 0x23, 0x68, 0x5b, 0x19, 0xde, 0x82, 0x83, 0x8a, 0x81, 0x82,
+ 0x6b, 0x46, 0x19, 0x7a, 0x23, 0x68, 0xff, 0x31, 0x5b, 0x19, 0xff, 0x31, 0x02, 0x31, 0xd9, 0x82,
+ 0x81, 0x8a, 0x82, 0x82, 0x20, 0x68, 0x40, 0x19, 0xc6, 0x82, 0xfe, 0xbd, 0xff, 0xe7, 0x22, 0x68,
+ 0xfe, 0x48, 0x12, 0x18, 0x12, 0x8f, 0x6d, 0x46, 0x52, 0x06, 0xd2, 0x0f, 0x2a, 0x71, 0x22, 0x68,
+ 0x12, 0x18, 0x12, 0x8f, 0x92, 0x06, 0xd2, 0x0f, 0x6a, 0x71, 0x22, 0x68, 0x12, 0x18, 0x12, 0x8f,
+ 0x92, 0x04, 0x53, 0x0f, 0xab, 0x71, 0x22, 0x68, 0x12, 0x18, 0x12, 0x8f, 0x52, 0x05, 0x52, 0x0f,
+ 0xea, 0x71, 0x25, 0x68, 0x28, 0x18, 0x00, 0x8f, 0x6d, 0x46, 0xc0, 0x06, 0xc0, 0x0e, 0x28, 0x72,
+ 0x1f, 0x27, 0x6f, 0x72, 0x00, 0x25, 0x00, 0x29, 0x02, 0xd0, 0x01, 0x29, 0x44, 0xd1, 0x28, 0xe0,
+ 0xc3, 0x42, 0x04, 0xd1, 0x70, 0x1c, 0x02, 0xd1, 0x01, 0x20, 0x69, 0x46, 0x08, 0x71, 0x6a, 0x46,
+ 0x10, 0x79, 0x40, 0x00, 0x40, 0x42, 0x40, 0x1c, 0x70, 0x43, 0x41, 0xb2, 0x10, 0x89, 0x10, 0x80,
+ 0x01, 0x22, 0x01, 0xa8, 0x01, 0x9b, 0xff, 0xf7, 0xf9, 0xfe, 0x6a, 0x46, 0x91, 0x79, 0x10, 0x7a,
+ 0xc1, 0x42, 0x00, 0xd1, 0x15, 0x71, 0xde, 0x48, 0x00, 0x68, 0x80, 0x30, 0x02, 0x7a, 0xd2, 0x06,
+ 0x02, 0xd5, 0x80, 0x7b, 0x40, 0x06, 0x1f, 0xd5, 0x6a, 0x46, 0xd1, 0x71, 0x10, 0x79, 0x50, 0x71,
+ 0x1a, 0xe0, 0xc2, 0x42, 0x04, 0xd1, 0x70, 0x1c, 0x02, 0xd1, 0x01, 0x20, 0x69, 0x46, 0x48, 0x71,
+ 0x6a, 0x46, 0x50, 0x79, 0x40, 0x00, 0x40, 0x42, 0x40, 0x1c, 0x70, 0x43, 0x41, 0xb2, 0x10, 0x89,
+ 0x10, 0x80, 0x00, 0x22, 0x01, 0xa8, 0x01, 0x9b, 0xff, 0xf7, 0xd0, 0xfe, 0x6a, 0x46, 0xd0, 0x79,
+ 0x11, 0x7a, 0xc8, 0x42, 0x00, 0xd1, 0x55, 0x71, 0x03, 0x20, 0x00, 0x07, 0x81, 0x8a, 0x82, 0x13,
+ 0x82, 0x82, 0x6e, 0x46, 0xf1, 0x79, 0x05, 0x23, 0x5b, 0x02, 0x25, 0x68, 0xcb, 0x18, 0xc3, 0x49,
+ 0x6d, 0x18, 0xeb, 0x82, 0x83, 0x8a, 0xc3, 0x4b, 0x83, 0x82, 0x26, 0x68, 0x5d, 0x1c, 0x76, 0x18,
+ 0xf5, 0x82, 0x86, 0x8a, 0x82, 0x82, 0x6e, 0x46, 0xb6, 0x79, 0x87, 0x14, 0xf6, 0x19, 0x27, 0x68,
+ 0x7f, 0x18, 0xfe, 0x82, 0x86, 0x8a, 0x83, 0x82, 0x26, 0x68, 0x76, 0x18, 0xf5, 0x82, 0x86, 0x8a,
+ 0x82, 0x82, 0x6e, 0x46, 0x36, 0x7a, 0x2f, 0x11, 0xf6, 0x19, 0x27, 0x68, 0x7f, 0x18, 0xfe, 0x82,
+ 0x86, 0x8a, 0x83, 0x82, 0x26, 0x68, 0x76, 0x18, 0xf5, 0x82, 0x86, 0x8a, 0x82, 0x82, 0x6e, 0x46,
+ 0x36, 0x79, 0x05, 0x27, 0xbf, 0x02, 0xf6, 0x19, 0x27, 0x68, 0x7f, 0x18, 0xfe, 0x82, 0x86, 0x8a,
+ 0x83, 0x82, 0x26, 0x68, 0x76, 0x18, 0xf5, 0x82, 0x86, 0x8a, 0x82, 0x82, 0x6e, 0x46, 0x72, 0x79,
+ 0x0b, 0x26, 0x76, 0x02, 0x92, 0x19, 0x26, 0x68, 0x76, 0x18, 0xf2, 0x82, 0x82, 0x8a, 0x83, 0x82,
+ 0x20, 0x68, 0x40, 0x18, 0xc5, 0x82, 0x40, 0xe7, 0xa3, 0x48, 0x00, 0x68, 0x9f, 0x49, 0x40, 0x18,
+ 0x80, 0x8e, 0x80, 0x06, 0x80, 0x0e, 0x70, 0x47, 0xf3, 0xb5, 0x9d, 0x48, 0x87, 0xb0, 0x00, 0x68,
+ 0x05, 0x90, 0x40, 0x30, 0x04, 0x90, 0xc0, 0x7c, 0x98, 0x4e, 0x01, 0x28, 0x1a, 0xd0, 0x05, 0x98,
+ 0x80, 0x30, 0x01, 0x7a, 0xc9, 0x06, 0x1b, 0xd5, 0x07, 0x99, 0x01, 0x29, 0x02, 0xd0, 0x02, 0x29,
+ 0x03, 0xd0, 0x15, 0xe0, 0x80, 0x7b, 0x80, 0x06, 0x01, 0xe0, 0x80, 0x7b, 0x40, 0x06, 0x00, 0x28,
+ 0x0e, 0xdb, 0x08, 0x98, 0x00, 0x28, 0x05, 0xd0, 0x8f, 0x48, 0x00, 0x68, 0x81, 0x19, 0x2c, 0x20,
+ 0x08, 0x5e, 0x0a, 0xe0, 0x8c, 0x48, 0x00, 0x68, 0x81, 0x19, 0x28, 0x20, 0x08, 0x5e, 0x04, 0xe0,
+ 0x89, 0x48, 0x00, 0x68, 0x81, 0x19, 0x30, 0x20, 0x08, 0x5e, 0x07, 0x99, 0x0e, 0x22, 0xd2, 0x43,
+ 0x0b, 0x00, 0x03, 0xf0, 0x7d, 0xf8, 0x06, 0x6c, 0x04, 0x1b, 0x52, 0x5c, 0x63, 0x6c, 0x08, 0x99,
+ 0x81, 0x4a, 0x00, 0x29, 0x11, 0x68, 0x0d, 0xd0, 0x89, 0x19, 0xc9, 0x8e, 0x09, 0x0a, 0x49, 0x07,
+ 0x12, 0x68, 0x49, 0x0f, 0x92, 0x19, 0xd2, 0x8e, 0x00, 0x24, 0x92, 0x06, 0x92, 0x0e, 0x8f, 0x18,
+ 0x46, 0x25, 0x55, 0xe0, 0x89, 0x19, 0xc9, 0x8e, 0xc9, 0x0a, 0xf0, 0xe7, 0x08, 0x99, 0x00, 0x29,
+ 0x75, 0x49, 0x0a, 0x68, 0x13, 0xd0, 0x92, 0x19, 0x12, 0x8f, 0x52, 0x09, 0xd2, 0x07, 0xd2, 0x0f,
+ 0x0a, 0x68, 0x1b, 0xd0, 0x92, 0x19, 0x12, 0x8f, 0x12, 0x0a, 0x52, 0x07, 0x09, 0x68, 0x52, 0x0f,
+ 0x89, 0x19, 0x09, 0x8f, 0xc9, 0x06, 0xc9, 0x0e, 0x51, 0x18, 0x4f, 0x42, 0x19, 0xe0, 0x92, 0x19,
+ 0x12, 0x8f, 0x92, 0x09, 0xd2, 0x07, 0xd2, 0x0f, 0x0a, 0x68, 0x03, 0xd0, 0x92, 0x19, 0x12, 0x8f,
+ 0xd2, 0x0a, 0xea, 0xe7, 0x92, 0x19, 0x12, 0x8f, 0xd2, 0x0a, 0x02, 0xe0, 0x92, 0x19, 0x12, 0x8f,
+ 0x12, 0x0a, 0x52, 0x07, 0x09, 0x68, 0x52, 0x0f, 0x89, 0x19, 0x09, 0x8f, 0xc9, 0x06, 0xc9, 0x0e,
+ 0x57, 0x18, 0x25, 0x24, 0xe4, 0x43, 0x26, 0x25, 0x1a, 0xe0, 0x5b, 0x49, 0x09, 0x68, 0x89, 0x19,
+ 0x49, 0x8f, 0x1e, 0x24, 0x89, 0x06, 0x8f, 0x16, 0xe4, 0x43, 0x1f, 0x25, 0x10, 0xe0, 0x56, 0x49,
+ 0x09, 0x68, 0x89, 0x19, 0x49, 0x8f, 0x49, 0x05, 0xcf, 0x16, 0x05, 0xe0, 0x52, 0x49, 0x09, 0x68,
+ 0x8b, 0x19, 0x3a, 0x21, 0x59, 0x5e, 0xcf, 0x12, 0x14, 0x46, 0x0f, 0x25, 0x00, 0xe0, 0x00, 0x27,
+ 0x04, 0x99, 0x00, 0x2f, 0x4f, 0x76, 0x02, 0xd0, 0x03, 0xdb, 0x01, 0x21, 0x03, 0xe0, 0x00, 0x21,
+ 0x01, 0xe0, 0x00, 0x21, 0xc9, 0x43, 0x40, 0x1a, 0x00, 0xb2, 0x03, 0x90, 0x04, 0x98, 0x40, 0x7d,
+ 0x00, 0x28, 0x15, 0xd0, 0x00, 0x20, 0xc0, 0x43, 0x00, 0x94, 0x02, 0x90, 0x05, 0x98, 0x01, 0x95,
+ 0x20, 0x23, 0xc3, 0x5e, 0x04, 0x98, 0x18, 0x22, 0x82, 0x56, 0x38, 0x46, 0x03, 0x99, 0xff, 0xf7,
+ 0x32, 0xf9, 0x07, 0x46, 0x3a, 0x48, 0x6c, 0x21, 0x00, 0x68, 0x09, 0x5c, 0x40, 0x30, 0xc1, 0x75,
+ 0x07, 0x98, 0x01, 0x28, 0x0b, 0xd1, 0xa7, 0x42, 0x04, 0xd1, 0x03, 0x99, 0x48, 0x1c, 0x01, 0xda,
+ 0x01, 0x21, 0x00, 0xe0, 0x00, 0x21, 0x32, 0x48, 0x00, 0x68, 0x80, 0x30, 0x41, 0x71, 0x30, 0x48,
+ 0x00, 0x68, 0x40, 0x30, 0x81, 0x7d, 0x01, 0x29, 0x02, 0xd0, 0x00, 0x7d, 0x03, 0x28, 0x06, 0xd1,
+ 0x07, 0x98, 0x01, 0x28, 0x04, 0xd0, 0x02, 0x28, 0x05, 0xd0, 0x03, 0x28, 0x03, 0xd0, 0x96, 0xe0,
+ 0xaf, 0x42, 0x04, 0xd0, 0x93, 0xe0, 0xaf, 0x42, 0x01, 0xd0, 0xa7, 0x42, 0x7e, 0xd1, 0x03, 0x20,
+ 0x00, 0x07, 0x81, 0x8a, 0x01, 0x21, 0xc9, 0x43, 0x81, 0x82, 0x23, 0x4c, 0x01, 0x20, 0x21, 0x68,
+ 0x0d, 0x22, 0x52, 0x03, 0x89, 0x18, 0x48, 0x86, 0x01, 0x46, 0x1c, 0x20, 0x02, 0xf0, 0xda, 0xfe,
+ 0x08, 0x98, 0x00, 0x28, 0x20, 0x68, 0x1e, 0xd0, 0x80, 0x19, 0xc0, 0x8e, 0x21, 0x68, 0x40, 0x05,
+ 0x40, 0x0f, 0x89, 0x19, 0xc9, 0x8e, 0x89, 0x06, 0x89, 0x0e, 0x41, 0x18, 0x20, 0x68, 0x80, 0x19,
+ 0x00, 0x8f, 0x40, 0x09, 0xc0, 0x07, 0xc0, 0x0f, 0x20, 0x68, 0x2f, 0xd0, 0x80, 0x19, 0x00, 0x8f,
+ 0x00, 0x0a, 0x40, 0x07, 0x22, 0x68, 0x40, 0x0f, 0x92, 0x19, 0x12, 0x8f, 0xd2, 0x06, 0xd2, 0x0e,
+ 0x80, 0x18, 0x40, 0x42, 0x2d, 0xe0, 0x80, 0x19, 0xc0, 0x8e, 0x21, 0x68, 0x80, 0x04, 0x40, 0x0f,
+ 0x89, 0x19, 0xc9, 0x8e, 0x89, 0x06, 0x89, 0x0e, 0x41, 0x18, 0x20, 0x68, 0x80, 0x19, 0x00, 0x8f,
+ 0x80, 0x09, 0xc0, 0x07, 0xc0, 0x0f, 0x20, 0x68, 0x0c, 0xd0, 0x07, 0xe0, 0x40, 0xa0, 0x01, 0x00,
+ 0x90, 0x00, 0x00, 0x20, 0xff, 0x7f, 0x00, 0x00, 0x84, 0x00, 0x00, 0x20, 0x80, 0x19, 0x00, 0x8f,
+ 0xc0, 0x0a, 0xd6, 0xe7, 0x80, 0x19, 0x00, 0x8f, 0xc0, 0x0a, 0x02, 0xe0, 0x80, 0x19, 0x00, 0x8f,
+ 0x00, 0x0a, 0x40, 0x07, 0x22, 0x68, 0x40, 0x0f, 0x92, 0x19, 0x12, 0x8f, 0xd2, 0x06, 0xd2, 0x0e,
+ 0x80, 0x18, 0x00, 0x06, 0x00, 0x0c, 0x01, 0x43, 0x20, 0x68, 0x80, 0x19, 0x40, 0x8f, 0x03, 0x25,
+ 0x80, 0x06, 0x80, 0x16, 0x00, 0x06, 0x00, 0x0a, 0x01, 0x43, 0x01, 0x91, 0x00, 0x23, 0x2a, 0x46,
+ 0x00, 0x95, 0x12, 0x21, 0x01, 0x20, 0x02, 0xf0, 0xff, 0xfd, 0xff, 0xf7, 0x8d, 0xfe, 0x21, 0x68,
+ 0x00, 0x02, 0xfe, 0x4a, 0x89, 0x18, 0x49, 0x88, 0x09, 0x07, 0x00, 0xe0, 0x0f, 0xe0, 0x09, 0x0f,
+ 0x08, 0x43, 0xfb, 0x49, 0x00, 0x23, 0x09, 0x68, 0x03, 0x22, 0x40, 0x31, 0xc9, 0x7b, 0x00, 0x95,
+ 0x09, 0x04, 0x08, 0x43, 0x01, 0x90, 0x13, 0x21, 0x01, 0x20, 0x02, 0xf0, 0xe5, 0xfd, 0xf4, 0x4c,
+ 0x20, 0x68, 0x40, 0x30, 0xc1, 0x7c, 0x01, 0x29, 0x11, 0xd0, 0x19, 0x23, 0xc3, 0x56, 0x3a, 0x46,
+ 0x08, 0x99, 0x07, 0x98, 0xff, 0xf7, 0x25, 0xfd, 0x20, 0x68, 0x03, 0x99, 0x01, 0x84, 0x40, 0x30,
+ 0x41, 0x7e, 0x01, 0x76, 0x41, 0x7d, 0x49, 0x1c, 0x41, 0x75, 0x09, 0xb0, 0xf0, 0xbd, 0x39, 0x46,
+ 0x07, 0x98, 0xff, 0xf7, 0xfd, 0xfb, 0xef, 0xe7, 0x10, 0xb5, 0x03, 0x21, 0x09, 0x07, 0x8a, 0x8a,
+ 0x8a, 0x13, 0x8a, 0x82, 0xc0, 0x05, 0x17, 0x22, 0xc0, 0x0d, 0x52, 0x02, 0x83, 0x18, 0xe1, 0x4a,
+ 0x14, 0x68, 0xde, 0x48, 0x40, 0x38, 0x24, 0x18, 0xe3, 0x82, 0x8b, 0x8a, 0xde, 0x4b, 0x8b, 0x82,
+ 0x12, 0x68, 0x59, 0x1c, 0x10, 0x18, 0xc1, 0x82, 0x10, 0xbd, 0xfe, 0xb5, 0xd8, 0x48, 0xd7, 0x4f,
+ 0x01, 0x68, 0x3e, 0x23, 0x08, 0x46, 0x40, 0x30, 0xc4, 0x7c, 0xdb, 0x43, 0x3f, 0x22, 0x01, 0x25,
+ 0x40, 0x3f, 0xd4, 0x4e, 0x00, 0x2c, 0x01, 0xd0, 0x01, 0x2c, 0x21, 0xd0, 0x34, 0x68, 0xe7, 0x19,
+ 0x30, 0x24, 0x3c, 0x5f, 0x36, 0x68, 0xd1, 0x4f, 0xf6, 0x19, 0xf6, 0x89, 0x02, 0x95, 0x00, 0x93,
+ 0x01, 0x92, 0x76, 0x06, 0x20, 0x23, 0x18, 0x22, 0x77, 0x16, 0xcb, 0x5e, 0x82, 0x56, 0xc8, 0x4d,
+ 0x21, 0x46, 0x38, 0x46, 0xff, 0xf7, 0x17, 0xf8, 0x06, 0x46, 0x28, 0x68, 0x01, 0x46, 0x40, 0x31,
+ 0x0f, 0x76, 0x04, 0x84, 0x60, 0x30, 0x02, 0x7b, 0xca, 0x75, 0x01, 0x2a, 0x05, 0xd0, 0x10, 0xe0,
+ 0x34, 0x68, 0xe7, 0x19, 0x2c, 0x24, 0x3c, 0x5f, 0xdc, 0xe7, 0x82, 0x7a, 0x06, 0x21, 0x40, 0x20,
+ 0xfe, 0xf7, 0x75, 0xff, 0x28, 0x68, 0x06, 0x21, 0x60, 0x30, 0xc2, 0x7a, 0x40, 0x20, 0xfe, 0xf7,
+ 0x78, 0xff, 0x30, 0x46, 0xff, 0xf7, 0xa0, 0xff, 0x3e, 0x36, 0x28, 0x68, 0x7c, 0x2e, 0x04, 0xd9,
+ 0x40, 0x30, 0xc1, 0x79, 0x02, 0x22, 0x11, 0x43, 0x03, 0xe0, 0x40, 0x30, 0xc1, 0x79, 0xfd, 0x22,
+ 0x11, 0x40, 0xc1, 0x71, 0x29, 0xe5, 0x10, 0xb5, 0xad, 0x4c, 0x4a, 0x21, 0x20, 0x68, 0x09, 0x5c,
+ 0x0a, 0x29, 0x16, 0xd0, 0x80, 0x30, 0x40, 0x7b, 0x80, 0x07, 0x1d, 0xd4, 0x00, 0x20, 0xff, 0xf7,
+ 0x83, 0xff, 0x20, 0x68, 0x40, 0x30, 0xc0, 0x7c, 0x01, 0x28, 0x15, 0xd8, 0xff, 0xf7, 0xfc, 0xf9,
+ 0x10, 0x20, 0xfe, 0xf7, 0x58, 0xff, 0xfc, 0xf7, 0x82, 0xfb, 0x20, 0x68, 0x0a, 0x21, 0x40, 0x30,
+ 0x81, 0x72, 0xfc, 0xf7, 0xc4, 0xfb, 0x00, 0x28, 0x08, 0xd0, 0xff, 0xf7, 0x86, 0xff, 0x20, 0x68,
+ 0x40, 0x30, 0xc0, 0x7d, 0x00, 0x28, 0xee, 0xd0, 0x00, 0x20, 0x10, 0xbd, 0x02, 0x20, 0x10, 0xbd,
+ 0x10, 0xb5, 0x97, 0x4c, 0x20, 0x68, 0x01, 0x46, 0x40, 0x30, 0x82, 0x7a, 0x0e, 0x2a, 0x11, 0xd0,
+ 0x80, 0x31, 0x49, 0x7b, 0x89, 0x07, 0x18, 0xd4, 0xc0, 0x7c, 0x01, 0x28, 0x15, 0xd8, 0xff, 0xf7,
+ 0xd3, 0xf9, 0x10, 0x20, 0xfe, 0xf7, 0x2f, 0xff, 0xfc, 0xf7, 0x59, 0xfb, 0x20, 0x68, 0x0e, 0x21,
+ 0x40, 0x30, 0x81, 0x72, 0xfc, 0xf7, 0x9b, 0xfb, 0x00, 0x28, 0x0c, 0xd0, 0xff, 0xf7, 0x5d, 0xff,
+ 0x20, 0x68, 0x40, 0x30, 0xc0, 0x7d, 0x00, 0x28, 0xee, 0xd0, 0x20, 0x68, 0x2f, 0x21, 0x40, 0x30,
+ 0x81, 0x72, 0x00, 0x20, 0x10, 0xbd, 0x02, 0x20, 0x10, 0xbd, 0x10, 0xb5, 0x1f, 0x28, 0x01, 0xd9,
+ 0x1f, 0x20, 0x03, 0xe0, 0x41, 0xb2, 0x00, 0x29, 0x00, 0xda, 0x00, 0x20, 0xfe, 0xf7, 0x1c, 0xfc,
+ 0x10, 0xbd, 0x10, 0xb5, 0x04, 0x46, 0xfc, 0xf7, 0xd1, 0xfc, 0x03, 0x21, 0x09, 0x07, 0x88, 0x8a,
+ 0x1f, 0x20, 0xc0, 0x43, 0x88, 0x82, 0x77, 0x48, 0xe2, 0x06, 0x03, 0x68, 0xd2, 0x0e, 0x0d, 0x24,
+ 0x64, 0x03, 0x1b, 0x19, 0x5a, 0x85, 0x8a, 0x8a, 0x75, 0x4a, 0x8a, 0x82, 0x75, 0x4b, 0x04, 0x68,
+ 0x6e, 0x4a, 0x40, 0x3a, 0xa4, 0x18, 0x23, 0x84, 0x8b, 0x8a, 0x00, 0x23, 0x8b, 0x82, 0x72, 0x4b,
+ 0x04, 0x68, 0xa4, 0x18, 0x63, 0x84, 0x8b, 0x8a, 0xff, 0x23, 0x8b, 0x82, 0x01, 0x21, 0x00, 0x68,
+ 0x89, 0x02, 0x80, 0x18, 0x81, 0x84, 0x10, 0xbd, 0x10, 0xb5, 0x04, 0x46, 0xfc, 0xf7, 0xa6, 0xfc,
+ 0x03, 0x21, 0x09, 0x07, 0x88, 0x8a, 0x1f, 0x20, 0xc0, 0x43, 0x88, 0x82, 0x61, 0x48, 0xe2, 0x06,
+ 0x03, 0x68, 0xd2, 0x0e, 0x0d, 0x24, 0x64, 0x03, 0x1b, 0x19, 0x5a, 0x85, 0x8a, 0x8a, 0x63, 0x4a,
+ 0x8a, 0x82, 0x09, 0x23, 0x04, 0x68, 0x9b, 0x02, 0x58, 0x4a, 0x40, 0x3a, 0xa4, 0x18, 0x23, 0x84,
+ 0x8b, 0x8a, 0x00, 0x23, 0x8b, 0x82, 0x5c, 0x4b, 0x04, 0x68, 0x40, 0x33, 0xa4, 0x18, 0x63, 0x84,
+ 0x8b, 0x8a, 0xff, 0x23, 0x8b, 0x82, 0x07, 0x21, 0x00, 0x68, 0xc9, 0x02, 0x80, 0x18, 0x81, 0x84,
+ 0x10, 0xbd, 0x70, 0xb5, 0x04, 0x46, 0xfc, 0xf7, 0x79, 0xfc, 0x03, 0x21, 0x09, 0x07, 0x88, 0x8a,
+ 0x1f, 0x20, 0xc0, 0x43, 0x88, 0x82, 0x4b, 0x48, 0xe3, 0x06, 0x04, 0x68, 0xdb, 0x0e, 0x0d, 0x22,
+ 0x52, 0x03, 0xa4, 0x18, 0x63, 0x85, 0x8b, 0x8a, 0x47, 0x4b, 0x8b, 0x82, 0x04, 0x68, 0x5b, 0x1c,
+ 0x42, 0x4d, 0x40, 0x3d, 0x64, 0x19, 0x23, 0x84, 0x8b, 0x8a, 0x80, 0x23, 0xdb, 0x43, 0x8b, 0x82,
+ 0x00, 0x68, 0x80, 0x21, 0x80, 0x18, 0x01, 0x84, 0x70, 0xbd, 0x10, 0xb5, 0x3d, 0x4a, 0x10, 0x68,
+ 0x3a, 0x4b, 0x40, 0x3b, 0xc0, 0x18, 0x00, 0x8f, 0x11, 0x68, 0x80, 0x04, 0x40, 0x0f, 0xc9, 0x18,
+ 0x09, 0x8f, 0xc9, 0x06, 0xc9, 0x0e, 0x41, 0x18, 0x10, 0x68, 0xc0, 0x18, 0x00, 0x8f, 0x80, 0x09,
+ 0xc0, 0x07, 0xc0, 0x0f, 0x00, 0xd0, 0x49, 0x42, 0x10, 0x68, 0xc0, 0x18, 0x00, 0x8f, 0x14, 0x68,
+ 0x40, 0x05, 0x40, 0x0f, 0xe4, 0x18, 0x24, 0x8f, 0x12, 0x68, 0xe4, 0x06, 0xe4, 0x0e, 0x00, 0x19,
+ 0xd2, 0x18, 0x12, 0x8f, 0x52, 0x09, 0xd2, 0x07, 0xd2, 0x0f, 0x00, 0xd0, 0x40, 0x42, 0x08, 0x18,
+ 0x40, 0x10, 0x11, 0x38, 0x10, 0xbd, 0xf0, 0xb5, 0x03, 0x20, 0x00, 0x07, 0x81, 0x8a, 0x2c, 0x49,
+ 0x81, 0x82, 0x24, 0x4a, 0x81, 0x13, 0x14, 0x68, 0x20, 0x4b, 0x40, 0x3b, 0xe4, 0x18, 0x21, 0x80,
+ 0x81, 0x8a, 0x28, 0x4e, 0x86, 0x82, 0x1e, 0x49, 0x09, 0x68, 0x80, 0x31, 0x0c, 0x7a, 0xe4, 0x06,
+ 0x02, 0xd5, 0x8c, 0x7b, 0xa4, 0x06, 0x01, 0xd5, 0x01, 0x24, 0x00, 0xe0, 0x00, 0x24, 0x01, 0x25,
+ 0x64, 0x00, 0xad, 0x02, 0x17, 0x68, 0x64, 0x19, 0xff, 0x18, 0x7c, 0x80, 0x84, 0x8a, 0x86, 0x82,
+ 0x0c, 0x7a, 0xe4, 0x06, 0x02, 0xd5, 0x89, 0x7b, 0x49, 0x06, 0x01, 0xd5, 0x01, 0x21, 0x00, 0xe0,
+ 0x00, 0x21, 0x49, 0x00, 0x14, 0x68, 0x49, 0x19, 0xe4, 0x18, 0xa1, 0x80, 0x81, 0x8a, 0x15, 0x49,
+ 0x89, 0x1c, 0x81, 0x82, 0x14, 0x68, 0xe4, 0x18, 0xe5, 0x80, 0x84, 0x8a, 0x81, 0x82, 0x14, 0x68,
+ 0xe4, 0x18, 0x25, 0x81, 0x84, 0x8a, 0x81, 0x82, 0x11, 0x68, 0xc9, 0x18, 0x4d, 0x81, 0x81, 0x8a,
+ 0x0d, 0x49, 0x81, 0x82, 0x08, 0x48, 0x11, 0x68, 0xc9, 0x18, 0x17, 0xe0, 0x80, 0xa0, 0x01, 0x00,
+ 0x90, 0x00, 0x00, 0x20, 0x84, 0x00, 0x00, 0x20, 0xff, 0x7f, 0x00, 0x00, 0x80, 0xa2, 0x01, 0x00,
+ 0xf3, 0x8f, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0xf3, 0x8b, 0x00, 0x00,
+ 0xff, 0x3f, 0x00, 0x00, 0xfd, 0x93, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0x88, 0x81, 0xf0, 0xbd,
+ 0x70, 0xb5, 0x03, 0x21, 0x09, 0x07, 0x8a, 0x8a, 0xfb, 0x4a, 0x8a, 0x82, 0x82, 0x02, 0xfb, 0x48,
+ 0x04, 0x68, 0x0d, 0x23, 0x5b, 0x03, 0xe4, 0x18, 0x22, 0x85, 0x8a, 0x8a, 0xf8, 0x4a, 0x8a, 0x82,
+ 0x06, 0x68, 0x00, 0x25, 0xf7, 0x4c, 0x36, 0x19, 0x75, 0x80, 0xf7, 0x4d, 0x2d, 0x68, 0x80, 0x35,
+ 0xad, 0x7b, 0xed, 0x07, 0x0d, 0xd1, 0x8d, 0x8a, 0x8a, 0x82, 0x05, 0x68, 0x52, 0x1c, 0x2c, 0x19,
+ 0x62, 0x80, 0x8a, 0x8a, 0x40, 0x22, 0xd2, 0x43, 0x8a, 0x82, 0x00, 0x68, 0x40, 0x21, 0xc0, 0x18,
+ 0x01, 0x84, 0x70, 0xbd, 0xf0, 0xb5, 0x03, 0x21, 0x09, 0x07, 0x8a, 0x8a, 0xe6, 0x4a, 0x8a, 0x82,
+ 0x82, 0x02, 0xe6, 0x48, 0x03, 0x68, 0x0d, 0x27, 0x7f, 0x03, 0xdb, 0x19, 0x1a, 0x85, 0x8a, 0x8a,
+ 0xe3, 0x4a, 0x8a, 0x82, 0x05, 0x68, 0x00, 0x24, 0xe2, 0x4b, 0xed, 0x18, 0x6c, 0x80, 0x8d, 0x8a,
+ 0x8a, 0x82, 0x05, 0x68, 0xed, 0x18, 0xac, 0x80, 0x8d, 0x8a, 0x8a, 0x82, 0x05, 0x68, 0xed, 0x18,
+ 0xec, 0x80, 0x8d, 0x8a, 0x8a, 0x82, 0x05, 0x68, 0xed, 0x18, 0x2c, 0x81, 0x8d, 0x8a, 0x8a, 0x82,
+ 0x05, 0x68, 0xed, 0x18, 0x6c, 0x81, 0xd8, 0x4c, 0x24, 0x68, 0x80, 0x34, 0xa5, 0x7b, 0xee, 0x07,
+ 0xd6, 0x4d, 0x04, 0xd1, 0x8e, 0x8a, 0x8a, 0x82, 0x06, 0x68, 0xf6, 0x18, 0x75, 0x80, 0xa6, 0x7b,
+ 0xb6, 0x07, 0x04, 0xd4, 0x8e, 0x8a, 0x8a, 0x82, 0x06, 0x68, 0xf6, 0x18, 0xb5, 0x80, 0xa4, 0x7b,
+ 0x64, 0x07, 0x04, 0xd4, 0x8c, 0x8a, 0x8a, 0x82, 0x02, 0x68, 0xd2, 0x18, 0xd5, 0x80, 0x8a, 0x8a,
+ 0x40, 0x22, 0xd2, 0x43, 0x8a, 0x82, 0x00, 0x68, 0x40, 0x21, 0xc0, 0x19, 0x01, 0x84, 0xf0, 0xbd,
+ 0xfe, 0xb5, 0xc5, 0x4e, 0xc1, 0x4a, 0x30, 0x68, 0xc2, 0x49, 0x04, 0x46, 0x40, 0x30, 0xc3, 0x7c,
+ 0x12, 0x68, 0x01, 0x2b, 0x28, 0xd0, 0x51, 0x18, 0x09, 0x8e, 0x25, 0x46, 0xe1, 0x83, 0x60, 0x35,
+ 0x29, 0x78, 0xa1, 0x84, 0x61, 0x8c, 0x01, 0x22, 0x1f, 0x23, 0x49, 0xb2, 0x01, 0x93, 0x02, 0x92,
+ 0x00, 0x91, 0x18, 0x22, 0x82, 0x56, 0x20, 0x23, 0x1e, 0x21, 0x00, 0x20, 0xe3, 0x5e, 0x61, 0x5e,
+ 0x28, 0x56, 0xfe, 0xf7, 0xd8, 0xfd, 0x31, 0x68, 0xc0, 0xb2, 0x0a, 0x46, 0x60, 0x32, 0x10, 0x70,
+ 0x13, 0x46, 0x20, 0x3a, 0x8d, 0x8c, 0x14, 0x46, 0x15, 0x76, 0x1a, 0x7b, 0xe2, 0x75, 0xca, 0x8b,
+ 0x0a, 0x84, 0xff, 0xf7, 0x3a, 0xfe, 0xdd, 0xe5, 0x51, 0x18, 0x09, 0x8d, 0xd5, 0xe7, 0xfe, 0xb5,
+ 0xa9, 0x4e, 0xa6, 0x4a, 0x31, 0x68, 0xa7, 0x4b, 0x0c, 0x46, 0x40, 0x31, 0xcd, 0x7c, 0x12, 0x68,
+ 0x01, 0x2d, 0x2d, 0xd0, 0xd2, 0x18, 0x12, 0x8e, 0x1f, 0x23, 0x10, 0x18, 0xe0, 0x83, 0x61, 0x22,
+ 0x10, 0x57, 0x20, 0x85, 0x00, 0x22, 0xd2, 0x43, 0x00, 0x25, 0x01, 0x93, 0x02, 0x92, 0x00, 0x95,
+ 0x18, 0x22, 0x8a, 0x56, 0x20, 0x23, 0x1e, 0x21, 0xe3, 0x5e, 0x61, 0x5e, 0xfe, 0xf7, 0xa3, 0xfd,
+ 0x31, 0x68, 0x0a, 0x46, 0x60, 0x32, 0x50, 0x70, 0x13, 0x46, 0x20, 0x3a, 0x0c, 0x8d, 0x17, 0x46,
+ 0x14, 0x76, 0x1a, 0x7b, 0xfa, 0x75, 0xca, 0x8b, 0x0a, 0x84, 0xfc, 0xf7, 0x73, 0xf9, 0x30, 0x68,
+ 0x6a, 0x21, 0x09, 0x5c, 0x00, 0x29, 0x06, 0xd0, 0x01, 0x21, 0x80, 0x30, 0x41, 0x72, 0xa1, 0xe5,
+ 0xd2, 0x18, 0x12, 0x8d, 0xd0, 0xe7, 0x80, 0x30, 0x45, 0x72, 0x9b, 0xe5, 0xfe, 0xb5, 0x87, 0x48,
+ 0x01, 0x68, 0x88, 0x48, 0x40, 0x30, 0x08, 0x18, 0x40, 0x88, 0x87, 0x4c, 0x02, 0x07, 0x20, 0x68,
+ 0x12, 0x0f, 0x07, 0x46, 0x60, 0x37, 0xba, 0x70, 0x82, 0x84, 0x2a, 0x21, 0x41, 0x5e, 0x01, 0x25,
+ 0x0b, 0x1d, 0x08, 0x2b, 0x03, 0xd8, 0x56, 0x23, 0x1b, 0x5c, 0x01, 0x2b, 0x22, 0xd0, 0x00, 0x22,
+ 0xd2, 0x43, 0x0f, 0x23, 0x00, 0x26, 0x01, 0x93, 0x02, 0x92, 0x00, 0x96, 0x2c, 0x23, 0xc3, 0x5e,
+ 0x04, 0x22, 0x02, 0x20, 0xba, 0x56, 0x38, 0x56, 0xfe, 0xf7, 0x5d, 0xfd, 0x22, 0x68, 0xc1, 0xb2,
+ 0x10, 0x46, 0x60, 0x30, 0x81, 0x70, 0x92, 0x8c, 0xd2, 0xb2, 0x02, 0x71, 0x03, 0x7b, 0x01, 0x2b,
+ 0x01, 0xd0, 0x86, 0x71, 0x08, 0xe0, 0x91, 0x42, 0x01, 0xd1, 0x85, 0x71, 0x04, 0xe0, 0x02, 0x21,
+ 0x81, 0x71, 0x01, 0xe0, 0x3a, 0x71, 0xbd, 0x71, 0x20, 0x68, 0x41, 0x8d, 0x81, 0x85, 0x56, 0x21,
+ 0x09, 0x5c, 0x01, 0x29, 0x06, 0xd1, 0x01, 0x46, 0x60, 0x31, 0x8a, 0x79, 0x01, 0x2a, 0x01, 0xd0,
+ 0x02, 0x22, 0x8a, 0x71, 0x03, 0x21, 0x09, 0x07, 0x8a, 0x8a, 0x0f, 0x22, 0xd2, 0x43, 0x8a, 0x82,
+ 0x60, 0x30, 0x81, 0x78, 0x5d, 0x48, 0x02, 0x68, 0x5e, 0x48, 0x40, 0x30, 0x10, 0x18, 0x41, 0x80,
+ 0x40, 0xe5, 0xf8, 0xb5, 0x5c, 0x4c, 0x01, 0x25, 0x20, 0x68, 0x01, 0x46, 0x40, 0x31, 0xcb, 0x7c,
+ 0x02, 0x46, 0x60, 0x32, 0x00, 0x2b, 0x04, 0xd0, 0x01, 0x2b, 0x06, 0xd1, 0x03, 0x78, 0x5b, 0x07,
+ 0x03, 0xd5, 0x8d, 0x23, 0x1b, 0x5c, 0x5b, 0x07, 0x01, 0xd5, 0x15, 0x72, 0x66, 0xe0, 0x00, 0x78,
+ 0x42, 0x07, 0x05, 0x20, 0x00, 0x2a, 0x48, 0x77, 0x03, 0xda, 0xfe, 0xf7, 0x7f, 0xf9, 0x21, 0x68,
+ 0x48, 0x84, 0xfe, 0xf7, 0x83, 0xf9, 0x4c, 0x4a, 0x11, 0x68, 0xc8, 0x84, 0xff, 0xf7, 0x04, 0xfb,
+ 0x12, 0x68, 0x04, 0x46, 0x11, 0x46, 0x60, 0x31, 0x08, 0x70, 0x10, 0x78, 0x40, 0x07, 0x40, 0xd5,
+ 0x13, 0x46, 0x80, 0x33, 0x58, 0x79, 0x00, 0x28, 0x05, 0xd0, 0x00, 0x20, 0x08, 0x56, 0x00, 0x28,
+ 0x01, 0xda, 0x60, 0x1c, 0x1a, 0xe0, 0x26, 0x20, 0x56, 0x8c, 0x10, 0x5e, 0xb4, 0x46, 0x40, 0x4f,
+ 0x86, 0x19, 0x38, 0x8c, 0xb6, 0x46, 0x86, 0x42, 0x08, 0xda, 0x58, 0x7a, 0x00, 0x28, 0x05, 0xd1,
+ 0xff, 0x26, 0x76, 0x36, 0xb4, 0x45, 0x01, 0xd2, 0x1f, 0x2c, 0xea, 0xd3, 0x7e, 0x8c, 0xb6, 0x45,
+ 0x23, 0xdc, 0x58, 0x7a, 0x00, 0x28, 0x20, 0xd1, 0x01, 0xe0, 0x60, 0x1e, 0x08, 0x70, 0x32, 0x4e,
+ 0x08, 0x78, 0xff, 0xf7, 0x42, 0xfd, 0x30, 0x68, 0x02, 0x46, 0x60, 0x30, 0x01, 0x78, 0xa1, 0x42,
+ 0x1b, 0xd0, 0x03, 0x7a, 0x01, 0x2b, 0x18, 0xd0, 0x02, 0x25, 0xa1, 0x42, 0x1a, 0xd9, 0x04, 0x2b,
+ 0x16, 0xd0, 0x40, 0x32, 0x92, 0x7d, 0x01, 0x2a, 0x12, 0xd0, 0x03, 0x22, 0x02, 0x72, 0x08, 0x1b,
+ 0x1a, 0xe0, 0x89, 0x20, 0x80, 0x5c, 0x00, 0x28, 0x04, 0xd0, 0x40, 0x32, 0x52, 0x7f, 0x94, 0x42,
+ 0xdb, 0xd8, 0xdc, 0xe7, 0x1f, 0x2c, 0xbc, 0xd3, 0xd9, 0xe7, 0x05, 0x72, 0x00, 0x20, 0xf8, 0xbd,
+ 0x05, 0x72, 0xec, 0xe7, 0x03, 0x2b, 0x09, 0xd0, 0x40, 0x32, 0x92, 0x7d, 0x01, 0x2a, 0x05, 0xd0,
+ 0x04, 0x22, 0x02, 0x72, 0x60, 0x1a, 0x40, 0x42, 0x40, 0xb2, 0xf8, 0xbd, 0x05, 0x72, 0xf9, 0xe7,
+ 0x10, 0xb5, 0x04, 0x46, 0xfc, 0xf7, 0xea, 0xf9, 0x03, 0x21, 0x09, 0x07, 0x88, 0x8a, 0x1f, 0x20,
+ 0xc0, 0x43, 0x88, 0x82, 0x0d, 0x48, 0xe2, 0x06, 0x03, 0x68, 0xd2, 0x0e, 0x0d, 0x24, 0x64, 0x03,
+ 0x1b, 0x19, 0x5a, 0x85, 0x8a, 0x8a, 0x0f, 0x4a, 0x8a, 0x82, 0x09, 0x23, 0x04, 0x68, 0x9b, 0x02,
+ 0x08, 0x4a, 0xa4, 0x18, 0x23, 0x84, 0x8b, 0x8a, 0x00, 0x23, 0x8b, 0x82, 0x0a, 0x49, 0x00, 0x68,
+ 0x80, 0x18, 0x41, 0x84, 0x10, 0xbd, 0x00, 0x00, 0xff, 0x83, 0x00, 0x00, 0x84, 0x00, 0x00, 0x20,
+ 0xff, 0x7f, 0x00, 0x00, 0x40, 0xa0, 0x01, 0x00, 0x90, 0x00, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00,
+ 0x00, 0x04, 0x00, 0x20, 0xff, 0x8b, 0x00, 0x00, 0x60, 0x20, 0x00, 0x00, 0xf0, 0xb5, 0x03, 0x21,
+ 0x09, 0x07, 0xff, 0x25, 0x01, 0x26, 0xf7, 0x4a, 0xf7, 0x4b, 0xf8, 0x4c, 0x8f, 0x8a, 0x0d, 0x28,
+ 0x8d, 0x82, 0x09, 0xd8, 0x80, 0x1f, 0x86, 0x40, 0x15, 0x68, 0x30, 0x02, 0xed, 0x18, 0xa8, 0x84,
+ 0x88, 0x8a, 0x8c, 0x82, 0x04, 0x20, 0x08, 0xe0, 0x0e, 0x38, 0x86, 0x40, 0x15, 0x68, 0x30, 0x02,
+ 0xed, 0x18, 0xa8, 0x84, 0x88, 0x8a, 0x8c, 0x82, 0x08, 0x20, 0x11, 0x68, 0xc9, 0x18, 0x08, 0x84,
+ 0xf0, 0xbd, 0xfe, 0xb5, 0xe7, 0x4d, 0x28, 0x68, 0xe7, 0x4e, 0x40, 0x36, 0x80, 0x19, 0x80, 0x88,
+ 0xe7, 0x4f, 0x41, 0x07, 0x3c, 0x68, 0x49, 0x0f, 0x20, 0x46, 0x60, 0x30, 0xc1, 0x70, 0xa1, 0x84,
+ 0x00, 0x23, 0xdb, 0x43, 0x07, 0x22, 0x00, 0x21, 0x02, 0x93, 0x01, 0x92, 0x00, 0x91, 0x2e, 0x23,
+ 0x26, 0x21, 0xe3, 0x5e, 0x05, 0x22, 0x61, 0x5e, 0x82, 0x56, 0x04, 0x46, 0x03, 0x20, 0x20, 0x56,
+ 0xfe, 0xf7, 0x21, 0xfc, 0x3a, 0x68, 0x11, 0x46, 0x60, 0x31, 0xc8, 0x70, 0x90, 0x8c, 0x48, 0x71,
+ 0x08, 0x7b, 0xc8, 0x71, 0xd0, 0x8c, 0xd0, 0x85, 0x03, 0x20, 0x00, 0x07, 0x82, 0x8a, 0x07, 0x22,
+ 0xd2, 0x43, 0x82, 0x82, 0xc8, 0x78, 0x29, 0x68, 0x89, 0x19, 0x88, 0x80, 0x22, 0xe4, 0x70, 0xb5,
+ 0xcf, 0x4c, 0xff, 0x25, 0x20, 0x68, 0x01, 0x46, 0x40, 0x31, 0x8a, 0x7a, 0x17, 0x2a, 0x17, 0xd0,
+ 0x18, 0x2a, 0x22, 0xd0, 0xc9, 0x7c, 0x00, 0x29, 0x23, 0xd1, 0x01, 0x78, 0x49, 0x07, 0x20, 0xd5,
+ 0x60, 0x30, 0x40, 0x7a, 0x00, 0x28, 0x0f, 0xd1, 0x09, 0x20, 0xff, 0xf7, 0x81, 0xfd, 0x20, 0x68,
+ 0x01, 0x22, 0x69, 0x21, 0x0a, 0x54, 0x17, 0x22, 0x4a, 0x21, 0x0a, 0x54, 0x80, 0x30, 0x85, 0x72,
+ 0xfb, 0xf7, 0xe5, 0xff, 0x00, 0x28, 0x12, 0xd0, 0x09, 0x20, 0xff, 0xf7, 0x9b, 0xfd, 0x20, 0x68,
+ 0x18, 0x22, 0x4a, 0x21, 0x0a, 0x54, 0x80, 0x30, 0x85, 0x72, 0xfb, 0xf7, 0xd8, 0xff, 0x00, 0x28,
+ 0x05, 0xd0, 0x20, 0x68, 0x19, 0x21, 0x40, 0x30, 0x81, 0x72, 0x00, 0x20, 0x70, 0xbd, 0x02, 0x20,
+ 0x70, 0xbd, 0x00, 0xb5, 0xb2, 0x49, 0x03, 0x00, 0x09, 0x68, 0x80, 0x31, 0x02, 0xf0, 0x88, 0xfa,
+ 0x06, 0x14, 0x04, 0x07, 0x0a, 0x0d, 0x10, 0x14, 0x88, 0x7b, 0xc0, 0x07, 0x0a, 0xe0, 0x88, 0x7b,
+ 0x80, 0x07, 0x07, 0xe0, 0x88, 0x7b, 0x40, 0x07, 0x04, 0xe0, 0x88, 0x7b, 0x00, 0x07, 0x01, 0xe0,
+ 0x88, 0x7b, 0xc0, 0x06, 0xc0, 0x17, 0x40, 0x1c, 0x00, 0xbd, 0xf8, 0xb5, 0xa4, 0x4c, 0x01, 0x26,
+ 0x20, 0x68, 0x00, 0x25, 0x40, 0x30, 0x80, 0x7a, 0x20, 0x28, 0x28, 0xd0, 0x21, 0x28, 0x76, 0xd0,
+ 0xfe, 0xf7, 0xd2, 0xfd, 0x20, 0x68, 0x01, 0x46, 0x40, 0x30, 0xc2, 0x7c, 0x00, 0x2a, 0x02, 0xd0,
+ 0x01, 0x2a, 0x4f, 0xd0, 0x82, 0xe0, 0x09, 0x78, 0x49, 0x07, 0x7f, 0xd5, 0x86, 0x76, 0xc5, 0x76,
+ 0x20, 0x68, 0x40, 0x30, 0x80, 0x7e, 0xff, 0xf7, 0xc4, 0xff, 0x00, 0x28, 0x1e, 0xd0, 0x20, 0x68,
+ 0x06, 0x21, 0x40, 0x30, 0x80, 0x7e, 0xfe, 0xf7, 0xf8, 0xfe, 0x20, 0x68, 0x40, 0x30, 0xc5, 0x75,
+ 0x45, 0x75, 0xfb, 0xf7, 0x3c, 0xff, 0x20, 0x68, 0x20, 0x21, 0x40, 0x30, 0x81, 0x72, 0xfb, 0xf7,
+ 0x7e, 0xff, 0x00, 0x28, 0x67, 0xd0, 0x20, 0x68, 0x40, 0x30, 0xc1, 0x7e, 0x80, 0x7e, 0xff, 0xf7,
+ 0x83, 0xf9, 0x20, 0x68, 0x40, 0x30, 0xc0, 0x7d, 0x00, 0x28, 0xea, 0xd0, 0x20, 0x68, 0x02, 0x46,
+ 0x80, 0x32, 0x11, 0x7a, 0xc9, 0x06, 0x10, 0xd5, 0x01, 0x46, 0x40, 0x31, 0x1a, 0x23, 0xcb, 0x56,
+ 0x01, 0x2b, 0x02, 0xd1, 0x97, 0x7b, 0xbf, 0x06, 0x04, 0xd5, 0x02, 0x2b, 0x05, 0xd1, 0x92, 0x7b,
+ 0x52, 0x06, 0x02, 0xd4, 0xca, 0x7e, 0x00, 0x2a, 0x0a, 0xd0, 0x01, 0x46, 0x40, 0x31, 0xcd, 0x76,
+ 0x8a, 0x7e, 0x52, 0x1c, 0x8a, 0x76, 0x5a, 0x21, 0x41, 0x56, 0x06, 0x29, 0xb8, 0xdb, 0x35, 0xe0,
+ 0xce, 0x76, 0xf8, 0xe7, 0x09, 0x78, 0x49, 0x07, 0x30, 0xd5, 0x02, 0x21, 0x81, 0x76, 0xc5, 0x76,
+ 0x20, 0x68, 0x40, 0x30, 0x80, 0x7e, 0xff, 0xf7, 0x74, 0xff, 0x00, 0x28, 0x1e, 0xd0, 0x20, 0x68,
+ 0x06, 0x21, 0x40, 0x30, 0x80, 0x7e, 0xfe, 0xf7, 0xa8, 0xfe, 0x20, 0x68, 0x40, 0x30, 0xc5, 0x75,
+ 0x45, 0x75, 0xfb, 0xf7, 0xec, 0xfe, 0x20, 0x68, 0x21, 0x21, 0x40, 0x30, 0x81, 0x72, 0xfb, 0xf7,
+ 0x2e, 0xff, 0x00, 0x28, 0x17, 0xd0, 0x20, 0x68, 0x40, 0x30, 0xc1, 0x7e, 0x80, 0x7e, 0xff, 0xf7,
+ 0x33, 0xf9, 0x20, 0x68, 0x40, 0x30, 0xc0, 0x7d, 0x00, 0x28, 0xea, 0xd0, 0x20, 0x68, 0x40, 0x30,
+ 0x81, 0x7e, 0x89, 0x1c, 0x49, 0xb2, 0x81, 0x76, 0x05, 0x29, 0xd1, 0xdb, 0x20, 0x68, 0x40, 0x30,
+ 0x85, 0x72, 0x00, 0x20, 0xf8, 0xbd, 0x02, 0x20, 0xf8, 0xbd, 0xf8, 0xb5, 0x54, 0x4d, 0x00, 0x24,
+ 0x28, 0x68, 0x02, 0x46, 0x40, 0x30, 0x81, 0x7a, 0x10, 0x29, 0x4d, 0xd0, 0xc1, 0x7c, 0x28, 0x46,
+ 0x00, 0x68, 0x80, 0x30, 0x00, 0x29, 0x02, 0xd0, 0x01, 0x29, 0x77, 0xd0, 0x79, 0xe0, 0x40, 0x7b,
+ 0xc0, 0x07, 0x76, 0xd1, 0xfe, 0xf7, 0x28, 0xfd, 0x28, 0x68, 0x00, 0x78, 0x40, 0x07, 0x06, 0xd4,
+ 0x0c, 0x20, 0xff, 0xf7, 0xa1, 0xfb, 0x28, 0x68, 0x00, 0x78, 0x40, 0x07, 0x2e, 0xd5, 0x28, 0x68,
+ 0x01, 0x46, 0x40, 0x31, 0x8a, 0x7d, 0x01, 0x2a, 0x0d, 0xd0, 0x85, 0x21, 0x09, 0x5c, 0x00, 0x29,
+ 0x02, 0xd0, 0x00, 0x21, 0xc9, 0x43, 0x36, 0xe0, 0xfd, 0xf7, 0xd2, 0xfe, 0x29, 0x68, 0x48, 0x85,
+ 0xff, 0xf7, 0x5c, 0xfd, 0x47, 0xe0, 0xc9, 0x7f, 0x00, 0x29, 0x00, 0xd1, 0x44, 0x85, 0x85, 0x21,
+ 0x09, 0x5c, 0x00, 0x29, 0x03, 0xd0, 0x41, 0x8d, 0x49, 0x1e, 0x41, 0x85, 0x05, 0xe0, 0xfd, 0xf7,
+ 0xbf, 0xfe, 0x29, 0x68, 0x4a, 0x8d, 0x80, 0x18, 0x48, 0x85, 0x28, 0x68, 0x40, 0x30, 0xc1, 0x7f,
+ 0x49, 0x1c, 0xc9, 0xb2, 0xc1, 0x77, 0x08, 0x29, 0x28, 0xd0, 0x2c, 0xe0, 0xfb, 0xf7, 0x77, 0xfe,
+ 0x28, 0x68, 0x10, 0x21, 0x40, 0x30, 0x81, 0x72, 0xfb, 0xf7, 0xb9, 0xfe, 0x00, 0x28, 0x0c, 0xd0,
+ 0x28, 0x68, 0x24, 0x4b, 0x01, 0x46, 0x40, 0x31, 0x8a, 0x7d, 0x23, 0x4e, 0x01, 0x2a, 0x06, 0xd0,
+ 0x19, 0x68, 0x89, 0x19, 0x09, 0x8e, 0x41, 0x85, 0xca, 0xe7, 0x02, 0x20, 0xf8, 0xbd, 0xca, 0x7f,
+ 0x00, 0x2a, 0x00, 0xd1, 0x44, 0x85, 0x47, 0x8d, 0x1b, 0x68, 0x9b, 0x19, 0x1b, 0x8e, 0x52, 0x1c,
+ 0xfb, 0x18, 0x43, 0x85, 0xd0, 0xb2, 0xc8, 0x77, 0x08, 0x28, 0x04, 0xd1, 0xff, 0xf7, 0x16, 0xfd,
+ 0x28, 0x68, 0x40, 0x30, 0xc4, 0x77, 0x28, 0x68, 0x01, 0x78, 0x49, 0x07, 0x0c, 0xd4, 0x60, 0x30,
+ 0x80, 0x79, 0x00, 0x28, 0x97, 0xd0, 0x07, 0xe0, 0x00, 0xe0, 0x02, 0xe0, 0x40, 0x7b, 0xc0, 0x07,
+ 0x08, 0xd0, 0x01, 0x20, 0x60, 0x32, 0x90, 0x71, 0x28, 0x68, 0x33, 0x21, 0x40, 0x30, 0x81, 0x72,
+ 0x00, 0x20, 0xf8, 0xbd, 0xfe, 0xf7, 0xa8, 0xfc, 0x28, 0x68, 0x01, 0x46, 0x40, 0x30, 0x82, 0x7d,
+ 0x01, 0x2a, 0x0f, 0xd0, 0xff, 0xf7, 0x71, 0xfb, 0x29, 0x68, 0x48, 0x85, 0xff, 0xf7, 0xee, 0xfc,
+ 0x1e, 0xe0, 0x00, 0x00, 0x84, 0x00, 0x00, 0x20, 0x40, 0xa0, 0x01, 0x00, 0xf3, 0xff, 0x00, 0x00,
+ 0x90, 0x00, 0x00, 0x20, 0xc0, 0x7f, 0x00, 0x28, 0x00, 0xd1, 0x4c, 0x85, 0xff, 0xf7, 0x5d, 0xfb,
+ 0x29, 0x68, 0x4a, 0x8d, 0x80, 0x18, 0x48, 0x85, 0x40, 0x31, 0xc8, 0x7f, 0x40, 0x1c, 0xc0, 0xb2,
+ 0xc8, 0x77, 0x08, 0x28, 0x04, 0xd1, 0xff, 0xf7, 0xd1, 0xfc, 0x28, 0x68, 0x40, 0x30, 0xc4, 0x77,
+ 0x28, 0x68, 0x01, 0x78, 0x49, 0x07, 0xc7, 0xd4, 0x60, 0x30, 0x80, 0x79, 0x00, 0x28, 0xcb, 0xd0,
+ 0xc2, 0xe7, 0x10, 0xb5, 0xfb, 0x4c, 0x20, 0x68, 0x01, 0x46, 0x40, 0x31, 0xca, 0x7c, 0x00, 0x2a,
+ 0x06, 0xd0, 0x01, 0x2a, 0x02, 0xd1, 0x02, 0x78, 0x52, 0x07, 0x01, 0xd4, 0x00, 0x20, 0xc1, 0xe5,
+ 0x89, 0x7a, 0x0f, 0x29, 0x22, 0xd0, 0x80, 0x30, 0x40, 0x7b, 0x80, 0x06, 0x2a, 0xd4, 0xfe, 0xf7,
+ 0x5b, 0xfc, 0x00, 0x20, 0xfc, 0xf7, 0x42, 0xf8, 0x09, 0x20, 0xff, 0xf7, 0xaa, 0xfa, 0x03, 0x20,
+ 0x00, 0x07, 0x81, 0x8a, 0x20, 0x21, 0xc9, 0x43, 0x81, 0x82, 0xeb, 0x49, 0x20, 0x20, 0x09, 0x68,
+ 0xea, 0x4a, 0x89, 0x18, 0x08, 0x84, 0xfb, 0xf7, 0xf4, 0xfd, 0x21, 0x68, 0x60, 0x31, 0x48, 0x70,
+ 0xfb, 0xf7, 0xcd, 0xfd, 0x20, 0x68, 0x0f, 0x21, 0x40, 0x30, 0x81, 0x72, 0xfb, 0xf7, 0x0f, 0xfe,
+ 0x00, 0x28, 0x0c, 0xd0, 0x3c, 0x20, 0xff, 0xf7, 0x4a, 0xfc, 0x20, 0x68, 0x40, 0x30, 0xc0, 0x7d,
+ 0x00, 0x28, 0xed, 0xd0, 0x20, 0x68, 0x32, 0x21, 0x40, 0x30, 0x81, 0x72, 0xc6, 0xe7, 0x02, 0x20,
+ 0x88, 0xe5, 0x10, 0xb5, 0xd7, 0x4c, 0x20, 0x68, 0x01, 0x46, 0x40, 0x31, 0x8a, 0x7a, 0x11, 0x2a,
+ 0x21, 0xd0, 0xc9, 0x7c, 0x00, 0x29, 0x45, 0xd1, 0x88, 0x21, 0x09, 0x5c, 0xc9, 0x09, 0x41, 0xd1,
+ 0x01, 0x78, 0x89, 0x06, 0x89, 0x0f, 0x02, 0x29, 0x3c, 0xd0, 0xfe, 0xf7, 0x15, 0xfc, 0x0c, 0x20,
+ 0xff, 0xf7, 0x4e, 0xfd, 0x20, 0x68, 0x00, 0x21, 0xc1, 0x84, 0x06, 0x21, 0x40, 0x30, 0x41, 0x75,
+ 0x20, 0x68, 0x40, 0x30, 0x40, 0x7d, 0xff, 0xf7, 0x79, 0xfd, 0xfb, 0xf7, 0x90, 0xfd, 0x20, 0x68,
+ 0x11, 0x21, 0x40, 0x30, 0x81, 0x72, 0xfb, 0xf7, 0xd2, 0xfd, 0x00, 0x28, 0x11, 0xd0, 0xc2, 0x49,
+ 0x08, 0x68, 0xc2, 0x4a, 0x80, 0x18, 0x00, 0x8e, 0x00, 0x28, 0x10, 0xd0, 0x20, 0x68, 0x26, 0x23,
+ 0xc3, 0x5e, 0x09, 0x68, 0x8a, 0x18, 0x30, 0x21, 0x51, 0x5e, 0x00, 0x29, 0x03, 0xdd, 0x01, 0x21,
+ 0x03, 0xe0, 0x02, 0x20, 0x46, 0xe5, 0x00, 0x21, 0xc9, 0x43, 0x59, 0x18, 0xc1, 0x84, 0x20, 0x68,
+ 0x40, 0x30, 0x41, 0x7d, 0x49, 0x1c, 0xc9, 0xb2, 0x41, 0x75, 0x16, 0x29, 0xd0, 0xd3, 0xff, 0xf7,
+ 0x70, 0xfd, 0x02, 0xe0, 0x01, 0x21, 0x60, 0x30, 0xc1, 0x71, 0x20, 0x68, 0x31, 0x21, 0x40, 0x30,
+ 0x81, 0x72, 0x00, 0x20, 0x2e, 0xe5, 0xf8, 0xb5, 0x03, 0x20, 0x00, 0x07, 0x81, 0x8a, 0xac, 0x49,
+ 0x81, 0x82, 0xa9, 0x4e, 0x01, 0x20, 0x31, 0x68, 0x40, 0x02, 0x0d, 0x27, 0x7f, 0x03, 0xc9, 0x19,
+ 0x48, 0x80, 0x30, 0x68, 0xc0, 0x19, 0x80, 0x8f, 0x01, 0xf0, 0xff, 0xfc, 0x05, 0x46, 0x01, 0xe0,
+ 0x00, 0x2c, 0x08, 0xd0, 0x30, 0x68, 0xc0, 0x19, 0x80, 0x8f, 0x80, 0x09, 0xc0, 0x07, 0xc0, 0x0f,
+ 0x01, 0xd0, 0x01, 0x24, 0x00, 0xe0, 0x00, 0x24, 0x00, 0x2c, 0x05, 0xd0, 0x01, 0xf0, 0xed, 0xfc,
+ 0x40, 0x1b, 0x80, 0xb2, 0x0b, 0x28, 0xeb, 0xd3, 0x30, 0x68, 0xc1, 0x19, 0x0a, 0x20, 0x08, 0x5e,
+ 0x00, 0x2c, 0x03, 0xd0, 0x00, 0x28, 0x01, 0xda, 0x00, 0x24, 0xe4, 0x43, 0x20, 0x46, 0xf8, 0xbd,
+ 0x10, 0xb5, 0x90, 0x48, 0x00, 0x68, 0x80, 0x30, 0x00, 0x7a, 0x80, 0x07, 0x01, 0xd5, 0x00, 0x20,
+ 0xf0, 0xe4, 0xff, 0xf7, 0xc0, 0xff, 0x00, 0x28, 0xfa, 0xd0, 0x03, 0x20, 0x00, 0x07, 0x81, 0x8a,
+ 0x01, 0x21, 0xc9, 0x43, 0x81, 0x82, 0x88, 0x49, 0x01, 0x20, 0x09, 0x68, 0x0d, 0x22, 0x52, 0x03,
+ 0x89, 0x18, 0x48, 0x86, 0x01, 0x46, 0x17, 0x20, 0x01, 0xf0, 0x3c, 0xff, 0x01, 0x20, 0xd9, 0xe4,
+ 0xf0, 0xb5, 0x80, 0x4c, 0x00, 0x21, 0x20, 0x68, 0x03, 0x25, 0x02, 0x78, 0x2d, 0x07, 0x52, 0x07,
+ 0x7d, 0x4e, 0x0f, 0x46, 0x00, 0x2a, 0x2c, 0xda, 0x58, 0x22, 0x82, 0x56, 0x20, 0x46, 0x00, 0x68,
+ 0xd3, 0x1d, 0x60, 0x30, 0x0e, 0x2b, 0x01, 0xd8, 0x87, 0x70, 0x13, 0xe0, 0x13, 0x46, 0x0f, 0x33,
+ 0x1e, 0x2b, 0x02, 0xd8, 0x10, 0x21, 0x04, 0x22, 0x0b, 0xe0, 0x13, 0x46, 0x17, 0x33, 0x2e, 0x2b,
+ 0x02, 0xd8, 0x20, 0x21, 0x08, 0x22, 0x04, 0xe0, 0x1f, 0x32, 0x3e, 0x2a, 0x02, 0xd8, 0x30, 0x21,
+ 0x0c, 0x22, 0x82, 0x70, 0x01, 0x20, 0xfe, 0xf7, 0xcb, 0xfc, 0xa8, 0x8a, 0x0f, 0x20, 0xc0, 0x43,
+ 0xa8, 0x82, 0x20, 0x68, 0x31, 0x68, 0x60, 0x30, 0x80, 0x78, 0x68, 0x4a, 0x40, 0x32, 0x89, 0x18,
+ 0x48, 0x80, 0x20, 0x68, 0x58, 0x21, 0x41, 0x56, 0x00, 0x29, 0x01, 0xda, 0x65, 0x48, 0x01, 0xe0,
+ 0x03, 0x20, 0x80, 0x03, 0xa9, 0x8a, 0x01, 0x21, 0xa9, 0x82, 0x32, 0x68, 0x41, 0x00, 0x0d, 0x20,
+ 0x40, 0x03, 0x12, 0x18, 0x91, 0x80, 0xa9, 0x8a, 0x5f, 0x49, 0xa9, 0x82, 0x33, 0x68, 0x80, 0x22,
+ 0x1b, 0x18, 0x5a, 0x80, 0xaa, 0x8a, 0xa9, 0x82, 0x31, 0x68, 0x08, 0x18, 0x47, 0x80, 0x00, 0x20,
+ 0xf0, 0xbd, 0x70, 0xb5, 0x53, 0x4c, 0x88, 0x21, 0x20, 0x68, 0x00, 0x25, 0x09, 0x5c, 0x40, 0x30,
+ 0xc9, 0x07, 0x00, 0x29, 0x03, 0xd0, 0x05, 0x76, 0x45, 0x76, 0x00, 0x20, 0x70, 0xbd, 0x81, 0x7a,
+ 0x07, 0x29, 0x01, 0xd0, 0x05, 0x76, 0x45, 0x76, 0xff, 0xf7, 0x3d, 0xff, 0x00, 0x28, 0x28, 0xd0,
+ 0x21, 0x68, 0x40, 0x31, 0x0a, 0x7e, 0x10, 0x18, 0x40, 0xb2, 0x08, 0x76, 0x4a, 0x7e, 0x52, 0x1c,
+ 0x52, 0xb2, 0x4a, 0x76, 0x20, 0x28, 0x09, 0xda, 0x30, 0x2a, 0x07, 0xda, 0xff, 0xf7, 0x80, 0xff,
+ 0x20, 0x68, 0x07, 0x21, 0x40, 0x30, 0x81, 0x72, 0x02, 0x20, 0x70, 0xbd, 0x03, 0x20, 0x00, 0x07,
+ 0x81, 0x8a, 0x01, 0x21, 0xc9, 0x43, 0x81, 0x82, 0x3b, 0x49, 0x01, 0x20, 0x09, 0x68, 0x0d, 0x22,
+ 0x52, 0x03, 0x89, 0x18, 0x48, 0x86, 0x01, 0x46, 0x17, 0x20, 0x01, 0xf0, 0xa3, 0xfe, 0x01, 0x20,
+ 0x70, 0xbd, 0x20, 0x68, 0x40, 0x30, 0xc6, 0xe7, 0x32, 0x48, 0x53, 0x21, 0x00, 0x68, 0x0a, 0x5c,
+ 0xc1, 0x7b, 0xc9, 0x08, 0x00, 0x2a, 0x07, 0xd0, 0x01, 0x29, 0x11, 0xd9, 0x00, 0x7c, 0xc0, 0x08,
+ 0x01, 0x28, 0x0d, 0xd9, 0x00, 0x20, 0x70, 0x47, 0x01, 0x29, 0x09, 0xd9, 0x01, 0x7c, 0xc9, 0x08,
+ 0x01, 0x29, 0x05, 0xd9, 0x41, 0x7b, 0xc9, 0x08, 0x01, 0x29, 0x01, 0xd9, 0x80, 0x7b, 0xee, 0xe7,
+ 0x01, 0x20, 0x70, 0x47, 0xf8, 0xb5, 0x23, 0x4d, 0x0f, 0x23, 0x2a, 0x68, 0x11, 0x46, 0x40, 0x31,
+ 0xcb, 0x56, 0x4b, 0x76, 0x90, 0x7b, 0x54, 0x7b, 0x00, 0x1b, 0x40, 0x10, 0xd0, 0x84, 0x8e, 0x7d,
+ 0x00, 0x24, 0x01, 0x2e, 0x06, 0xd0, 0x01, 0x26, 0x40, 0x05, 0xf6, 0x05, 0x80, 0x19, 0x00, 0x16,
+ 0x18, 0x1a, 0x0d, 0xe0, 0x16, 0x46, 0x80, 0x36, 0xb7, 0x79, 0x07, 0x2f, 0x09, 0xd3, 0xb4, 0x71,
+ 0x0c, 0x28, 0x01, 0xdd, 0x58, 0x1e, 0x03, 0xe0, 0x0c, 0x26, 0xf0, 0x42, 0x01, 0xda, 0x58, 0x1c,
+ 0x48, 0x76, 0x19, 0x20, 0x08, 0x56, 0x18, 0x28, 0x01, 0xda, 0x18, 0x20, 0x02, 0xe0, 0x2c, 0x28,
+ 0x01, 0xdd, 0x2c, 0x20, 0x48, 0x76, 0x19, 0x20, 0x08, 0x56, 0x83, 0x42, 0x30, 0xd0, 0xc3, 0x1a,
+ 0xdb, 0x00, 0xd3, 0x84, 0xc8, 0x73, 0xfb, 0xf7, 0xb7, 0xfe, 0x28, 0x68, 0x26, 0x22, 0x81, 0x7b,
+ 0x82, 0x5e, 0xf8, 0x23, 0x89, 0x18, 0x09, 0xb2, 0x01, 0x85, 0x00, 0x29, 0x0e, 0xda, 0x04, 0x85,
+ 0x0f, 0xe0, 0x00, 0x00, 0x90, 0x00, 0x00, 0x20, 0x84, 0x00, 0x00, 0x20, 0x40, 0xa0, 0x01, 0x00,
+ 0xff, 0xf8, 0x00, 0x00, 0xff, 0x3f, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0xf8, 0x29, 0x00, 0xdd,
+ 0x03, 0x85, 0x01, 0x8d, 0x81, 0x73, 0x41, 0x7b, 0x89, 0x1a, 0x09, 0xb2, 0x01, 0x85, 0x00, 0x29,
+ 0x01, 0xda, 0x04, 0x85, 0x02, 0xe0, 0xf8, 0x29, 0x00, 0xdd, 0x03, 0x85, 0x01, 0x8d, 0x41, 0x73,
+ 0x00, 0x20, 0xf8, 0xbd, 0x10, 0xb5, 0xfa, 0x4c, 0x20, 0x68, 0x01, 0x46, 0x40, 0x30, 0x82, 0x7a,
+ 0x12, 0x2a, 0x23, 0xd0, 0xc0, 0x7c, 0x00, 0x28, 0x01, 0xd0, 0x01, 0x28, 0x70, 0xd1, 0x80, 0x31,
+ 0x48, 0x7b, 0x40, 0x06, 0x6c, 0xd4, 0xfe, 0xf7, 0x47, 0xfa, 0xfb, 0xf7, 0xf2, 0xfb, 0x21, 0x68,
+ 0x40, 0x31, 0x08, 0x76, 0x08, 0x7c, 0x08, 0x77, 0x0f, 0x20, 0xfb, 0xf7, 0x84, 0xfd, 0x20, 0x68,
+ 0x00, 0x21, 0x40, 0x30, 0x1d, 0xe0, 0x89, 0x7d, 0x01, 0x29, 0x32, 0xd0, 0xfd, 0xf7, 0xd8, 0xfc,
+ 0xfb, 0xf7, 0xbd, 0xfb, 0x20, 0x68, 0x12, 0x21, 0x40, 0x30, 0x81, 0x72, 0xfb, 0xf7, 0xff, 0xfb,
+ 0x00, 0x28, 0x29, 0xd0, 0x20, 0x68, 0x40, 0x30, 0x81, 0x7d, 0x40, 0x7d, 0x01, 0x29, 0x25, 0xd0,
+ 0xfd, 0xf7, 0x63, 0xfd, 0x20, 0x68, 0x40, 0x30, 0xc1, 0x7d, 0x00, 0x29, 0xe8, 0xd0, 0x41, 0x7d,
+ 0x49, 0x1c, 0x41, 0x75, 0x21, 0x68, 0x40, 0x31, 0xca, 0x7c, 0x48, 0x7d, 0x00, 0x2a, 0x18, 0xd0,
+ 0x02, 0x22, 0x90, 0x42, 0xd7, 0xd3, 0x1c, 0x20, 0x08, 0x56, 0xfb, 0xf7, 0xf7, 0xfd, 0x21, 0x68,
+ 0x58, 0x20, 0x08, 0x56, 0xfb, 0xf7, 0xbe, 0xfb, 0xff, 0xf7, 0x26, 0xff, 0x01, 0x28, 0x0a, 0xd0,
+ 0x26, 0xe0, 0xfd, 0xf7, 0xd9, 0xfc, 0xcb, 0xe7, 0x02, 0x20, 0x98, 0xe5, 0xfd, 0xf7, 0xee, 0xfd,
+ 0xd8, 0xe7, 0x04, 0x22, 0xe5, 0xe7, 0x20, 0x68, 0x80, 0x79, 0x40, 0x06, 0x18, 0xd4, 0x01, 0x21,
+ 0x1b, 0x20, 0x01, 0xf0, 0xaf, 0xfd, 0x20, 0x68, 0x80, 0x30, 0x01, 0x7a, 0x0a, 0x07, 0x01, 0x21,
+ 0x00, 0x2a, 0x0c, 0xdb, 0x03, 0x20, 0x00, 0x07, 0x82, 0x8a, 0xca, 0x1e, 0x82, 0x82, 0xc1, 0x48,
+ 0x00, 0x68, 0x0d, 0x22, 0x52, 0x03, 0x80, 0x18, 0x41, 0x86, 0x01, 0x20, 0x77, 0xe5, 0x01, 0x74,
+ 0x20, 0x68, 0x30, 0x23, 0x01, 0x46, 0x02, 0x46, 0x40, 0x31, 0x8b, 0x72, 0x80, 0x30, 0x84, 0x79,
+ 0x03, 0x46, 0x64, 0x1c, 0x84, 0x71, 0xc8, 0x7c, 0x00, 0x28, 0x0a, 0xd1, 0x10, 0x88, 0x41, 0x07,
+ 0x07, 0xd4, 0x00, 0x06, 0x05, 0xd4, 0x58, 0x7b, 0xc0, 0x06, 0x02, 0xd4, 0xff, 0xf7, 0x02, 0xff,
+ 0x5d, 0xe5, 0x00, 0x20, 0x5b, 0xe5, 0x10, 0xb5, 0x04, 0x46, 0xfb, 0xf7, 0xe7, 0xfc, 0x03, 0x21,
+ 0x09, 0x07, 0x88, 0x8a, 0x1f, 0x20, 0xc0, 0x43, 0x88, 0x82, 0xaa, 0x48, 0xe2, 0x06, 0x03, 0x68,
+ 0xd2, 0x0e, 0x0d, 0x24, 0x64, 0x03, 0x1b, 0x19, 0x5a, 0x85, 0x8a, 0x8a, 0xa6, 0x4a, 0x8a, 0x82,
+ 0xa6, 0x4b, 0x04, 0x68, 0xa6, 0x4a, 0xa4, 0x18, 0x23, 0x84, 0x8b, 0x8a, 0x00, 0x23, 0x8b, 0x82,
+ 0xa4, 0x4b, 0x04, 0x68, 0xa4, 0x18, 0x63, 0x84, 0x8b, 0x8a, 0xff, 0x23, 0x8b, 0x82, 0x01, 0x21,
+ 0x00, 0x68, 0x89, 0x02, 0x80, 0x18, 0x81, 0x84, 0x31, 0xe5, 0x10, 0xb5, 0x04, 0x46, 0xfb, 0xf7,
+ 0xbd, 0xfc, 0x03, 0x21, 0x09, 0x07, 0x88, 0x8a, 0x1f, 0x20, 0xc0, 0x43, 0x88, 0x82, 0x95, 0x48,
+ 0xe2, 0x06, 0x03, 0x68, 0xd2, 0x0e, 0x0d, 0x24, 0x64, 0x03, 0x1b, 0x19, 0x5a, 0x85, 0x8a, 0x8a,
+ 0x91, 0x4a, 0x8a, 0x82, 0x91, 0x4b, 0x04, 0x68, 0x91, 0x4a, 0xa4, 0x18, 0x23, 0x84, 0x8b, 0x8a,
+ 0x00, 0x23, 0x8b, 0x82, 0x90, 0x4b, 0x04, 0x68, 0xa4, 0x18, 0x63, 0x84, 0x8b, 0x8a, 0xff, 0x23,
+ 0x8b, 0x82, 0x01, 0x21, 0x00, 0x68, 0x89, 0x02, 0x80, 0x18, 0x81, 0x84, 0x07, 0xe5, 0x70, 0xb5,
+ 0x83, 0x4c, 0x4d, 0x22, 0x20, 0x68, 0x00, 0x25, 0x11, 0x56, 0x2d, 0x29, 0x2b, 0xd0, 0x2e, 0x29,
+ 0x0e, 0xd0, 0x61, 0x21, 0x09, 0x5c, 0x80, 0x30, 0x41, 0x74, 0x14, 0x20, 0xff, 0xf7, 0x9b, 0xff,
+ 0x20, 0x68, 0x05, 0x84, 0xfb, 0xf7, 0xe3, 0xfa, 0x20, 0x68, 0x2e, 0x21, 0x40, 0x30, 0x41, 0x73,
+ 0xfb, 0xf7, 0x25, 0xfb, 0x00, 0x28, 0x31, 0xd0, 0x00, 0x20, 0xff, 0xf7, 0x60, 0xf9, 0x20, 0x68,
+ 0x01, 0x46, 0x40, 0x30, 0xc2, 0x7d, 0x00, 0x2a, 0xec, 0xd0, 0x60, 0x31, 0x49, 0x78, 0x41, 0x77,
+ 0x14, 0x20, 0xff, 0xf7, 0xaa, 0xff, 0x20, 0x68, 0x05, 0x84, 0xfb, 0xf7, 0xc8, 0xfa, 0x20, 0x68,
+ 0x2d, 0x21, 0x40, 0x30, 0x41, 0x73, 0xfb, 0xf7, 0x0a, 0xfb, 0x00, 0x28, 0x16, 0xd0, 0x00, 0x20,
+ 0xff, 0xf7, 0x45, 0xf9, 0x22, 0x68, 0x11, 0x46, 0x40, 0x31, 0xc8, 0x7d, 0x00, 0x28, 0xec, 0xd0,
+ 0x4d, 0x73, 0x61, 0x24, 0x48, 0x7f, 0xa3, 0x56, 0x98, 0x42, 0x00, 0xdd, 0x18, 0x46, 0x48, 0x77,
+ 0x91, 0x20, 0x10, 0x56, 0xfb, 0xf7, 0xd6, 0xfa, 0x00, 0x20, 0x70, 0xbd, 0x02, 0x20, 0x70, 0xbd,
+ 0xf8, 0xb5, 0x62, 0x48, 0x5a, 0x4c, 0x82, 0x7f, 0x20, 0x68, 0x01, 0x46, 0x40, 0x30, 0x83, 0x7a,
+ 0x23, 0x2b, 0x2c, 0xd0, 0x24, 0x2b, 0x39, 0xd0, 0xc3, 0x7c, 0x00, 0x2b, 0x02, 0xd1, 0x0b, 0x78,
+ 0x5b, 0x07, 0x01, 0xd4, 0x00, 0x20, 0xf8, 0xbd, 0x00, 0x25, 0x0b, 0x46, 0x4d, 0x84, 0x80, 0x33,
+ 0x1e, 0x79, 0x01, 0x2e, 0x00, 0xd0, 0x45, 0x75, 0x5b, 0x79, 0x00, 0x2b, 0x0f, 0xd0, 0x0f, 0x23,
+ 0xc3, 0x56, 0x9d, 0x1a, 0x00, 0x2d, 0x01, 0xdd, 0x5b, 0x1e, 0xc3, 0x73, 0x0f, 0x23, 0xc3, 0x56,
+ 0x9a, 0x1a, 0x01, 0xd5, 0x5b, 0x1c, 0xc3, 0x73, 0x01, 0x20, 0x48, 0x84, 0x53, 0xe0, 0x07, 0x20,
+ 0xc0, 0x43, 0xfb, 0xf7, 0xd3, 0xfc, 0x20, 0x68, 0x23, 0x21, 0x40, 0x30, 0x81, 0x72, 0xff, 0xf7,
+ 0x76, 0xff, 0x02, 0x28, 0xd7, 0xd0, 0x20, 0x68, 0x5d, 0x21, 0x09, 0x5c, 0xc1, 0x84, 0x08, 0x20,
+ 0xfb, 0xf7, 0xc4, 0xfc, 0x20, 0x68, 0x24, 0x21, 0x40, 0x30, 0x81, 0x72, 0xff, 0xf7, 0x67, 0xff,
+ 0x02, 0x28, 0xc8, 0xd0, 0x22, 0x68, 0x00, 0x26, 0x10, 0x46, 0x40, 0x30, 0x41, 0x7f, 0xd3, 0x8c,
+ 0xf6, 0x43, 0xc9, 0x1a, 0x09, 0xb2, 0xd1, 0x84, 0x00, 0x29, 0x10, 0xd0, 0x43, 0x7d, 0x00, 0x2b,
+ 0x31, 0xd0, 0x00, 0x29, 0x01, 0xdb, 0x01, 0x23, 0x00, 0xe0, 0x33, 0x46, 0x1c, 0x25, 0x45, 0x57,
+ 0x00, 0x2d, 0x01, 0xdb, 0x01, 0x25, 0x00, 0xe0, 0x35, 0x46, 0xab, 0x42, 0x23, 0xd0, 0x01, 0x23,
+ 0x53, 0x84, 0x00, 0x29, 0x01, 0xdb, 0x0d, 0x46, 0x00, 0xe0, 0x4d, 0x42, 0x1c, 0x23, 0xc3, 0x56,
+ 0x00, 0x2b, 0x01, 0xdb, 0x1f, 0x46, 0x00, 0xe0, 0x5f, 0x42, 0xbd, 0x42, 0x0a, 0xdd, 0x80, 0x32,
+ 0xd2, 0x78, 0x01, 0x2a, 0x1a, 0xd0, 0x0f, 0x22, 0x82, 0x56, 0x00, 0x2b, 0x00, 0xdb, 0x01, 0x26,
+ 0x92, 0x19, 0xc2, 0x73, 0x01, 0x77, 0x21, 0x68, 0x0f, 0x20, 0x40, 0x31, 0x08, 0x56, 0x18, 0x28,
+ 0x0f, 0xda, 0x18, 0x20, 0x10, 0xe0, 0x80, 0x32, 0xd2, 0x78, 0x01, 0x2a, 0x06, 0xd0, 0x0f, 0x22,
+ 0x82, 0x56, 0x00, 0x29, 0x00, 0xdb, 0x01, 0x26, 0x92, 0x1b, 0xea, 0xe7, 0x0f, 0x22, 0x82, 0x56,
+ 0xe7, 0xe7, 0x2c, 0x28, 0x01, 0xdd, 0x2c, 0x20, 0xc8, 0x73, 0x0f, 0x20, 0x08, 0x56, 0xfb, 0xf7,
+ 0xab, 0xfc, 0x20, 0x68, 0x01, 0x46, 0x40, 0x30, 0x42, 0x7d, 0x03, 0x46, 0x52, 0x1c, 0xd2, 0xb2,
+ 0x42, 0x75, 0x48, 0x8c, 0x01, 0x28, 0x03, 0xd0, 0x10, 0x2a, 0x01, 0xd2, 0x01, 0x20, 0x00, 0xe0,
+ 0x00, 0x20, 0x80, 0x31, 0x08, 0x71, 0x00, 0x20, 0x98, 0x72, 0xfb, 0xf7, 0x4f, 0xfc, 0x59, 0xe7,
+ 0x90, 0x00, 0x00, 0x20, 0x84, 0x00, 0x00, 0x20, 0xf3, 0x8f, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00,
+ 0x40, 0xa0, 0x01, 0x00, 0x60, 0x60, 0x00, 0x00, 0x60, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x20,
+ 0xfe, 0xb5, 0xfe, 0x4e, 0x30, 0x68, 0xff, 0x30, 0x01, 0x30, 0x45, 0x8e, 0x68, 0x46, 0x05, 0x80,
+ 0xac, 0x06, 0x30, 0x68, 0xa4, 0x0e, 0xfa, 0x4f, 0xc0, 0x19, 0x80, 0x88, 0x40, 0x07, 0xc0, 0x0f,
+ 0x0e, 0xd1, 0xe8, 0x0b, 0x0c, 0xd0, 0xb8, 0x05, 0x81, 0x8a, 0x04, 0x21, 0xc9, 0x43, 0x81, 0x82,
+ 0x31, 0x68, 0x04, 0x20, 0xc9, 0x19, 0x88, 0x80, 0x01, 0x21, 0x10, 0x20, 0x01, 0xf0, 0xf2, 0xfb,
+ 0xf0, 0x48, 0x01, 0x68, 0x08, 0x46, 0x80, 0x30, 0xc2, 0x7e, 0xa2, 0x42, 0x1b, 0xd0, 0x00, 0x23,
+ 0x01, 0x22, 0x00, 0x2c, 0x0e, 0xd0, 0x42, 0x31, 0x0d, 0x80, 0x02, 0x76, 0x03, 0x20, 0x00, 0x07,
+ 0x81, 0x8a, 0x83, 0x82, 0x30, 0x68, 0xc0, 0x19, 0x03, 0x80, 0x01, 0x23, 0x00, 0x92, 0x01, 0x94,
+ 0x03, 0x22, 0x04, 0xe0, 0xc2, 0x75, 0x01, 0x93, 0x00, 0x92, 0x01, 0x23, 0x04, 0x22, 0x09, 0x21,
+ 0x01, 0x20, 0x01, 0xf0, 0x59, 0xfb, 0xdf, 0x48, 0x00, 0x68, 0x80, 0x30, 0xc4, 0x76, 0xfe, 0xbd,
+ 0x7c, 0xb5, 0xda, 0x4c, 0x20, 0x68, 0xda, 0x49, 0x40, 0x39, 0x40, 0x18, 0xc0, 0x8c, 0x03, 0x23,
+ 0xc6, 0x07, 0xd8, 0x48, 0x1b, 0x07, 0x00, 0x68, 0x00, 0x21, 0x80, 0x30, 0x00, 0x2e, 0xd6, 0x4a,
+ 0xd3, 0x4d, 0x9e, 0x8a, 0x9a, 0x82, 0x0b, 0xd0, 0x23, 0x68, 0x02, 0x22, 0x5b, 0x19, 0x9a, 0x80,
+ 0x01, 0x22, 0x82, 0x75, 0xc2, 0x75, 0x00, 0x91, 0x01, 0x91, 0x13, 0x46, 0x0b, 0x21, 0x19, 0xe0,
+ 0x22, 0x68, 0x52, 0x19, 0x91, 0x80, 0x22, 0x68, 0x52, 0x19, 0x92, 0x88, 0x52, 0x07, 0xd2, 0x0f,
+ 0x0b, 0xd1, 0x9a, 0x8a, 0x99, 0x82, 0x22, 0x68, 0x52, 0x19, 0x52, 0x88, 0x23, 0x68, 0x52, 0x04,
+ 0x52, 0x0c, 0x5b, 0x19, 0x5a, 0x80, 0x81, 0x75, 0x41, 0x76, 0x00, 0x91, 0x01, 0x23, 0x04, 0x22,
+ 0x01, 0x91, 0x21, 0x21, 0x01, 0x20, 0x01, 0xf0, 0x17, 0xfb, 0x7c, 0xbd, 0x10, 0xb5, 0xbb, 0x48,
+ 0x00, 0x68, 0xbb, 0x49, 0x40, 0x39, 0x40, 0x18, 0x84, 0x8d, 0x60, 0x08, 0xc0, 0x07, 0x01, 0xd0,
+ 0xff, 0xf7, 0xb6, 0xff, 0xe0, 0x07, 0x01, 0xd0, 0xff, 0xf7, 0x6a, 0xff, 0x10, 0xbd, 0x7c, 0xb5,
+ 0xb4, 0x4e, 0x05, 0x46, 0x30, 0x68, 0x01, 0x24, 0x80, 0x30, 0xc0, 0x7d, 0x00, 0x28, 0x08, 0xd1,
+ 0x05, 0x20, 0x01, 0x90, 0x00, 0x23, 0x02, 0x22, 0x15, 0x21, 0x00, 0x94, 0x01, 0x20, 0x01, 0xf0,
+ 0xf3, 0xfa, 0x31, 0x68, 0x00, 0x20, 0x80, 0x31, 0x08, 0x76, 0x03, 0x22, 0xc8, 0x75, 0x12, 0x07,
+ 0x93, 0x8a, 0x90, 0x82, 0xa5, 0x48, 0x00, 0x68, 0xa5, 0x4a, 0x80, 0x18, 0x05, 0x80, 0x88, 0x7e,
+ 0x40, 0x1c, 0xc2, 0xb2, 0x8a, 0x76, 0xe8, 0xb2, 0x01, 0x2a, 0x00, 0x94, 0x01, 0x90, 0x06, 0xd0,
+ 0x00, 0x23, 0x02, 0x22, 0x0a, 0x21, 0x01, 0x20, 0x01, 0xf0, 0xd6, 0xfa, 0x7c, 0xbd, 0x00, 0x23,
+ 0x01, 0x22, 0x20, 0x21, 0xf7, 0xe7, 0x70, 0xb5, 0x98, 0x49, 0x08, 0x68, 0x98, 0x4a, 0x80, 0x18,
+ 0x43, 0x88, 0x01, 0x20, 0xc0, 0x03, 0x03, 0x43, 0x90, 0x05, 0x84, 0x8a, 0x01, 0x24, 0xe4, 0x43,
+ 0x84, 0x82, 0x0d, 0x68, 0x01, 0x24, 0xad, 0x18, 0xac, 0x80, 0x84, 0x8a, 0x00, 0x24, 0x84, 0x82,
+ 0x08, 0x68, 0x80, 0x18, 0x43, 0x80, 0x01, 0x21, 0x0c, 0x20, 0x01, 0xf0, 0x2b, 0xfb, 0x70, 0xbd,
+ 0x0f, 0xb4, 0x10, 0xb5, 0x03, 0x20, 0x00, 0x07, 0x81, 0x8a, 0xff, 0x21, 0x09, 0x02, 0x81, 0x82,
+ 0x6c, 0x46, 0xe1, 0x8e, 0xc9, 0x07, 0x0b, 0x0e, 0xa1, 0x8e, 0xc9, 0x07, 0x49, 0x0e, 0x0b, 0x43,
+ 0x61, 0x8e, 0xc9, 0x07, 0x89, 0x0e, 0x0b, 0x43, 0x21, 0x8e, 0xc9, 0x07, 0xc9, 0x0e, 0x0b, 0x43,
+ 0xe1, 0x8d, 0xc9, 0x07, 0x09, 0x0f, 0x0b, 0x43, 0xa1, 0x8d, 0xc9, 0x07, 0x49, 0x0f, 0x0b, 0x43,
+ 0x61, 0x8d, 0xc9, 0x07, 0x89, 0x0f, 0x0b, 0x43, 0x21, 0x8d, 0xc9, 0x07, 0xc9, 0x0f, 0x0b, 0x43,
+ 0x76, 0x49, 0x0c, 0x68, 0xd1, 0x22, 0x52, 0x02, 0xa4, 0x18, 0xe3, 0x86, 0x83, 0x8a, 0x23, 0x23,
+ 0x9b, 0x02, 0x83, 0x82, 0x6c, 0x46, 0x63, 0x8c, 0x24, 0x8c, 0xdb, 0x07, 0xe4, 0x07, 0x5b, 0x0c,
+ 0xa4, 0x0c, 0x23, 0x43, 0x6c, 0x46, 0xe4, 0x8b, 0xe4, 0x07, 0xe4, 0x0c, 0x23, 0x43, 0x6c, 0x46,
+ 0x64, 0x8b, 0xe4, 0x07, 0xa4, 0x0d, 0x23, 0x43, 0x6c, 0x46, 0x24, 0x8b, 0xe4, 0x07, 0xe4, 0x0d,
+ 0x23, 0x43, 0x6c, 0x46, 0xe4, 0x8a, 0xe4, 0x07, 0x24, 0x0e, 0x23, 0x43, 0x6c, 0x46, 0xa4, 0x8a,
+ 0xe4, 0x07, 0x64, 0x0e, 0x23, 0x43, 0x6c, 0x46, 0x64, 0x8a, 0xe4, 0x07, 0xa4, 0x0e, 0x23, 0x43,
+ 0x6c, 0x46, 0x24, 0x8a, 0xe4, 0x07, 0xe4, 0x0e, 0x23, 0x43, 0x6c, 0x46, 0xe4, 0x89, 0xe4, 0x07,
+ 0x24, 0x0f, 0x23, 0x43, 0x6c, 0x46, 0xa4, 0x89, 0xe4, 0x07, 0x64, 0x0f, 0x23, 0x43, 0x6c, 0x46,
+ 0x64, 0x89, 0xe4, 0x07, 0xa4, 0x0f, 0x23, 0x43, 0x6c, 0x46, 0x24, 0x89, 0xe4, 0x07, 0xe4, 0x0f,
+ 0x23, 0x43, 0x0c, 0x68, 0xa4, 0x18, 0x23, 0x87, 0x83, 0x8a, 0x01, 0x23, 0xdb, 0x03, 0x83, 0x82,
+ 0x10, 0xac, 0xa3, 0x8c, 0x64, 0x8c, 0xdb, 0x07, 0xe4, 0x07, 0x5b, 0x0c, 0xa4, 0x0c, 0x23, 0x43,
+ 0x10, 0xac, 0x24, 0x8c, 0xe4, 0x07, 0xe4, 0x0c, 0x23, 0x43, 0x10, 0xac, 0xe4, 0x8b, 0xe4, 0x07,
+ 0x24, 0x0d, 0x23, 0x43, 0x10, 0xac, 0xa4, 0x8b, 0xe4, 0x07, 0x64, 0x0d, 0x23, 0x43, 0x10, 0xac,
+ 0x64, 0x8b, 0xe4, 0x07, 0xa4, 0x0d, 0x23, 0x43, 0x10, 0xac, 0x24, 0x8b, 0xe4, 0x07, 0xe4, 0x0d,
+ 0x23, 0x43, 0x10, 0xac, 0xe4, 0x8a, 0xe4, 0x07, 0x24, 0x0e, 0x23, 0x43, 0x10, 0xac, 0xa4, 0x8a,
+ 0xe4, 0x07, 0x64, 0x0e, 0x23, 0x43, 0x10, 0xac, 0x64, 0x8a, 0xe4, 0x07, 0xa4, 0x0e, 0x23, 0x43,
+ 0x10, 0xac, 0x24, 0x8a, 0xe4, 0x07, 0xe4, 0x0e, 0x23, 0x43, 0x10, 0xac, 0xe4, 0x89, 0xe4, 0x07,
+ 0x24, 0x0f, 0x23, 0x43, 0x10, 0xac, 0xa4, 0x89, 0xe4, 0x07, 0x64, 0x0f, 0x23, 0x43, 0x10, 0xac,
+ 0x64, 0x89, 0xe4, 0x07, 0xa4, 0x0f, 0x23, 0x43, 0x10, 0xac, 0x24, 0x89, 0xe4, 0x07, 0xe4, 0x0f,
+ 0x23, 0x43, 0x0c, 0x68, 0xa4, 0x18, 0x63, 0x87, 0x83, 0x8a, 0x0f, 0x23, 0xdb, 0x43, 0x83, 0x82,
+ 0x10, 0xac, 0x60, 0x88, 0x23, 0x88, 0xc0, 0x07, 0xdb, 0x07, 0x00, 0x0f, 0x5b, 0x0f, 0x18, 0x43,
+ 0x6c, 0x46, 0xe3, 0x8f, 0x09, 0x68, 0xdb, 0x07, 0x9b, 0x0f, 0x18, 0x43, 0xa3, 0x8f, 0xdb, 0x07,
+ 0xdb, 0x0f, 0x18, 0x43, 0x89, 0x18, 0x88, 0x87, 0x10, 0xbc, 0x08, 0xbc, 0x00, 0x20, 0x04, 0xb0,
+ 0x18, 0x47, 0xff, 0xb5, 0xab, 0xb0, 0x1e, 0x00, 0x15, 0x46, 0x04, 0x46, 0x18, 0xd0, 0x00, 0x27,
+ 0x20, 0x21, 0x15, 0xa8, 0x01, 0xf0, 0xd6, 0xfa, 0x14, 0x21, 0x26, 0xa8, 0x01, 0xf0, 0xd2, 0xfa,
+ 0x00, 0x20, 0x00, 0x90, 0x01, 0x90, 0x02, 0x90, 0x24, 0x21, 0x1d, 0xa8, 0x01, 0xf0, 0xca, 0xfa,
+ 0x00, 0x2f, 0x0a, 0xd0, 0x12, 0x2d, 0x05, 0xdd, 0x06, 0x20, 0xad, 0x1f, 0xe9, 0xb2, 0x06, 0xe0,
+ 0x01, 0x27, 0xe5, 0xe7, 0xe9, 0xb2, 0x00, 0x20, 0x01, 0xe0, 0xe9, 0xb2, 0xf0, 0xb2, 0x2c, 0x9a,
+ 0xc3, 0x07, 0x12, 0x1b, 0x52, 0x1a, 0x12, 0x1a, 0xd5, 0xb2, 0x01, 0x22, 0x00, 0x2b, 0x01, 0xd1,
+ 0x06, 0x28, 0x01, 0xd3, 0x20, 0xab, 0x1a, 0x83, 0x02, 0x28, 0x07, 0xe0, 0x84, 0x00, 0x00, 0x20,
+ 0xc0, 0xa0, 0x01, 0x00, 0x90, 0x00, 0x00, 0x20, 0xfd, 0xff, 0x00, 0x00, 0x01, 0xd3, 0x20, 0xab,
+ 0x1a, 0x84, 0x04, 0x28, 0x04, 0xd3, 0x20, 0xab, 0x9a, 0x84, 0x06, 0x28, 0x00, 0xd3, 0x9a, 0x83,
+ 0xfe, 0x48, 0x20, 0x40, 0x01, 0x28, 0x01, 0xd0, 0x0a, 0x2c, 0x01, 0xdb, 0x10, 0xa8, 0x82, 0x86,
+ 0x02, 0x2c, 0x01, 0xdb, 0x20, 0xa8, 0x82, 0x81, 0x04, 0x2c, 0x01, 0xdb, 0x20, 0xa8, 0xc2, 0x80,
+ 0x06, 0x2c, 0x01, 0xdb, 0x20, 0xa8, 0x02, 0x80, 0x08, 0x2c, 0x04, 0xdb, 0x10, 0xa8, 0x42, 0x87,
+ 0x0a, 0x2c, 0x00, 0xdb, 0x42, 0x85, 0xc8, 0x07, 0x01, 0xd1, 0x08, 0x29, 0x01, 0xd3, 0x10, 0xa8,
+ 0x82, 0x82, 0x02, 0x29, 0x01, 0xd3, 0x10, 0xa8, 0x82, 0x83, 0x04, 0x29, 0x01, 0xd3, 0x10, 0xa8,
+ 0x02, 0x84, 0x06, 0x29, 0x04, 0xd3, 0x10, 0xa8, 0x82, 0x84, 0x08, 0x29, 0x00, 0xd3, 0x02, 0x83,
+ 0x10, 0xa8, 0x44, 0x8d, 0x00, 0x2c, 0x1f, 0xd1, 0xc8, 0x07, 0x01, 0xd0, 0x08, 0x29, 0x19, 0xd2,
+ 0x12, 0x29, 0x17, 0xd2, 0x10, 0xa8, 0x40, 0x8f, 0x01, 0x28, 0x01, 0xd1, 0x0a, 0x29, 0x11, 0xd2,
+ 0x20, 0xa8, 0x00, 0x88, 0x01, 0x28, 0x01, 0xd1, 0x0c, 0x29, 0x0b, 0xd2, 0x20, 0xa8, 0xc0, 0x88,
+ 0x01, 0x28, 0x01, 0xd1, 0x0e, 0x29, 0x05, 0xd2, 0x20, 0xa8, 0x80, 0x89, 0x01, 0x28, 0x03, 0xd1,
+ 0x10, 0x29, 0x01, 0xd3, 0x10, 0xa8, 0x82, 0x85, 0x10, 0xab, 0x58, 0x8f, 0x03, 0x90, 0x00, 0x28,
+ 0x02, 0xd1, 0x0a, 0x29, 0x00, 0xd3, 0x9a, 0x87, 0x20, 0xa8, 0x00, 0x88, 0x84, 0x46, 0x00, 0x28,
+ 0x03, 0xd1, 0x0c, 0x29, 0x01, 0xd3, 0x20, 0xa8, 0x42, 0x80, 0x20, 0xa8, 0xc7, 0x88, 0x00, 0x2f,
+ 0x02, 0xd1, 0x0e, 0x29, 0x00, 0xd3, 0x02, 0x81, 0x86, 0x89, 0x00, 0x2e, 0x02, 0xd1, 0x10, 0x29,
+ 0x00, 0xd3, 0xc2, 0x81, 0x9b, 0x8e, 0x00, 0x2b, 0x15, 0xd1, 0x12, 0x29, 0x11, 0xd2, 0x03, 0x98,
+ 0x01, 0x28, 0x01, 0xd1, 0x0a, 0x29, 0x0c, 0xd2, 0x60, 0x46, 0x01, 0x28, 0x01, 0xd1, 0x0c, 0x29,
+ 0x07, 0xd2, 0x01, 0x2f, 0x01, 0xd1, 0x0e, 0x29, 0x03, 0xd2, 0x01, 0x2e, 0x03, 0xd1, 0x10, 0x29,
+ 0x01, 0xd3, 0x10, 0xa8, 0xc2, 0x86, 0x00, 0x2d, 0x7e, 0xd0, 0x6d, 0x1e, 0xe8, 0xb2, 0xc1, 0x07,
+ 0x01, 0xd0, 0x69, 0x46, 0x0a, 0x80, 0x40, 0x08, 0xf6, 0xd0, 0xc1, 0x07, 0x05, 0xd0, 0x40, 0x1e,
+ 0x69, 0x46, 0x00, 0x06, 0x4a, 0x80, 0x00, 0x0e, 0xee, 0xd0, 0x69, 0x46, 0x89, 0x88, 0x00, 0x29,
+ 0x05, 0xd1, 0x80, 0x1e, 0x69, 0x46, 0x00, 0x06, 0x8a, 0x80, 0x00, 0x0e, 0xe4, 0xd0, 0x69, 0x46,
+ 0xc9, 0x88, 0x00, 0x29, 0x05, 0xd1, 0x80, 0x1e, 0x69, 0x46, 0x00, 0x06, 0xca, 0x80, 0x00, 0x0e,
+ 0xda, 0xd0, 0x69, 0x46, 0x49, 0x88, 0x00, 0x29, 0x6f, 0xd1, 0x20, 0xa9, 0xc9, 0x8b, 0x00, 0x29,
+ 0x0d, 0xd1, 0x20, 0xa9, 0x89, 0x8b, 0x00, 0x29, 0x09, 0xd1, 0x69, 0x46, 0x4a, 0x80, 0x80, 0x1e,
+ 0x20, 0xa9, 0x00, 0x06, 0xca, 0x83, 0x00, 0x0e, 0xc6, 0xd0, 0x00, 0x2a, 0x5d, 0xd1, 0x20, 0xa9,
+ 0x49, 0x8b, 0x00, 0x29, 0x0d, 0xd1, 0x20, 0xa9, 0x09, 0x8b, 0x00, 0x29, 0x09, 0xd1, 0x69, 0x46,
+ 0x4a, 0x80, 0x80, 0x1e, 0x20, 0xa9, 0x00, 0x06, 0x4a, 0x83, 0x00, 0x0e, 0xb4, 0xd0, 0x00, 0x2a,
+ 0x4b, 0xd1, 0x10, 0xa9, 0x49, 0x8b, 0x00, 0x29, 0x0d, 0xd1, 0x10, 0xa9, 0x09, 0x8b, 0x00, 0x29,
+ 0x09, 0xd1, 0x69, 0x46, 0x4a, 0x80, 0x80, 0x1e, 0x10, 0xa9, 0x00, 0x06, 0x4a, 0x83, 0x00, 0x0e,
+ 0xa2, 0xd0, 0x00, 0x2a, 0x39, 0xd1, 0x10, 0xa9, 0xc9, 0x8a, 0x00, 0x29, 0x0d, 0xd1, 0x10, 0xa9,
+ 0x89, 0x8a, 0x00, 0x29, 0x09, 0xd1, 0x69, 0x46, 0x4a, 0x80, 0x80, 0x1e, 0x10, 0xa9, 0x00, 0x06,
+ 0xca, 0x82, 0x00, 0x0e, 0x90, 0xd0, 0x00, 0x2a, 0x27, 0xd1, 0x10, 0xa9, 0x09, 0x8f, 0x00, 0x29,
+ 0x11, 0xd1, 0x00, 0x2b, 0x0f, 0xd1, 0x10, 0xa9, 0xc9, 0x8e, 0x00, 0x29, 0x0b, 0xd1, 0x69, 0x46,
+ 0x4a, 0x80, 0x10, 0xa9, 0x0a, 0x87, 0x00, 0xe0, 0x1e, 0xe1, 0x80, 0x1e, 0x00, 0x06, 0x00, 0x0e,
+ 0x8a, 0xd0, 0x00, 0x2a, 0x11, 0xd1, 0x10, 0xa9, 0xc9, 0x8d, 0x00, 0x29, 0x0d, 0xd1, 0x00, 0x2c,
+ 0x0b, 0xd1, 0x10, 0xa9, 0x89, 0x8d, 0x00, 0x29, 0x07, 0xd1, 0x69, 0x46, 0x4a, 0x80, 0x80, 0x1e,
+ 0x10, 0xa9, 0x00, 0x06, 0xca, 0x85, 0x00, 0x0e, 0x8a, 0xd0, 0x20, 0xa9, 0xc9, 0x8c, 0x00, 0x29,
+ 0x09, 0xd1, 0x20, 0xa9, 0x89, 0x8c, 0x00, 0x29, 0x05, 0xd1, 0x80, 0x1e, 0x20, 0xa9, 0x00, 0x06,
+ 0xca, 0x84, 0x00, 0x0e, 0x90, 0xd0, 0x20, 0xa9, 0x49, 0x8c, 0x00, 0x29, 0x09, 0xd1, 0x20, 0xa9,
+ 0x09, 0x8c, 0x00, 0x29, 0x05, 0xd1, 0x80, 0x1e, 0x20, 0xa9, 0x00, 0x06, 0x4a, 0x84, 0x00, 0x0e,
+ 0x94, 0xd0, 0x10, 0xa9, 0xc9, 0x8c, 0x00, 0x29, 0x09, 0xd1, 0x10, 0xa9, 0x89, 0x8c, 0x00, 0x29,
+ 0x05, 0xd1, 0x80, 0x1e, 0x10, 0xa9, 0x00, 0x06, 0xca, 0x84, 0x00, 0x0e, 0x86, 0xd0, 0x10, 0xa9,
+ 0x49, 0x8c, 0x00, 0x29, 0x09, 0xd1, 0x10, 0xa9, 0x09, 0x8c, 0x00, 0x29, 0x05, 0xd1, 0x80, 0x1e,
+ 0x10, 0xa9, 0x00, 0x06, 0x4a, 0x84, 0x00, 0x0e, 0x8a, 0xd0, 0x10, 0xa9, 0xc9, 0x8b, 0x00, 0x29,
+ 0x09, 0xd1, 0x10, 0xa9, 0x89, 0x8b, 0x00, 0x29, 0x05, 0xd1, 0x80, 0x1e, 0x10, 0xa9, 0x00, 0x06,
+ 0xca, 0x83, 0x00, 0x0e, 0x8e, 0xd0, 0x20, 0xa9, 0x09, 0x8a, 0x00, 0x29, 0x0b, 0xd1, 0x00, 0x2e,
+ 0x09, 0xd1, 0x20, 0xa9, 0xc9, 0x89, 0x00, 0x29, 0x05, 0xd1, 0x80, 0x1e, 0x20, 0xa9, 0x00, 0x06,
+ 0x0a, 0x82, 0x00, 0x0e, 0x94, 0xd0, 0x20, 0xa9, 0x49, 0x89, 0x00, 0x29, 0x0b, 0xd1, 0x00, 0x2f,
+ 0x09, 0xd1, 0x20, 0xa9, 0x09, 0x89, 0x00, 0x29, 0x05, 0xd1, 0x80, 0x1e, 0x20, 0xa9, 0x00, 0x06,
+ 0x4a, 0x81, 0x00, 0x0e, 0x84, 0xd0, 0x20, 0xa9, 0x89, 0x88, 0x00, 0x29, 0x0c, 0xd1, 0x61, 0x46,
+ 0x00, 0x29, 0x09, 0xd1, 0x20, 0xa9, 0x49, 0x88, 0x00, 0x29, 0x05, 0xd1, 0x80, 0x1e, 0x20, 0xa9,
+ 0x00, 0x06, 0x8a, 0x80, 0x00, 0x0e, 0x87, 0xd0, 0x10, 0xa9, 0xc9, 0x8f, 0x00, 0x29, 0x0c, 0xd1,
+ 0x03, 0x99, 0x00, 0x29, 0x09, 0xd1, 0x10, 0xa9, 0x89, 0x8f, 0x00, 0x29, 0x05, 0xd1, 0x80, 0x1e,
+ 0x10, 0xa9, 0x00, 0x06, 0xca, 0x87, 0x00, 0x0e, 0x7e, 0xd0, 0x20, 0xa9, 0xc9, 0x8b, 0x00, 0x29,
+ 0x3a, 0xd1, 0x20, 0xa9, 0x89, 0x8b, 0x00, 0x29, 0x36, 0xd1, 0x20, 0xad, 0x6d, 0x8b, 0x00, 0x2d,
+ 0x0e, 0xd1, 0x20, 0xad, 0x2d, 0x8b, 0x00, 0x2d, 0x0a, 0xd1, 0x20, 0xad, 0x80, 0x1e, 0xea, 0x83,
+ 0x00, 0x06, 0x6a, 0x83, 0x00, 0x0e, 0x67, 0xd0, 0x00, 0x2a, 0x25, 0xd1, 0x00, 0x29, 0x23, 0xd1,
+ 0x10, 0xad, 0x6d, 0x8b, 0x00, 0x2d, 0x0f, 0xd1, 0x10, 0xad, 0x2d, 0x8b, 0x00, 0x2d, 0x0b, 0xd1,
+ 0x20, 0xad, 0xea, 0x83, 0x80, 0x1e, 0x10, 0xad, 0x00, 0x06, 0x6a, 0x83, 0x00, 0x0e, 0x53, 0xd0,
+ 0x00, 0x2a, 0x11, 0xd1, 0x00, 0x29, 0x0f, 0xd1, 0x10, 0xa9, 0xc9, 0x8a, 0x00, 0x29, 0x0b, 0xd1,
+ 0x10, 0xa9, 0x89, 0x8a, 0x00, 0x29, 0x07, 0xd1, 0x20, 0xa9, 0xca, 0x83, 0x80, 0x1e, 0x10, 0xa9,
+ 0x00, 0x06, 0xca, 0x82, 0x00, 0x0e, 0x3f, 0xd0, 0x20, 0xa9, 0x49, 0x8b, 0x00, 0x29, 0x2a, 0xd1,
+ 0x20, 0xa9, 0x09, 0x8b, 0x00, 0x29, 0x26, 0xd1, 0x10, 0xad, 0x6d, 0x8b, 0x00, 0x2d, 0x12, 0xd1,
+ 0x10, 0xad, 0x2d, 0x8b, 0x00, 0x2d, 0x0e, 0xd1, 0x20, 0xad, 0x01, 0xe0, 0x01, 0x00, 0x00, 0x80,
+ 0x6a, 0x83, 0x80, 0x1e, 0x10, 0xad, 0x00, 0x06, 0x6a, 0x83, 0x00, 0x0e, 0x24, 0xd0, 0x00, 0x2a,
+ 0x11, 0xd1, 0x00, 0x29, 0x0f, 0xd1, 0x10, 0xa9, 0xc9, 0x8a, 0x00, 0x29, 0x0b, 0xd1, 0x10, 0xa9,
+ 0x89, 0x8a, 0x00, 0x29, 0x07, 0xd1, 0x20, 0xa9, 0x4a, 0x83, 0x80, 0x1e, 0x10, 0xa9, 0x00, 0x06,
+ 0xca, 0x82, 0x00, 0x0e, 0x10, 0xd0, 0x10, 0xa9, 0x49, 0x8b, 0x00, 0x29, 0x14, 0xd1, 0x10, 0xa9,
+ 0x09, 0x8b, 0x00, 0x29, 0x10, 0xd1, 0x10, 0xa9, 0xc9, 0x8a, 0x00, 0x29, 0x0c, 0xd1, 0x10, 0xa9,
+ 0x89, 0x8a, 0x00, 0x29, 0x08, 0xd1, 0x00, 0xe0, 0x84, 0xe0, 0x10, 0xa9, 0x80, 0x1e, 0x4a, 0x83,
+ 0x00, 0x06, 0xca, 0x82, 0x00, 0x0e, 0x7d, 0xd0, 0x20, 0xa9, 0xc9, 0x8b, 0x00, 0x29, 0x2b, 0xd1,
+ 0x20, 0xa9, 0x89, 0x8b, 0x00, 0x29, 0x27, 0xd1, 0x10, 0xad, 0x2d, 0x8f, 0x00, 0x2d, 0x11, 0xd1,
+ 0x00, 0x2b, 0x0f, 0xd1, 0x10, 0xad, 0xed, 0x8e, 0x00, 0x2d, 0x0b, 0xd1, 0x20, 0xad, 0xea, 0x83,
+ 0x80, 0x1e, 0x10, 0xad, 0x00, 0x06, 0x2a, 0x87, 0x00, 0x0e, 0x63, 0xd0, 0x00, 0x2a, 0x13, 0xd1,
+ 0x00, 0x29, 0x11, 0xd1, 0x10, 0xa9, 0xc9, 0x8d, 0x00, 0x29, 0x0d, 0xd1, 0x00, 0x2c, 0x0b, 0xd1,
+ 0x10, 0xa9, 0x89, 0x8d, 0x00, 0x29, 0x07, 0xd1, 0x20, 0xa9, 0xca, 0x83, 0x80, 0x1e, 0x10, 0xa9,
+ 0x00, 0x06, 0xca, 0x85, 0x00, 0x0e, 0x4d, 0xd0, 0x20, 0xa9, 0x49, 0x8b, 0x00, 0x29, 0x2b, 0xd1,
+ 0x20, 0xa9, 0x09, 0x8b, 0x00, 0x29, 0x27, 0xd1, 0x10, 0xad, 0x2d, 0x8f, 0x00, 0x2d, 0x11, 0xd1,
+ 0x00, 0x2b, 0x0f, 0xd1, 0x10, 0xad, 0xed, 0x8e, 0x00, 0x2d, 0x0b, 0xd1, 0x20, 0xad, 0x6a, 0x83,
+ 0x80, 0x1e, 0x10, 0xad, 0x00, 0x06, 0x2a, 0x87, 0x00, 0x0e, 0x33, 0xd0, 0x00, 0x2a, 0x13, 0xd1,
+ 0x00, 0x29, 0x11, 0xd1, 0x10, 0xa9, 0xc9, 0x8d, 0x00, 0x29, 0x0d, 0xd1, 0x00, 0x2c, 0x0b, 0xd1,
+ 0x10, 0xa9, 0x89, 0x8d, 0x00, 0x29, 0x07, 0xd1, 0x20, 0xa9, 0x4a, 0x83, 0x80, 0x1e, 0x10, 0xa9,
+ 0x00, 0x06, 0xca, 0x85, 0x00, 0x0e, 0x74, 0xd0, 0x10, 0xa9, 0x49, 0x8b, 0x00, 0x29, 0x2b, 0xd1,
+ 0x10, 0xa9, 0x09, 0x8b, 0x00, 0x29, 0x27, 0xd1, 0x10, 0xad, 0x2d, 0x8f, 0x00, 0x2d, 0x10, 0xd1,
+ 0x00, 0x2b, 0x0e, 0xd1, 0x10, 0xad, 0xed, 0x8e, 0x00, 0x2d, 0x0a, 0xd1, 0x10, 0xad, 0x80, 0x1e,
+ 0x6a, 0x83, 0x00, 0x06, 0x2a, 0x87, 0x00, 0x0e, 0x5b, 0xd0, 0x00, 0x2a, 0x14, 0xd1, 0x00, 0x29,
+ 0x12, 0xd1, 0x00, 0xe0, 0x55, 0xe0, 0x10, 0xa9, 0xc9, 0x8d, 0x00, 0x29, 0x0c, 0xd1, 0x00, 0x2c,
+ 0x0a, 0xd1, 0x10, 0xa9, 0x89, 0x8d, 0x00, 0x29, 0x06, 0xd1, 0x10, 0xa9, 0x80, 0x1e, 0x4a, 0x83,
+ 0x00, 0x06, 0xca, 0x85, 0x00, 0x0e, 0x44, 0xd0, 0x10, 0xa9, 0xc9, 0x8a, 0x00, 0x29, 0x29, 0xd1,
+ 0x10, 0xa9, 0x89, 0x8a, 0x00, 0x29, 0x25, 0xd1, 0x10, 0xad, 0x2d, 0x8f, 0x00, 0x2d, 0x10, 0xd1,
+ 0x00, 0x2b, 0x0e, 0xd1, 0x10, 0xad, 0xed, 0x8e, 0x00, 0x2d, 0x0a, 0xd1, 0x10, 0xad, 0x80, 0x1e,
+ 0xea, 0x82, 0x00, 0x06, 0x2a, 0x87, 0x00, 0x0e, 0x2b, 0xd0, 0x00, 0x2a, 0x12, 0xd1, 0x00, 0x29,
+ 0x10, 0xd1, 0x10, 0xa9, 0xc9, 0x8d, 0x00, 0x29, 0x0c, 0xd1, 0x00, 0x2c, 0x0a, 0xd1, 0x10, 0xa9,
+ 0x89, 0x8d, 0x00, 0x29, 0x06, 0xd1, 0x10, 0xa9, 0x80, 0x1e, 0xca, 0x82, 0x00, 0x06, 0xca, 0x85,
+ 0x00, 0x0e, 0x16, 0xd0, 0x10, 0xa8, 0x00, 0x8f, 0x00, 0x28, 0x12, 0xd1, 0x00, 0x2b, 0x10, 0xd1,
+ 0x10, 0xa8, 0xc0, 0x8e, 0x00, 0x28, 0x0c, 0xd1, 0x10, 0xa8, 0xc0, 0x8d, 0x00, 0x28, 0x08, 0xd1,
+ 0x00, 0x2c, 0x06, 0xd1, 0x10, 0xa8, 0x80, 0x8d, 0x00, 0x28, 0x02, 0xd1, 0x10, 0xa8, 0x02, 0x87,
+ 0xc2, 0x85, 0x22, 0x22, 0x1d, 0xa9, 0x0c, 0xa8, 0xf9, 0xf7, 0x1c, 0xfc, 0x6b, 0x46, 0x07, 0xcb,
+ 0x09, 0xab, 0x07, 0xc3, 0x14, 0x22, 0x26, 0xa9, 0x04, 0xa8, 0xf9, 0xf7, 0x13, 0xfc, 0x19, 0xac,
+ 0x0f, 0xcc, 0x6c, 0x46, 0x0f, 0xc4, 0x15, 0xac, 0x0f, 0xcc, 0xff, 0xf7, 0xb9, 0xfb, 0x2f, 0xb0,
+ 0xf0, 0xbd, 0xf8, 0xb5, 0x03, 0x24, 0x24, 0x07, 0xa5, 0x8a, 0xca, 0x4d, 0xa5, 0x82, 0x06, 0x07,
+ 0x36, 0x0f, 0xd5, 0x06, 0xed, 0x0c, 0x2e, 0x43, 0xc7, 0x4d, 0x2f, 0x68, 0xc7, 0x4d, 0x7f, 0x19,
+ 0x3e, 0x81, 0xa6, 0x8a, 0x3f, 0x26, 0xf6, 0x43, 0xa6, 0x82, 0xc3, 0x4f, 0x8e, 0x06, 0x3f, 0x68,
+ 0xb6, 0x0e, 0x7d, 0x19, 0x6e, 0x81, 0xa5, 0x8a, 0xc1, 0x4d, 0xa5, 0x82, 0x00, 0x2b, 0x05, 0xd0,
+ 0x00, 0x24, 0x65, 0x03, 0x00, 0x28, 0x03, 0xdd, 0x01, 0x24, 0x02, 0xe0, 0x01, 0x24, 0xf8, 0xe7,
+ 0x00, 0x24, 0x24, 0x03, 0x25, 0x43, 0x00, 0x2a, 0x01, 0xdd, 0x01, 0x24, 0x00, 0xe0, 0x00, 0x24,
+ 0xe4, 0x02, 0x25, 0x43, 0x00, 0x2b, 0x01, 0xdd, 0x01, 0x24, 0x00, 0xe0, 0x00, 0x24, 0xa4, 0x02,
+ 0x25, 0x43, 0xb1, 0x4c, 0x26, 0x68, 0xb1, 0x4f, 0x80, 0x37, 0xf6, 0x19, 0x75, 0x81, 0x03, 0x25,
+ 0x2d, 0x07, 0xae, 0x8a, 0x0f, 0x26, 0xf6, 0x43, 0xae, 0x82, 0x1d, 0x07, 0x24, 0x68, 0x2d, 0x0f,
+ 0xd1, 0x26, 0x76, 0x02, 0xa4, 0x19, 0x25, 0x84, 0xff, 0xf7, 0x4b, 0xfc, 0xf8, 0xbd, 0xfe, 0xb5,
+ 0x00, 0x20, 0x69, 0x46, 0x08, 0x81, 0xa4, 0x48, 0x01, 0x68, 0xa4, 0x4a, 0x40, 0x3a, 0x89, 0x18,
+ 0x49, 0x8d, 0x00, 0x68, 0xff, 0x30, 0x01, 0x30, 0x00, 0x8e, 0x69, 0x46, 0x08, 0x80, 0x00, 0x20,
+ 0x0d, 0x88, 0x84, 0x46, 0xa8, 0x04, 0x0c, 0x27, 0x30, 0x26, 0x00, 0x28, 0x0a, 0xda, 0x00, 0x20,
+ 0x02, 0x46, 0x3c, 0x21, 0x63, 0x46, 0xff, 0xf7, 0x94, 0xff, 0xb7, 0x43, 0x10, 0x37, 0xb8, 0x08,
+ 0x80, 0x00, 0x10, 0xe0, 0xe8, 0x04, 0x12, 0xd5, 0x96, 0x4b, 0x17, 0x20, 0x18, 0x22, 0x16, 0x21,
+ 0x18, 0x56, 0x9a, 0x56, 0x59, 0x56, 0x63, 0x46, 0xff, 0xf7, 0x83, 0xff, 0x04, 0x20, 0xb0, 0x43,
+ 0x10, 0x30, 0x80, 0x08, 0x80, 0x00, 0x69, 0x46, 0x40, 0x1c, 0x08, 0x81, 0xfe, 0xe0, 0xa8, 0x06,
+ 0xfc, 0xd0, 0x89, 0x4a, 0x10, 0x68, 0x89, 0x4b, 0xc0, 0x18, 0x40, 0x89, 0x81, 0x06, 0x10, 0x68,
+ 0x89, 0x0e, 0xc0, 0x18, 0x00, 0x89, 0x12, 0x68, 0x00, 0x07, 0x00, 0x0f, 0xd2, 0x18, 0x12, 0x89,
+ 0x2b, 0x07, 0xd2, 0x04, 0xd2, 0x0e, 0x00, 0x24, 0x9b, 0x0f, 0x01, 0x2b, 0x02, 0xd0, 0x02, 0x2b,
+ 0x18, 0xd0, 0x31, 0xe0, 0x49, 0x1c, 0x21, 0x29, 0x07, 0xdb, 0x3c, 0x29, 0x03, 0xdc, 0x43, 0x18,
+ 0x9b, 0x18, 0x3c, 0x2b, 0x01, 0xdd, 0x49, 0x1e, 0x17, 0xe0, 0x01, 0x24, 0x4b, 0x1c, 0x21, 0x2b,
+ 0x06, 0xdb, 0x3c, 0x2b, 0x1e, 0xdc, 0x43, 0x18, 0x9b, 0x18, 0x5b, 0x1c, 0x3c, 0x2b, 0x19, 0xdc,
+ 0x04, 0x27, 0x17, 0xe0, 0x08, 0x27, 0x49, 0x1e, 0x3c, 0x29, 0x08, 0xdc, 0x21, 0x29, 0x03, 0xdb,
+ 0x0b, 0x1a, 0x9b, 0x1a, 0x06, 0x2b, 0x02, 0xda, 0x49, 0x1c, 0x49, 0xb2, 0x0a, 0xe0, 0x01, 0x24,
+ 0x4b, 0x1e, 0x3c, 0x2b, 0xec, 0xdc, 0x21, 0x2b, 0x04, 0xdb, 0x0b, 0x1a, 0x9b, 0x1a, 0x5b, 0x1e,
+ 0x06, 0x2b, 0xe5, 0xda, 0x6b, 0x46, 0x1f, 0x81, 0xab, 0x06, 0x9b, 0x0f, 0x01, 0x2b, 0x02, 0xd0,
+ 0x02, 0x2b, 0x1a, 0xd0, 0x47, 0xe0, 0x52, 0x1e, 0x18, 0x2a, 0x07, 0xdc, 0x00, 0x2a, 0x05, 0xda,
+ 0x6f, 0x46, 0x3b, 0x89, 0x33, 0x43, 0x3b, 0x81, 0x52, 0x1c, 0x3c, 0xe0, 0x01, 0x24, 0x53, 0x1e,
+ 0x18, 0x2b, 0x05, 0xdc, 0x00, 0x2b, 0x03, 0xda, 0x6f, 0x46, 0x3b, 0x89, 0x33, 0x43, 0x31, 0xe0,
+ 0x6f, 0x46, 0x3b, 0x89, 0xb3, 0x43, 0x10, 0x33, 0x2c, 0xe0, 0x52, 0x1c, 0x13, 0xd4, 0x18, 0x2a,
+ 0x0a, 0xdc, 0x43, 0x18, 0x9b, 0x18, 0x3c, 0x2b, 0x06, 0xdc, 0x0b, 0x1a, 0x9b, 0x1a, 0x06, 0x2b,
+ 0x02, 0xdb, 0x83, 0x18, 0x18, 0x2b, 0x06, 0xdd, 0x6f, 0x46, 0x3b, 0x89, 0xb3, 0x43, 0x20, 0x33,
+ 0x3b, 0x81, 0x52, 0x1e, 0x17, 0xe0, 0x01, 0x24, 0x53, 0x1c, 0xe1, 0xd4, 0x18, 0x2b, 0x0d, 0xdc,
+ 0x43, 0x18, 0x9b, 0x18, 0x5b, 0x1c, 0x3c, 0x2b, 0x08, 0xdc, 0x0b, 0x1a, 0x9b, 0x1a, 0x5b, 0x1e,
+ 0x06, 0x2b, 0x03, 0xdb, 0x83, 0x18, 0x5b, 0x1c, 0x18, 0x2b, 0xd1, 0xdd, 0x6f, 0x46, 0x3b, 0x89,
+ 0xb3, 0x43, 0x20, 0x33, 0x3b, 0x81, 0xab, 0x07, 0x9b, 0x0f, 0x01, 0x2b, 0x02, 0xd0, 0x02, 0x2b,
+ 0x1d, 0xd0, 0x4c, 0xe0, 0x03, 0x26, 0x40, 0x1e, 0x0a, 0x28, 0x07, 0xdc, 0x00, 0x28, 0x05, 0xda,
+ 0x6f, 0x46, 0x3b, 0x89, 0x33, 0x43, 0x3b, 0x81, 0x40, 0x1c, 0x40, 0xe0, 0x01, 0x24, 0x43, 0x1e,
+ 0x0a, 0x2b, 0x06, 0xdc, 0x00, 0x2b, 0x04, 0xda, 0x6f, 0x46, 0x3b, 0x89, 0x33, 0x43, 0x3b, 0x81,
+ 0x35, 0xe0, 0x6e, 0x46, 0x33, 0x89, 0x9b, 0x08, 0x9b, 0x00, 0x5b, 0x1c, 0x2e, 0xe0, 0x40, 0x1c,
+ 0x14, 0xd4, 0x0a, 0x28, 0x0a, 0xdc, 0x43, 0x18, 0x9b, 0x18, 0x3c, 0x2b, 0x06, 0xdc, 0x0b, 0x1a,
+ 0x9b, 0x1a, 0x06, 0x2b, 0x02, 0xdb, 0x83, 0x18, 0x18, 0x2b, 0x07, 0xdd, 0x6e, 0x46, 0x33, 0x89,
+ 0x9b, 0x08, 0x9b, 0x00, 0x9b, 0x1c, 0x33, 0x81, 0x40, 0x1e, 0x18, 0xe0, 0x01, 0x24, 0x43, 0x1c,
+ 0xdf, 0xd4, 0x0a, 0x2b, 0x0d, 0xdc, 0x43, 0x18, 0x9b, 0x18, 0x5b, 0x1c, 0x3c, 0x2b, 0x08, 0xdc,
+ 0x0b, 0x1a, 0x9b, 0x1a, 0x5b, 0x1e, 0x06, 0x2b, 0x03, 0xdb, 0x83, 0x18, 0x5b, 0x1c, 0x18, 0x2b,
+ 0xcf, 0xdd, 0x6e, 0x46, 0x33, 0x89, 0x9b, 0x08, 0x9b, 0x00, 0x9b, 0x1c, 0x33, 0x81, 0x63, 0x46,
+ 0xff, 0xf7, 0x87, 0xfe, 0x00, 0x2c, 0x09, 0xd0, 0xa9, 0x06, 0x89, 0x0e, 0x01, 0x20, 0x01, 0x91,
+ 0x03, 0x46, 0x04, 0x22, 0x00, 0x90, 0x1f, 0x21, 0x00, 0xf0, 0xe6, 0xfc, 0x0a, 0x4a, 0x10, 0x68,
+ 0x0a, 0x4b, 0xc0, 0x18, 0x80, 0x89, 0xc1, 0x03, 0x68, 0x46, 0x00, 0x89, 0x40, 0x04, 0x40, 0x0c,
+ 0x08, 0x43, 0x99, 0x05, 0x8c, 0x8a, 0x00, 0x24, 0x8c, 0x82, 0x11, 0x68, 0xc9, 0x18, 0x48, 0x80,
+ 0xfe, 0xbd, 0x00, 0x00, 0xf0, 0xe0, 0x00, 0x00, 0x84, 0x00, 0x00, 0x20, 0xc0, 0xa0, 0x01, 0x00,
+ 0xff, 0xc3, 0x00, 0x00, 0x00, 0x04, 0x00, 0x20, 0xf0, 0xb5, 0xf9, 0x4a, 0x3e, 0x23, 0x11, 0x88,
+ 0x00, 0x25, 0x99, 0x43, 0xf4, 0x4c, 0xf5, 0x4e, 0x03, 0x00, 0x00, 0xf0, 0x09, 0xfe, 0x09, 0x06,
+ 0x37, 0x68, 0x99, 0xca, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0x00, 0x03, 0x20, 0x00, 0x07, 0x83, 0x8a,
+ 0x3f, 0x23, 0x9b, 0x02, 0x83, 0x82, 0xef, 0x4f, 0x48, 0x23, 0x3f, 0x68, 0x3f, 0x19, 0x3b, 0x86,
+ 0x83, 0x8a, 0x83, 0x13, 0x83, 0x82, 0xeb, 0x4b, 0x1b, 0x68, 0x1b, 0x19, 0xdd, 0x85, 0x83, 0x8a,
+ 0xe9, 0x4b, 0x83, 0x82, 0xe7, 0x4b, 0x1b, 0x68, 0x1b, 0x19, 0x9d, 0x85, 0x83, 0x8a, 0x06, 0x23,
+ 0xdb, 0x43, 0x83, 0x82, 0xe3, 0x4f, 0x04, 0x23, 0x3f, 0x68, 0x3f, 0x19, 0x7b, 0x86, 0x83, 0x8a,
+ 0x86, 0x82, 0xe0, 0x4b, 0x1b, 0x68, 0x1b, 0x19, 0x5d, 0x86, 0x83, 0x8a, 0x86, 0x82, 0xdd, 0x4b,
+ 0x01, 0x20, 0x1b, 0x68, 0x1b, 0x19, 0x58, 0x86, 0x2e, 0x31, 0x8c, 0xe1, 0x03, 0x20, 0x00, 0x07,
+ 0x83, 0x8a, 0x3f, 0x23, 0x9b, 0x02, 0x83, 0x82, 0xd6, 0x4f, 0x28, 0x23, 0x3f, 0x68, 0x3f, 0x19,
+ 0x3b, 0x86, 0x83, 0x8a, 0x83, 0x13, 0x83, 0x82, 0xd2, 0x4b, 0x1b, 0x68, 0x1b, 0x19, 0xdd, 0x85,
+ 0x83, 0x8a, 0xd1, 0x4b, 0x83, 0x82, 0xcf, 0x4b, 0x1b, 0x68, 0x1b, 0x19, 0x9d, 0x85, 0x83, 0x8a,
+ 0x06, 0x23, 0xdb, 0x43, 0x83, 0x82, 0xcb, 0x4f, 0x04, 0x23, 0x3f, 0x68, 0x3f, 0x19, 0x7b, 0x86,
+ 0x83, 0x8a, 0x86, 0x82, 0xc7, 0x4b, 0x1b, 0x68, 0x1b, 0x19, 0x5d, 0x86, 0x83, 0x8a, 0x86, 0x82,
+ 0xc4, 0x48, 0x01, 0x23, 0x00, 0x68, 0x00, 0x19, 0x43, 0x86, 0x89, 0x1d, 0x5b, 0xe1, 0x03, 0x20,
+ 0x00, 0x07, 0x83, 0x8a, 0x3f, 0x23, 0x9b, 0x02, 0x83, 0x82, 0xbe, 0x4f, 0x2a, 0x23, 0x3f, 0x68,
+ 0x3f, 0x19, 0x3b, 0x86, 0x83, 0x8a, 0x83, 0x13, 0x83, 0x82, 0xba, 0x4b, 0x1b, 0x68, 0x1b, 0x19,
+ 0xdd, 0x85, 0x83, 0x8a, 0xb8, 0x4b, 0x83, 0x82, 0xb6, 0x4b, 0x1b, 0x68, 0x1b, 0x19, 0x9d, 0x85,
+ 0x83, 0x8a, 0x06, 0x23, 0xdb, 0x43, 0x83, 0x82, 0xb2, 0x4f, 0x04, 0x23, 0x3f, 0x68, 0x3f, 0x19,
+ 0x7b, 0x86, 0x83, 0x8a, 0x86, 0x82, 0xaf, 0x4b, 0x1b, 0x68, 0x1b, 0x19, 0x5d, 0x86, 0x83, 0x8a,
+ 0x86, 0x82, 0xac, 0x4b, 0x01, 0x20, 0x1b, 0x68, 0x1b, 0x19, 0x58, 0x86, 0x08, 0x31, 0x2a, 0xe1,
+ 0x03, 0x20, 0x00, 0x07, 0x83, 0x8a, 0x3f, 0x23, 0x9b, 0x02, 0x83, 0x82, 0xa5, 0x4f, 0x34, 0x23,
+ 0x3f, 0x68, 0x3f, 0x19, 0x3b, 0x86, 0x83, 0x8a, 0x83, 0x13, 0x83, 0x82, 0xa1, 0x4b, 0x1b, 0x68,
+ 0x1b, 0x19, 0xdd, 0x85, 0x83, 0x8a, 0xa0, 0x4b, 0x83, 0x82, 0x9e, 0x4b, 0x1b, 0x68, 0x1b, 0x19,
+ 0x9d, 0x85, 0x83, 0x8a, 0x06, 0x23, 0xdb, 0x43, 0x83, 0x82, 0x9a, 0x4f, 0x04, 0x23, 0x3f, 0x68,
+ 0x3f, 0x19, 0x7b, 0x86, 0x83, 0x8a, 0x86, 0x82, 0x96, 0x4b, 0x1b, 0x68, 0x1b, 0x19, 0x5d, 0x86,
+ 0x83, 0x8a, 0x86, 0x82, 0x93, 0x4b, 0x01, 0x20, 0x1b, 0x68, 0x1b, 0x19, 0x58, 0x86, 0x16, 0x31,
+ 0xf9, 0xe0, 0x03, 0x20, 0x00, 0x07, 0x83, 0x8a, 0x3f, 0x23, 0x9b, 0x02, 0x83, 0x82, 0x8d, 0x4f,
+ 0x3c, 0x23, 0x3f, 0x68, 0x3f, 0x19, 0x3b, 0x86, 0x83, 0x8a, 0x83, 0x13, 0x83, 0x82, 0x89, 0x4b,
+ 0x1b, 0x68, 0x1b, 0x19, 0xdd, 0x85, 0x83, 0x8a, 0x87, 0x4b, 0x83, 0x82, 0x85, 0x4b, 0x1b, 0x68,
+ 0x1b, 0x19, 0x9d, 0x85, 0x83, 0x8a, 0x06, 0x23, 0xdb, 0x43, 0x83, 0x82, 0x81, 0x4f, 0x04, 0x23,
+ 0x3f, 0x68, 0x3f, 0x19, 0x7b, 0x86, 0x83, 0x8a, 0x86, 0x82, 0x7e, 0x4b, 0x1b, 0x68, 0x1b, 0x19,
+ 0x5d, 0x86, 0x83, 0x8a, 0x86, 0x82, 0x7b, 0x4b, 0x01, 0x20, 0x1b, 0x68, 0x1b, 0x19, 0x04, 0xe0,
+ 0xca, 0xe0, 0x98, 0xe0, 0x66, 0xe0, 0x34, 0xe0, 0x02, 0xe0, 0x58, 0x86, 0x20, 0x31, 0xc2, 0xe0,
+ 0x03, 0x20, 0x00, 0x07, 0x83, 0x8a, 0x3f, 0x23, 0x9b, 0x02, 0x83, 0x82, 0x71, 0x4f, 0x40, 0x23,
+ 0x3f, 0x68, 0x3f, 0x19, 0x3b, 0x86, 0x83, 0x8a, 0x83, 0x13, 0x83, 0x82, 0x6d, 0x4b, 0x1b, 0x68,
+ 0x1b, 0x19, 0xdd, 0x85, 0x83, 0x8a, 0x6c, 0x4b, 0x83, 0x82, 0x6a, 0x4b, 0x1b, 0x68, 0x1b, 0x19,
+ 0x9d, 0x85, 0x83, 0x8a, 0x06, 0x23, 0xdb, 0x43, 0x83, 0x82, 0x66, 0x4f, 0x04, 0x23, 0x3f, 0x68,
+ 0x3f, 0x19, 0x7b, 0x86, 0x83, 0x8a, 0x86, 0x82, 0x62, 0x4b, 0x1b, 0x68, 0x1b, 0x19, 0x5d, 0x86,
+ 0x83, 0x8a, 0x86, 0x82, 0x5f, 0x4b, 0x01, 0x20, 0x1b, 0x68, 0x1b, 0x19, 0x58, 0x86, 0x24, 0x31,
+ 0x91, 0xe0, 0x03, 0x20, 0x00, 0x07, 0x83, 0x8a, 0x3f, 0x23, 0x9b, 0x02, 0x83, 0x82, 0x59, 0x4f,
+ 0x42, 0x23, 0x3f, 0x68, 0x3f, 0x19, 0x3b, 0x86, 0x83, 0x8a, 0x83, 0x13, 0x83, 0x82, 0x55, 0x4b,
+ 0x1b, 0x68, 0x1b, 0x19, 0xdd, 0x85, 0x83, 0x8a, 0x53, 0x4b, 0x83, 0x82, 0x51, 0x4b, 0x1b, 0x68,
+ 0x1b, 0x19, 0x9d, 0x85, 0x83, 0x8a, 0x06, 0x23, 0xdb, 0x43, 0x83, 0x82, 0x4d, 0x4f, 0x04, 0x23,
+ 0x3f, 0x68, 0x3f, 0x19, 0x7b, 0x86, 0x83, 0x8a, 0x86, 0x82, 0x4a, 0x4b, 0x1b, 0x68, 0x1b, 0x19,
+ 0x5d, 0x86, 0x83, 0x8a, 0x86, 0x82, 0x47, 0x4b, 0x01, 0x20, 0x1b, 0x68, 0x1b, 0x19, 0x58, 0x86,
+ 0x26, 0x31, 0x60, 0xe0, 0x03, 0x20, 0x00, 0x07, 0x83, 0x8a, 0x3f, 0x23, 0x9b, 0x02, 0x83, 0x82,
+ 0x40, 0x4f, 0x46, 0x23, 0x3f, 0x68, 0x3f, 0x19, 0x3b, 0x86, 0x83, 0x8a, 0x83, 0x13, 0x83, 0x82,
+ 0x3c, 0x4b, 0x1b, 0x68, 0x1b, 0x19, 0xdd, 0x85, 0x83, 0x8a, 0x3b, 0x4b, 0x83, 0x82, 0x39, 0x4b,
+ 0x1b, 0x68, 0x1b, 0x19, 0x9d, 0x85, 0x83, 0x8a, 0x06, 0x23, 0xdb, 0x43, 0x83, 0x82, 0x35, 0x4f,
+ 0x04, 0x23, 0x3f, 0x68, 0x3f, 0x19, 0x7b, 0x86, 0x83, 0x8a, 0x86, 0x82, 0x31, 0x4b, 0x1b, 0x68,
+ 0x1b, 0x19, 0x5d, 0x86, 0x83, 0x8a, 0x86, 0x82, 0x2e, 0x4b, 0x01, 0x20, 0x1b, 0x68, 0x1b, 0x19,
+ 0x58, 0x86, 0x2c, 0x31, 0x2f, 0xe0, 0x03, 0x20, 0x00, 0x07, 0x83, 0x8a, 0x3f, 0x23, 0x9b, 0x02,
+ 0x83, 0x82, 0x28, 0x4f, 0x50, 0x23, 0x3f, 0x68, 0x3f, 0x19, 0x3b, 0x86, 0x83, 0x8a, 0x83, 0x13,
+ 0x83, 0x82, 0x24, 0x4b, 0x1b, 0x68, 0x1b, 0x19, 0xdd, 0x85, 0x83, 0x8a, 0x22, 0x4b, 0x83, 0x82,
+ 0x20, 0x4b, 0x1b, 0x68, 0x1b, 0x19, 0x9d, 0x85, 0x83, 0x8a, 0x06, 0x23, 0xdb, 0x43, 0x83, 0x82,
+ 0x1c, 0x4f, 0x04, 0x23, 0x3f, 0x68, 0x3f, 0x19, 0x7b, 0x86, 0x83, 0x8a, 0x86, 0x82, 0x19, 0x4b,
+ 0x1b, 0x68, 0x1b, 0x19, 0x5d, 0x86, 0x83, 0x8a, 0x86, 0x82, 0x16, 0x4b, 0x01, 0x20, 0x1b, 0x68,
+ 0x1b, 0x19, 0x58, 0x86, 0x38, 0x31, 0x11, 0x80, 0xf0, 0xbd, 0x00, 0xb5, 0x03, 0x00, 0x00, 0xf0,
+ 0x3f, 0xfc, 0x2b, 0x17, 0x29, 0x29, 0x29, 0x29, 0x17, 0x29, 0x17, 0x29, 0x29, 0x29, 0x19, 0x2d,
+ 0x2b, 0x29, 0x29, 0x29, 0x29, 0x25, 0x25, 0x25, 0x25, 0x19, 0x19, 0x17, 0x17, 0x17, 0x17, 0x17,
+ 0x27, 0x17, 0x17, 0x27, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x29, 0x29, 0x29, 0x17, 0x00,
+ 0x06, 0x20, 0x14, 0xe0, 0x03, 0x20, 0x12, 0xe0, 0x40, 0xa1, 0x01, 0x00, 0xfe, 0xff, 0x00, 0x00,
+ 0x00, 0x04, 0x00, 0x20, 0x84, 0x00, 0x00, 0x20, 0xff, 0x0f, 0x00, 0x00, 0x02, 0x20, 0x06, 0xe0,
+ 0x07, 0x20, 0x04, 0xe0, 0x08, 0x20, 0x02, 0xe0, 0x05, 0x20, 0x00, 0xe0, 0x04, 0x20, 0xff, 0xf7,
+ 0xfb, 0xfd, 0x00, 0xbd, 0xf0, 0xb5, 0x4d, 0x48, 0x00, 0x21, 0x00, 0x68, 0x4c, 0x4a, 0x80, 0x18,
+ 0x02, 0x8a, 0x8c, 0x27, 0xd3, 0x05, 0xde, 0x0f, 0xd0, 0xb2, 0x93, 0x05, 0x52, 0x05, 0xd5, 0x0f,
+ 0x48, 0x4a, 0xdb, 0x0f, 0x12, 0x68, 0xdb, 0x01, 0x14, 0x88, 0xbc, 0x43, 0x1c, 0x43, 0x14, 0x80,
+ 0x0d, 0x28, 0x26, 0xd0, 0x0a, 0xdc, 0x03, 0x00, 0x00, 0xf0, 0xf2, 0xfb, 0x0d, 0x29, 0x2b, 0x2b,
+ 0x2b, 0x2b, 0x29, 0x27, 0x2c, 0x27, 0x27, 0x27, 0x23, 0x23, 0x2c, 0x00, 0x36, 0x28, 0x1e, 0xd0,
+ 0x0e, 0xdc, 0x11, 0x28, 0x15, 0xd0, 0x06, 0xdc, 0x0e, 0x28, 0x12, 0xd0, 0x0f, 0x28, 0x10, 0xd0,
+ 0x10, 0x28, 0x17, 0xd1, 0x0d, 0xe0, 0x31, 0x28, 0x0b, 0xd0, 0x35, 0x28, 0x12, 0xd1, 0x0e, 0xe0,
+ 0x07, 0x46, 0x37, 0x3f, 0x3b, 0x00, 0x00, 0xf0, 0xd3, 0xfb, 0x05, 0x0a, 0x06, 0x06, 0x06, 0x06,
+ 0x0d, 0x00, 0x01, 0x21, 0x06, 0xe0, 0x03, 0x21, 0x04, 0xe0, 0x04, 0x21, 0x02, 0xe0, 0x08, 0x21,
+ 0x00, 0xe0, 0x09, 0x21, 0x1b, 0x28, 0x23, 0xd0, 0x17, 0x28, 0x21, 0xd0, 0x15, 0x28, 0x1f, 0xd0,
+ 0x13, 0x28, 0x1d, 0xd0, 0x11, 0x28, 0x1b, 0xd0, 0x19, 0x28, 0x19, 0xd0, 0x1a, 0x28, 0x17, 0xd0,
+ 0x16, 0x28, 0x15, 0xd0, 0x14, 0x28, 0x13, 0xd0, 0x12, 0x28, 0x11, 0xd0, 0x1c, 0x28, 0x0f, 0xd0,
+ 0x1e, 0x28, 0x0d, 0xd0, 0x1f, 0x28, 0x0b, 0xd0, 0x21, 0x28, 0x09, 0xd0, 0x22, 0x28, 0x07, 0xd0,
+ 0x24, 0x28, 0x05, 0xd0, 0x28, 0x28, 0x03, 0xd0, 0x29, 0x28, 0x01, 0xd0, 0x2a, 0x28, 0x02, 0xd1,
+ 0x04, 0x20, 0x04, 0x43, 0x14, 0x80, 0x03, 0x20, 0x00, 0x07, 0x82, 0x8a, 0x0f, 0x22, 0xd2, 0x43,
+ 0x82, 0x82, 0x12, 0x4a, 0x14, 0x68, 0x14, 0x4b, 0xe4, 0x18, 0x21, 0x80, 0x81, 0x8a, 0x13, 0x49,
+ 0x81, 0x82, 0x14, 0x68, 0x49, 0x1c, 0xe3, 0x18, 0x19, 0x80, 0x81, 0x8a, 0x10, 0x49, 0x81, 0x82,
+ 0x14, 0x68, 0x73, 0x00, 0x0d, 0x26, 0x76, 0x03, 0xa4, 0x19, 0x23, 0x84, 0x83, 0x8a, 0x81, 0x82,
+ 0x10, 0x68, 0x69, 0x00, 0xff, 0x30, 0x01, 0x30, 0x81, 0x85, 0xf0, 0xbd, 0x03, 0x48, 0x00, 0x68,
+ 0x05, 0x49, 0xc0, 0x31, 0x40, 0x18, 0x40, 0x8e, 0xc0, 0xb2, 0x2e, 0xe7, 0x84, 0x00, 0x00, 0x20,
+ 0xc0, 0xa2, 0x01, 0x00, 0x90, 0x00, 0x00, 0x20, 0x00, 0xa1, 0x01, 0x00, 0xff, 0x7f, 0x00, 0x00,
+ 0xfd, 0xff, 0x00, 0x00, 0x31, 0x48, 0x00, 0x79, 0xc0, 0x07, 0xc0, 0x0f, 0x70, 0x47, 0x2f, 0x48,
+ 0x01, 0x78, 0x8f, 0x22, 0x11, 0x40, 0x01, 0x70, 0x01, 0x79, 0x01, 0x78, 0x01, 0x22, 0x11, 0x43,
+ 0x01, 0x70, 0x70, 0x47, 0x29, 0x48, 0x80, 0x68, 0x70, 0x47, 0x28, 0x48, 0x00, 0x89, 0x80, 0xb2,
+ 0x70, 0x47, 0x70, 0x47, 0x03, 0x20, 0x00, 0x07, 0x00, 0x8a, 0x80, 0x05, 0x80, 0x0d, 0x70, 0x47,
+ 0x23, 0x49, 0x09, 0x68, 0x80, 0x31, 0x89, 0x7c, 0x09, 0x07, 0x09, 0x0e, 0x8a, 0x00, 0x1f, 0x49,
+ 0x40, 0x31, 0x51, 0x18, 0x88, 0x60, 0x08, 0x78, 0x8f, 0x22, 0x10, 0x40, 0x10, 0x30, 0x08, 0x70,
+ 0x08, 0x78, 0x01, 0x22, 0x10, 0x43, 0x08, 0x70, 0x70, 0x47, 0x19, 0x48, 0x00, 0x68, 0x80, 0x30,
+ 0x80, 0x7c, 0x00, 0x07, 0x00, 0x0e, 0x81, 0x00, 0x14, 0x48, 0x40, 0x30, 0x08, 0x18, 0x01, 0x78,
+ 0x02, 0x22, 0x11, 0x43, 0x01, 0x70, 0x70, 0x47, 0x11, 0x48, 0x10, 0x49, 0x00, 0x68, 0x40, 0x31,
+ 0x80, 0x30, 0x80, 0x7c, 0x00, 0x07, 0x00, 0x0e, 0x80, 0x00, 0x40, 0x18, 0xc0, 0x68, 0x70, 0x47,
+ 0x0b, 0x48, 0x0a, 0x49, 0x00, 0x68, 0x40, 0x31, 0x80, 0x30, 0x80, 0x7c, 0x00, 0x07, 0x00, 0x0e,
+ 0x80, 0x00, 0x40, 0x18, 0x00, 0x79, 0xc0, 0x07, 0xc0, 0x0f, 0x70, 0x47, 0x03, 0x21, 0x09, 0x07,
+ 0x08, 0x60, 0x08, 0x7b, 0x01, 0x22, 0x10, 0x43, 0x08, 0x73, 0x70, 0x47, 0xc0, 0x00, 0x00, 0x30,
+ 0x90, 0x00, 0x00, 0x20, 0x10, 0xb5, 0x72, 0xb6, 0x56, 0x49, 0xc8, 0x69, 0xff, 0x22, 0x12, 0x04,
+ 0x90, 0x43, 0x01, 0x22, 0x92, 0x05, 0x10, 0x43, 0xc8, 0x61, 0x54, 0x48, 0x52, 0x49, 0x41, 0x60,
+ 0x81, 0x60, 0x00, 0x20, 0x52, 0x4a, 0x01, 0x21, 0xc4, 0x06, 0xe4, 0x0e, 0x0b, 0x46, 0xa3, 0x40,
+ 0x44, 0x09, 0xa4, 0x00, 0xa4, 0x18, 0x23, 0x60, 0x40, 0x1c, 0x40, 0xb2, 0x0c, 0x28, 0xf3, 0xdb,
+ 0x4c, 0x4a, 0x04, 0x20, 0xc4, 0x06, 0xe4, 0x0e, 0x0b, 0x46, 0xa3, 0x40, 0x44, 0x09, 0xa4, 0x00,
+ 0xa4, 0x18, 0x23, 0x60, 0x40, 0x1c, 0x40, 0xb2, 0x0c, 0x28, 0xf3, 0xdb, 0x62, 0xb6, 0x10, 0xbd,
+ 0xfe, 0xb5, 0x45, 0x4c, 0x21, 0x68, 0x00, 0x91, 0x44, 0x4d, 0x45, 0x4f, 0x2e, 0x68, 0x39, 0x68,
+ 0x01, 0x91, 0x01, 0x02, 0x43, 0x4a, 0x80, 0x07, 0x89, 0x18, 0x29, 0x60, 0x21, 0x68, 0xfa, 0x12,
+ 0x91, 0x43, 0x40, 0x0b, 0x01, 0x43, 0x21, 0x60, 0xff, 0xf7, 0x51, 0xfb, 0x00, 0x98, 0x20, 0x60,
+ 0x2e, 0x60, 0x01, 0x98, 0x38, 0x60, 0xfe, 0xbd, 0xfe, 0xb5, 0x37, 0x4c, 0x21, 0x68, 0x00, 0x91,
+ 0x36, 0x4d, 0x37, 0x4f, 0x2e, 0x68, 0x39, 0x68, 0x01, 0x91, 0x01, 0x02, 0x35, 0x4a, 0x80, 0x07,
+ 0x89, 0x18, 0x29, 0x60, 0x21, 0x68, 0xfa, 0x12, 0x91, 0x43, 0x40, 0x0b, 0x01, 0x43, 0x21, 0x60,
+ 0xfe, 0xf7, 0x3c, 0xfe, 0x00, 0x98, 0x20, 0x60, 0x2e, 0x60, 0x01, 0x98, 0x38, 0x60, 0xfe, 0xbd,
+ 0x10, 0xb5, 0x00, 0x22, 0x11, 0x46, 0x01, 0x98, 0x00, 0xf0, 0xc0, 0xf8, 0x10, 0xbd, 0x10, 0xb5,
+ 0x00, 0x22, 0x11, 0x46, 0x01, 0x98, 0x00, 0xf0, 0xb9, 0xf8, 0x10, 0xbd, 0x10, 0xb5, 0x00, 0x22,
+ 0x11, 0x46, 0x01, 0x98, 0x00, 0xf0, 0xb2, 0xf8, 0x10, 0xbd, 0x10, 0xb5, 0x00, 0x22, 0x11, 0x46,
+ 0x01, 0x98, 0x00, 0xf0, 0xab, 0xf8, 0x10, 0xbd, 0x10, 0xb5, 0x00, 0x22, 0x11, 0x46, 0x01, 0x98,
+ 0x00, 0xf0, 0xa4, 0xf8, 0x10, 0xbd, 0x10, 0xb5, 0x00, 0x22, 0x11, 0x46, 0x01, 0x98, 0x00, 0xf0,
+ 0x9d, 0xf8, 0x10, 0xbd, 0x18, 0x48, 0x40, 0x7e, 0x9a, 0xe7, 0x17, 0x48, 0x80, 0x7e, 0x97, 0xe7,
+ 0x15, 0x48, 0xc0, 0x7e, 0x94, 0xe7, 0x14, 0x48, 0x00, 0x7f, 0x91, 0xe7, 0x12, 0x48, 0x40, 0x7e,
+ 0xaa, 0xe7, 0x11, 0x48, 0x80, 0x7e, 0xa7, 0xe7, 0x0f, 0x48, 0xc0, 0x7e, 0xa4, 0xe7, 0x0e, 0x48,
+ 0x00, 0x7f, 0xa1, 0xe7, 0x10, 0xb5, 0x00, 0x22, 0x11, 0x46, 0x01, 0x98, 0x00, 0xf0, 0x7e, 0xf8,
+ 0x10, 0xbd, 0x00, 0x00, 0x04, 0xed, 0x00, 0xe0, 0x80, 0x80, 0x80, 0x80, 0x00, 0xe4, 0x00, 0xe0,
+ 0x80, 0xe2, 0x00, 0xe0, 0x00, 0xe1, 0x00, 0xe0, 0x84, 0x00, 0x00, 0x20, 0x90, 0x00, 0x00, 0x20,
+ 0x14, 0x00, 0x00, 0x30, 0x00, 0x05, 0x00, 0x20, 0x00, 0x04, 0x00, 0x20, 0x10, 0xb5, 0xff, 0x21,
+ 0x01, 0x31, 0x2b, 0x48, 0x00, 0xf0, 0xf6, 0xf9, 0x10, 0xbd, 0xc1, 0x08, 0x10, 0xb5, 0x09, 0x1d,
+ 0x1f, 0x28, 0x13, 0xd8, 0x72, 0xb6, 0x27, 0x4a, 0x25, 0x4b, 0x12, 0x68, 0x80, 0x32, 0x92, 0x7c,
+ 0x92, 0x01, 0x9c, 0x5c, 0x01, 0x2c, 0x00, 0xd1, 0x09, 0x1d, 0xd2, 0x18, 0x44, 0x07, 0x53, 0x5c,
+ 0x64, 0x0f, 0x01, 0x20, 0xa0, 0x40, 0x03, 0x43, 0x53, 0x54, 0x62, 0xb6, 0x10, 0xbd, 0xf0, 0xb5,
+ 0x1c, 0x49, 0x1b, 0x4e, 0x0b, 0x68, 0x80, 0x33, 0x99, 0x7c, 0x89, 0x01, 0x8d, 0x19, 0xa9, 0x78,
+ 0xff, 0x29, 0x2c, 0xd0, 0x6a, 0x78, 0xfe, 0x29, 0x04, 0xd0, 0x8f, 0x1a, 0x91, 0x42, 0x03, 0xd8,
+ 0x0d, 0x24, 0x02, 0xe0, 0x02, 0x24, 0x02, 0xe0, 0x00, 0x24, 0x3c, 0x19, 0x64, 0x1e, 0x24, 0x06,
+ 0x24, 0x0e, 0x1c, 0xd0, 0x01, 0x2c, 0x00, 0xd1, 0xa0, 0x1e, 0x94, 0x00, 0x2c, 0x19, 0x52, 0x1c,
+ 0xe0, 0x60, 0xd0, 0xb2, 0x0d, 0x28, 0x00, 0xd3, 0x00, 0x20, 0x9a, 0x7c, 0x92, 0x01, 0x92, 0x19,
+ 0x50, 0x70, 0xfe, 0x29, 0x0b, 0xd1, 0x99, 0x7c, 0x89, 0x01, 0x8a, 0x19, 0xd1, 0x78, 0x81, 0x42,
+ 0x05, 0xd1, 0x49, 0x1c, 0xc8, 0xb2, 0x0d, 0x28, 0x00, 0xd3, 0x00, 0x20, 0xd0, 0x70, 0xf0, 0xbd,
+ 0x00, 0x09, 0x00, 0x20, 0x90, 0x00, 0x00, 0x20, 0x10, 0xb5, 0x20, 0x21, 0x37, 0x48, 0x00, 0xf0,
+ 0x99, 0xf9, 0x20, 0x21, 0x36, 0x48, 0x00, 0xf0, 0x95, 0xf9, 0x10, 0xbd, 0x72, 0xb6, 0xbf, 0xf3,
+ 0x40, 0x8f, 0x34, 0x4b, 0x20, 0x25, 0x1c, 0x7c, 0x2c, 0x43, 0x1c, 0x74, 0xef, 0xf3, 0x05, 0x83,
+ 0x2e, 0x4c, 0x9b, 0x06, 0x9b, 0x0e, 0x25, 0x78, 0x23, 0x70, 0x00, 0x2d, 0x09, 0xd1, 0xa3, 0x70,
+ 0xa0, 0x60, 0xef, 0xf3, 0x08, 0x80, 0xe0, 0x60, 0xef, 0xf3, 0x09, 0x80, 0xe2, 0x61, 0xa1, 0x61,
+ 0x20, 0x61, 0x01, 0x20, 0x10, 0x2b, 0x06, 0xd3, 0x02, 0x46, 0x10, 0x3b, 0x61, 0x69, 0x9a, 0x40,
+ 0x11, 0x43, 0x61, 0x61, 0x04, 0xe0, 0x02, 0x46, 0x61, 0x68, 0x9a, 0x40, 0x11, 0x43, 0x61, 0x60,
+ 0x00, 0x21, 0x61, 0x70, 0xbf, 0xf3, 0x40, 0x8f, 0x62, 0xb6, 0xe1, 0x78, 0x01, 0x43, 0xe1, 0x70,
+ 0xfe, 0xe7, 0xf0, 0xb5, 0x05, 0x9d, 0x72, 0xb6, 0xbf, 0xf3, 0x40, 0x8f, 0x19, 0x4c, 0x40, 0x27,
+ 0x26, 0x7c, 0x3e, 0x43, 0x26, 0x74, 0x16, 0x4c, 0x26, 0x78, 0x20, 0x70, 0x00, 0x2e, 0x09, 0xd1,
+ 0xa0, 0x70, 0xa1, 0x60, 0xef, 0xf3, 0x08, 0x81, 0xe1, 0x60, 0xef, 0xf3, 0x09, 0x81, 0xe5, 0x61,
+ 0xa3, 0x61, 0x21, 0x61, 0x01, 0x21, 0x20, 0x28, 0x06, 0xd3, 0x0d, 0x46, 0x20, 0x38, 0x63, 0x69,
+ 0x85, 0x40, 0x2b, 0x43, 0x63, 0x61, 0x04, 0xe0, 0x0b, 0x46, 0x65, 0x68, 0x83, 0x40, 0x1d, 0x43,
+ 0x65, 0x60, 0x00, 0x20, 0x60, 0x70, 0xbf, 0xf3, 0x40, 0x8f, 0x62, 0xb6, 0x00, 0x2a, 0x03, 0xd0,
+ 0xe0, 0x78, 0x08, 0x43, 0xe0, 0x70, 0xfe, 0xe7, 0xf0, 0xbd, 0x00, 0x00, 0x24, 0x04, 0x00, 0x20,
+ 0x44, 0x04, 0x00, 0x20, 0x00, 0x04, 0x00, 0x20, 0xf0, 0xb5, 0x4c, 0x4d, 0x0a, 0x21, 0x69, 0x5e,
+ 0x00, 0x22, 0x4b, 0x4e, 0x4b, 0x4b, 0x4c, 0x4f, 0x0a, 0xe0, 0xb4, 0x5c, 0x5c, 0x54, 0x40, 0x1e,
+ 0x52, 0x1c, 0x49, 0x1e, 0x09, 0xb2, 0xc0, 0xb2, 0xd2, 0xb2, 0x00, 0x29, 0x00, 0xda, 0x39, 0x46,
+ 0x00, 0x28, 0xf2, 0xd1, 0x69, 0x81, 0xf0, 0xbd, 0xff, 0xb5, 0x81, 0xb0, 0x05, 0x46, 0x04, 0x98,
+ 0x0b, 0x9e, 0x00, 0x28, 0x00, 0xd1, 0x72, 0xb6, 0x3c, 0x49, 0x48, 0x7b, 0xff, 0x28, 0x02, 0xd1,
+ 0x4b, 0x89, 0x08, 0x2b, 0x01, 0xd3, 0x01, 0x24, 0x00, 0xe0, 0x00, 0x24, 0x02, 0x9b, 0x5b, 0x1e,
+ 0x2f, 0x2b, 0x52, 0xd2, 0x00, 0x2c, 0x50, 0xd0, 0x34, 0x49, 0x49, 0x7d, 0x00, 0x29, 0x4c, 0xd1,
+ 0x01, 0x2d, 0x02, 0xd0, 0x00, 0x2d, 0x03, 0xd0, 0x04, 0xe0, 0x34, 0x48, 0x00, 0x68, 0x40, 0x79,
+ 0x90, 0x42, 0x42, 0xd3, 0xff, 0xf7, 0xce, 0xfd, 0x07, 0x46, 0x01, 0x0c, 0x30, 0x48, 0x00, 0x68,
+ 0x00, 0x0c, 0x08, 0x1a, 0x00, 0x04, 0x00, 0x0c, 0x12, 0xd0, 0x29, 0x49, 0xff, 0x22, 0x8a, 0x70,
+ 0x02, 0x0a, 0x4a, 0x70, 0x08, 0x70, 0x03, 0x20, 0xff, 0xf7, 0xae, 0xff, 0x23, 0x48, 0x41, 0x7b,
+ 0xff, 0x29, 0x04, 0xd1, 0x40, 0x89, 0x08, 0x28, 0x01, 0xd2, 0x00, 0x24, 0x00, 0xe0, 0x01, 0x24,
+ 0x23, 0x48, 0x00, 0x2c, 0x07, 0x60, 0x20, 0xd0, 0x01, 0x2d, 0x24, 0xd0, 0x00, 0x2d, 0x27, 0xd0,
+ 0x08, 0x24, 0x0a, 0x98, 0x00, 0x28, 0x08, 0xd0, 0x19, 0x48, 0x31, 0x0a, 0x06, 0x70, 0x41, 0x70,
+ 0x31, 0x0c, 0x81, 0x70, 0x0a, 0x98, 0xff, 0xf7, 0x8f, 0xff, 0x0a, 0x98, 0x14, 0x49, 0x00, 0x1d,
+ 0x40, 0x01, 0x20, 0x43, 0xc8, 0x70, 0x16, 0x48, 0x00, 0x88, 0x02, 0x0a, 0x8a, 0x70, 0x48, 0x70,
+ 0x02, 0x98, 0x08, 0x70, 0x04, 0x20, 0xff, 0xf7, 0x7f, 0xff, 0x04, 0x98, 0x00, 0x28, 0x00, 0xd1,
+ 0x62, 0xb6, 0x05, 0xb0, 0xf0, 0xbd, 0x0d, 0x48, 0x00, 0x68, 0x80, 0x30, 0x84, 0x7c, 0xd8, 0xe7,
+ 0x0f, 0x24, 0xd6, 0xe7, 0x1c, 0xb5, 0x0a, 0x46, 0x00, 0x21, 0x00, 0x91, 0x0b, 0x46, 0x01, 0x91,
+ 0x01, 0x46, 0x01, 0x20, 0xff, 0xf7, 0x80, 0xff, 0x1c, 0xbd, 0x00, 0x00, 0x00, 0x04, 0x00, 0x20,
+ 0x8c, 0x00, 0x00, 0x20, 0x00, 0x01, 0x00, 0x20, 0xff, 0x02, 0x00, 0x00, 0x90, 0x00, 0x00, 0x20,
+ 0x88, 0x00, 0x00, 0x20, 0x30, 0xb5, 0x0e, 0x49, 0x00, 0x20, 0x09, 0x78, 0x0b, 0x4d, 0x4c, 0x1e,
+ 0x11, 0xe0, 0x02, 0x02, 0x52, 0x19, 0x80, 0x32, 0x90, 0x74, 0x00, 0x28, 0x05, 0xd0, 0x43, 0x1e,
+ 0x13, 0x75, 0xa0, 0x42, 0x03, 0xd1, 0x00, 0x23, 0x02, 0xe0, 0x23, 0x46, 0xf8, 0xe7, 0x43, 0x1c,
+ 0x40, 0x1c, 0xd3, 0x74, 0xc0, 0xb2, 0x88, 0x42, 0xeb, 0xd3, 0x30, 0xbd, 0x00, 0x05, 0x00, 0x20,
+ 0x80, 0x00, 0x00, 0x20, 0x70, 0x47, 0xf8, 0xb5, 0x04, 0x2a, 0x2c, 0xd3, 0x83, 0x07, 0x12, 0xd0,
+ 0x0b, 0x78, 0x49, 0x1c, 0x03, 0x70, 0x40, 0x1c, 0x52, 0x1e, 0x83, 0x07, 0x0b, 0xd0, 0x0b, 0x78,
+ 0x49, 0x1c, 0x03, 0x70, 0x40, 0x1c, 0x52, 0x1e, 0x83, 0x07, 0x04, 0xd0, 0x0b, 0x78, 0x49, 0x1c,
+ 0x03, 0x70, 0x40, 0x1c, 0x52, 0x1e, 0x8b, 0x07, 0x9b, 0x0f, 0x05, 0xd0, 0xc9, 0x1a, 0xdf, 0x00,
+ 0x20, 0x23, 0xde, 0x1b, 0x08, 0xc9, 0x0a, 0xe0, 0xf8, 0xf7, 0xcc, 0xfc, 0xf8, 0xbd, 0x1d, 0x46,
+ 0x08, 0xc9, 0xfd, 0x40, 0x1c, 0x46, 0xb4, 0x40, 0x2c, 0x43, 0x10, 0xc0, 0x12, 0x1f, 0x04, 0x2a,
+ 0xf5, 0xd2, 0xf3, 0x08, 0xc9, 0x1a, 0x52, 0x1e, 0xf0, 0xd4, 0x0b, 0x78, 0x49, 0x1c, 0x03, 0x70,
+ 0x40, 0x1c, 0x52, 0x1e, 0xea, 0xd4, 0x0b, 0x78, 0x49, 0x1c, 0x03, 0x70, 0x40, 0x1c, 0x01, 0x2a,
+ 0xe4, 0xd4, 0x09, 0x78, 0x01, 0x70, 0xf8, 0xbd, 0x01, 0xe0, 0x04, 0xc0, 0x09, 0x1f, 0x04, 0x29,
+ 0xfb, 0xd2, 0x8b, 0x07, 0x01, 0xd5, 0x02, 0x80, 0x80, 0x1c, 0xc9, 0x07, 0x00, 0xd0, 0x02, 0x70,
+ 0x70, 0x47, 0x00, 0x29, 0x0b, 0xd0, 0xc3, 0x07, 0x02, 0xd0, 0x02, 0x70, 0x40, 0x1c, 0x49, 0x1e,
+ 0x02, 0x29, 0x04, 0xd3, 0x83, 0x07, 0x02, 0xd5, 0x02, 0x80, 0x80, 0x1c, 0x89, 0x1e, 0xe3, 0xe7,
+ 0x00, 0x22, 0xee, 0xe7, 0x00, 0x22, 0xdf, 0xe7, 0x03, 0x78, 0xc2, 0x78, 0x19, 0x46, 0x43, 0x78,
+ 0x12, 0x06, 0x1b, 0x02, 0x19, 0x43, 0x83, 0x78, 0xc0, 0x78, 0x1b, 0x04, 0x19, 0x43, 0x11, 0x43,
+ 0x09, 0x02, 0x09, 0x0a, 0x00, 0x06, 0x08, 0x43, 0x70, 0x47, 0x70, 0x47, 0x75, 0x46, 0x00, 0xf0,
+ 0x23, 0xf8, 0xae, 0x46, 0x05, 0x00, 0x69, 0x46, 0x53, 0x46, 0xc0, 0x08, 0xc0, 0x00, 0x85, 0x46,
+ 0x18, 0xb0, 0x20, 0xb5, 0xf8, 0xf7, 0x9e, 0xfc, 0x60, 0xbc, 0x00, 0x27, 0x49, 0x08, 0xb6, 0x46,
+ 0x00, 0x26, 0xc0, 0xc5, 0xc0, 0xc5, 0xc0, 0xc5, 0xc0, 0xc5, 0xc0, 0xc5, 0xc0, 0xc5, 0xc0, 0xc5,
+ 0xc0, 0xc5, 0x40, 0x3d, 0x49, 0x00, 0x8d, 0x46, 0x70, 0x47, 0x04, 0x46, 0xc0, 0x46, 0xc0, 0x46,
+ 0x20, 0x46, 0xf8, 0xf7, 0x50, 0xfc, 0x00, 0x00, 0x00, 0x48, 0x70, 0x47, 0x94, 0x00, 0x00, 0x20,
+ 0x30, 0xb4, 0x74, 0x46, 0x64, 0x1e, 0x25, 0x78, 0x64, 0x1c, 0xab, 0x42, 0x00, 0xd2, 0x1d, 0x46,
+ 0x63, 0x5d, 0x5b, 0x00, 0xe3, 0x18, 0x30, 0xbc, 0x18, 0x47, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19,
+ 0x19, 0x19, 0x19, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x19, 0x19, 0x19, 0x19, 0x1a, 0x22,
+ 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x30,
+ 0x31, 0x31, 0x32, 0x32, 0x21, 0x10, 0x42, 0x20, 0x84, 0x40, 0x08, 0x81, 0x31, 0x12, 0x62, 0x24,
+ 0xc4, 0x48, 0x88, 0x91, 0x00, 0x00, 0x0a, 0x00, 0x15, 0x00, 0x1f, 0x00, 0x29, 0x00, 0x34, 0x00,
+ 0x3e, 0x00, 0x49, 0x00, 0x53, 0x00, 0x5d, 0x00, 0x68, 0x00, 0x72, 0x00, 0x7c, 0x00, 0x87, 0x00,
+ 0x91, 0x00, 0x9b, 0x00, 0xa6, 0x00, 0xb0, 0x00, 0xba, 0x00, 0xc5, 0x00, 0xcf, 0x00, 0xda, 0x00,
+ 0xe4, 0x00, 0xee, 0x00, 0xf9, 0x00, 0x03, 0x01, 0x0d, 0x01, 0x18, 0x01, 0x22, 0x01, 0x2c, 0x01,
+ 0x37, 0x01, 0x41, 0x01, 0x00, 0x00, 0x11, 0x00, 0x23, 0x00, 0x34, 0x00, 0x46, 0x00, 0x57, 0x00,
+ 0x69, 0x00, 0x7a, 0x00, 0x8c, 0x00, 0x9d, 0x00, 0xaf, 0x00, 0xc0, 0x00, 0xd2, 0x00, 0xe3, 0x00,
+ 0xf5, 0x00, 0x06, 0x01, 0x18, 0x01, 0x29, 0x01, 0x3b, 0x01, 0x4c, 0x01, 0x5d, 0x01, 0x6f, 0x01,
+ 0x80, 0x01, 0x92, 0x01, 0xa3, 0x01, 0xb5, 0x01, 0xc6, 0x01, 0xd8, 0x01, 0xe9, 0x01, 0xfb, 0x01,
+ 0x0c, 0x02, 0x1e, 0x02, 0x74, 0x7a, 0x00, 0x00, 0x80, 0x00, 0x00, 0x20, 0x14, 0x00, 0x00, 0x00,
+ 0xc4, 0x01, 0x00, 0x00, 0x88, 0x7a, 0x00, 0x00, 0x94, 0x00, 0x00, 0x20, 0x6c, 0x09, 0x00, 0x00,
+ 0xe0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+};
diff --git a/drivers/net/ethernet/broadcom/pm.h b/drivers/net/ethernet/broadcom/pm.h
new file mode 100644
index 000000000000..d3762a512311
--- /dev/null
+++ b/drivers/net/ethernet/broadcom/pm.h
@@ -0,0 +1,96 @@
+/*
+ * Copyright (C) 2016 Broadcom
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+#ifndef _PM_H
+#define _PM_H
+
+
+#define pmLoopbackMac	0
+#define pmLoopbackPhy	1
+
+struct iproc_pm_stats {
+	u64 rx_frames;//XLMIB_GRxPkt
+	u64 rx_frame_good;//XLMIB_GRxPOK
+	u64 rx_bytes;//XLMIB_GRxByt
+	u64 rx_frame_64;//XLMIB_GRx64
+	u64 rx_frame_127;//XLMIB_GRx127
+	u64 rx_frame_255;//XLMIB_GRx255
+	u64 rx_frame_511;//XLMIB_GRx511
+	u64 rx_frame_1023;//XLMIB_GRx1023
+	u64 rx_frame_1518;//XLMIB_GRx1518
+	u64 rx_frame_1522;//XLMIB_GRx1522
+	u64 rx_frame_jumbo;//XLMIB_GRx2047 + XLMIB_GRx4095 + XLMIB_GRx9216+ XLMIB_GRx16383
+	u64 rx_frame_unicast;//XLMIB_GRxUCA
+	u64 rx_frame_multicast;//XLMIB_GRxMCA
+	u64 rx_frame_broadcast;//XLMIB_GRxBCA
+	u64 rx_frame_control;//XLMIB_GRxCF
+	u64 rx_frame_pause;//XLMIB_GRxPF
+	u64 rx_frame_jabber;//XLMIB_GRxJBR
+	u64 rx_frame_fragment;//XLMIB_GRxFRG
+	u64 rx_frame_vlan;//XLMIB_GRxVLN
+	u64 rx_frame_dvlan;//XLMIB_GRxDVLN
+	u64 rx_frame_fcs_error;//XLMIB_GRxFCS
+	u64 rx_frame_unsupport;//XLMIB_GRxUO
+	u64 rx_frame_wrong_sa;//XLMIB_GRxWSA
+	u64 rx_frame_align_err;//XLMIB_GRxALN
+	u64 rx_frame_length_err;//XLMIB_GRxFLR
+	u64 rx_frame_oversize;//XLMIB_GRxOVR
+	u64 rx_frame_mtu_err;//XLMIB_GRxMTUE
+	u64 rx_frame_truncated_err;//XLMIB_GRxTRFU
+	u64 rx_frame_undersize;//XLMIB_GRxUND
+	u64 tx_frames;//XLMIB_GTxPkt
+	u64 tx_frame_good;//XLMIB_GTxPOK
+	u64 tx_bytes;//XLMIB_GTxBYT
+	u64 tx_frame_64;//XLMIB_GTx64
+	u64 tx_frame_127;//XLMIB_GTx127
+	u64 tx_frame_255;//XLMIB_GTx255
+	u64 tx_frame_511;//XLMIB_GTx511
+	u64 tx_frame_1023;//XLMIB_GTx1023
+	u64 tx_frame_1518;//XLMIB_GTx1518
+	u64 tx_frame_1522;//XLMIB_GTx1522
+	u64 tx_frame_jumbo;//XLMIB_GTx2047 + XLMIB_GTx4095 + XLMIB_GTx9216 + XLMIB_GTx16383
+	u64 tx_frame_unicast;//XLMIB_GTxUCA
+	u64 tx_frame_multicast;//XLMIB_GTxMCA
+	u64 tx_frame_broadcast;//XLMIB_GTxBCA
+	u64 tx_frame_control;//XLMIB_GTxCF
+	u64 tx_frame_pause;//XLMIB_GTxPF
+	u64 tx_frame_jabber;//XLMIB_GTxJBR
+	u64 tx_frame_fragment;//XLMIB_GTxFRG
+	u64 tx_frame_vlan;//XLMIB_GTxVLN
+	u64 tx_frame_dvlan;//XLMIB_GTxDVLN
+	u64 tx_frame_fcs_error;//XLMIB_GTxFCS
+	u64 tx_frame_oversize;//XLMIB_GTxOVR
+	u64 tx_frame_error;//XLMIB_GTxErr
+	u64 tx_frame_fifo_underrun;//XLMIB_GTxUFL
+	u64 tx_frame_collision;//XLMIB_GTxNCL
+};
+
+struct iproc_pm_ops {
+	int (*port_enable)(int port, int enable);
+	int (*port_speed)(int port, int speed);
+	int (*port_loopback)(int port, int lb_type, int lb_en);
+	int (*port_mac_addr)(int port, u8 *mac);
+	int (*port_stats)(int port, struct iproc_pm_stats *stats);
+	int (*port_stats_clear)(int port);
+};
+
+extern int pm4x10_pm_init(struct iproc_pm_ops *pm_ops, u8 lane_idx);
+extern int pm4x10_pm_deinit(struct iproc_pm_ops *pm_ops);
+
+extern int pm4x10_pm_xlport_port_config(int port, int enable);
+extern int pm4x10_xlport_speed_set(int port, int speed);
+extern int pm4x10_xlport_loopback_set(int port, int lb_type, int lb_en);
+extern int pm4x10_xlport_mac_addr_set(int port, u8 *mac);
+extern int pm4x10_xlport_stats_get(int port, struct iproc_pm_stats *stats);
+extern int pm4x10_xlport_mib_reset(int port);
+
+#endif /* _PM_H */
diff --git a/drivers/net/ethernet/broadcom/pm4x10.c b/drivers/net/ethernet/broadcom/pm4x10.c
new file mode 100644
index 000000000000..2aec909dd201
--- /dev/null
+++ b/drivers/net/ethernet/broadcom/pm4x10.c
@@ -0,0 +1,1175 @@
+/*
+ * Copyright (C) 2016 Broadcom
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/delay.h>
+#include <linux/soc/bcm/iproc-cmic.h>
+#include "pm.h"
+#include "merlin16_ucode.h"
+
+#define JUMBO_MAXSZ  0x3fe8
+
+#define debug(fmt, args...) do {} while (0)
+
+
+#define PM_CORE_ADDR(port)			((1 << (port + 1)) + 1)
+
+#define PM_PMD_X1_CTL_REG(port)							(0x00009010 | (PM_CORE_ADDR(port) << 19))
+#define PM_PMD_X4_CTL_REG(port)							(0x0000c010 | (PM_CORE_ADDR(port) << 19))
+#define PM_CKRST_LN_CLK_RST_N_PWRDWN_CTL_REG(port)		(0x0001d0b1 | (PM_CORE_ADDR(port) << 19))
+#define PM_DIG_TOP_USER_CTL0_REG(port)					(0x0001d104 | (PM_CORE_ADDR(port) << 19))
+#define PM_TXFIR_MISC_CTL1_REG(port)					(0x0001d139 | (PM_CORE_ADDR(port) << 19))
+
+#define TSC_OPERATION_WRITE                      0x1
+#define TSC_OPERATION_READ                       0x0
+
+
+/* S-channel address */
+/* Per port registers */
+#define XLMIB_GRx64(port)								(0x00000000 + port)
+#define XLMIB_GRx127(port)								(0x00000100 + port)
+#define XLMIB_GRx255(port)								(0x00000200 + port)
+#define XLMIB_GRx511(port)								(0x00000300 + port)
+#define XLMIB_GRx1023(port)								(0x00000400 + port)
+#define XLMIB_GRx1518(port)								(0x00000500 + port)
+#define XLMIB_GRx1522(port)								(0x00000600 + port)
+#define XLMIB_GRx2047(port)								(0x00000700 + port)
+#define XLMIB_GRx4095(port)								(0x00000800 + port)
+#define XLMIB_GRx9216(port)								(0x00000900 + port)
+#define XLMIB_GRx16383(port)							(0x00000a00 + port)
+#define XLMIB_GRxPkt(port)								(0x00000b00 + port)
+#define XLMIB_GRxUCA(port)								(0x00000c00 + port)
+#define XLMIB_GRxMCA(port)								(0x00000d00 + port)
+#define XLMIB_GRxBCA(port)								(0x00000e00 + port)
+#define XLMIB_GRxFCS(port)								(0x00000f00 + port)
+#define XLMIB_GRxCF(port)								(0x00001000 + port)
+#define XLMIB_GRxPF(port)								(0x00001100 + port)
+#define XLMIB_GRxUO(port)								(0x00001300 + port)
+#define XLMIB_GRxWSA(port)								(0x00001500 + port)
+#define XLMIB_GRxALN(port)								(0x00001600 + port)
+#define XLMIB_GRxFLR(port)								(0x00001700 + port)
+#define XLMIB_GRxOVR(port)								(0x00001a00 + port)
+#define XLMIB_GRxJBR(port)								(0x00001b00 + port)
+#define XLMIB_GRxMTUE(port)								(0x00001c00 + port)
+#define XLMIB_GRxVLN(port)								(0x00001f00 + port)
+#define XLMIB_GRxDVLN(port)								(0x00002000 + port)
+#define XLMIB_GRxTRFU(port)								(0x00002100 + port)
+#define XLMIB_GRxPOK(port)								(0x00002200 + port)
+#define XLMIB_GRxUND(port)								(0x00003400 + port)
+#define XLMIB_GRxFRG(port)								(0x00003500 + port)
+#define XLMIB_GRxByt(port)								(0x00003d00 + port)
+#define XLMIB_GTx64(port)								(0x00004000 + port)
+#define XLMIB_GTx127(port)								(0x00004100 + port)
+#define XLMIB_GTx255(port)								(0x00004200 + port)
+#define XLMIB_GTx511(port)								(0x00004300 + port)
+#define XLMIB_GTx1023(port)								(0x00004400 + port)
+#define XLMIB_GTx1518(port)								(0x00004500 + port)
+#define XLMIB_GTx1522(port)								(0x00004600 + port)
+#define XLMIB_GTx2047(port)								(0x00004700 + port)
+#define XLMIB_GTx4095(port)								(0x00004800 + port)
+#define XLMIB_GTx9216(port)								(0x00004900 + port)
+#define XLMIB_GTx16383(port)							(0x00004a00 + port)
+#define XLMIB_GTxPOK(port)								(0x00004b00 + port)
+#define XLMIB_GTxPkt(port)								(0x00004c00 + port)
+#define XLMIB_GTxUCA(port)								(0x00004d00 + port)
+#define XLMIB_GTxMCA(port)								(0x00004e00 + port)
+#define XLMIB_GTxBCA(port)								(0x00004f00 + port)
+#define XLMIB_GTxPF(port)								(0x00005000 + port)
+#define XLMIB_GTxJBR(port)								(0x00005200 + port)
+#define XLMIB_GTxFCS(port)								(0x00005300 + port)
+#define XLMIB_GTxCF(port)								(0x00005400 + port)
+#define XLMIB_GTxOVR(port)								(0x00005500 + port)
+#define XLMIB_GTxFRG(port)								(0x00005c00 + port)
+#define XLMIB_GTxErr(port)								(0x00005d00 + port)
+#define XLMIB_GTxVLN(port)								(0x00005e00 + port)
+#define XLMIB_GTxDVLN(port)								(0x00005f00 + port)
+#define XLMIB_GTxUFL(port)								(0x00006100 + port)
+#define XLMIB_GTxNCL(port)								(0x00006e00 + port)
+#define XLMIB_GTxBYT(port)								(0x00006f00 + port)
+
+#define XLPORT_CONFIG(port)								(0x00020000 + port)
+#define XLMAC_CTRL(port)								(0x00060000 + port)
+#define  XLMAC_CTRL__SW_LINK_STATUS						12
+#define  XLMAC_CTRL__XGMII_IPG_CHECK_DISABLE			11
+#define  XLMAC_CTRL__SOFT_RESET							6
+#define  XLMAC_CTRL__LOCAL_LPBK							2
+#define  XLMAC_CTRL__RX_EN								1
+#define  XLMAC_CTRL__TX_EN								0
+#define XLMAC_MODE(port)								(0x00060100 + port)
+#define  XLMAC_MODE_OFFSET								0x1
+#define  XLMAC_MODE__SPEED_MODE_L						6
+#define  XLMAC_MODE__SPEED_MODE_R						4
+#define  XLMAC_MODE__SPEED_MODE_WIDTH					3
+#define   SPEED_MODE_LINK_10M							0x0
+#define   SPEED_MODE_LINK_100M							0x1
+#define   SPEED_MODE_LINK_1G							0x2
+#define   SPEED_MODE_LINK_2G5							0x3
+#define   SPEED_MODE_LINK_10G_PLUS						0x4
+#define  XLMAC_MODE__SPEED_MODE_RESETVALUE				0x4
+#define  XLMAC_MODE__NO_SOP_FOR_CRC_HG					3
+#define  XLMAC_MODE__NO_SOP_FOR_CRC_HG_WIDTH			1
+#define  XLMAC_MODE__NO_SOP_FOR_CRC_HG_RESETVALUE		0x0
+#define  XLMAC_MODE__HDR_MODE_L							2
+#define  XLMAC_MODE__HDR_MODE_R							0
+#define  XLMAC_MODE__HDR_MODE_WIDTH 					3
+#define   HDR_MODE_IEEE									0x0
+#define   HDR_MODE_HG_PLUS								0x1
+#define   HDR_MODE_HG_2									0x2
+#define   HDR_MODE_SOP_ONLY_IEEE						0x5
+#define XLMAC_TX_CTRL(port)								(0x00060400 + port)
+#define  XLMAC_TX_CTRL__AVERAGE_IPG_R					12
+#define  XLMAC_TX_CTRL__PAD_EN							4
+#define  XLMAC_TX_CTRL__CRC_MODE_R						0
+#define   CRC_MODE_APPEND								0x0
+#define   CRC_MODE_KEEP									0x1
+#define   CRC_MODE_REPLACE								0x2
+#define   CRC_MODE_PER_PKT_MODE							0x3
+#define XLMAC_TX_MAC_SA(port)							(0x00060500 + port)
+#define XLMAC_RX_MAX_SIZE(port)							(0x00060800 + port)
+#define  XLMAC_RX_MAX_SIZE__RX_MAX_SIZE_L				13
+#define  XLMAC_RX_MAX_SIZE__RX_MAX_SIZE_R				0
+#define  XLMAC_RX_MAX_SIZE__RX_MAX_SIZE_WIDTH			14
+#define XLMAC_RX_CTRL(port)								(0x00060600 + port)
+#define  XLMAC_RX_CTRL__STRIP_CRC						2
+#define XLMAC_RX_LSS_CTRL(port)							(0x00060a00 + port)
+#define  XLMAC_RX_LSS_CTRL__DROP_TX_DATA_ON_LINK_INTERRUPT	6
+#define  XLMAC_RX_LSS_CTRL__DROP_TX_DATA_ON_REMOTE_FAULT	5
+#define  XLMAC_RX_LSS_CTRL__DROP_TX_DATA_ON_LOCAL_FAULT	4
+#define  XLMAC_RX_LSS_CTRL__REMOTE_FAULT_DISABLE		1
+#define  XLMAC_RX_LSS_CTRL__LOCAL_FAULT_DISABLE			0
+#define XLMAC_PAUSE_CTRL(port)							(0x00060d00 + port)
+#define  XLMAC_PAUSE_CTRL__RX_PAUSE_EN					18
+#define  XLMAC_PAUSE_CTRL__TX_PAUSE_EN					17
+#define XLMAC_PFC_CTRL(port)							(0x00060e00 + port)
+#define  XLMAC_PFC_CTRL__PFC_REFRESH_EN					32
+/* General type registers */
+#define XLPORT_MODE_REG									(0x02020a00)
+#define  XLPORT_MODE_REG__RESET_MASK					0x3f
+#define  XLPORT_MODE_REG__XPORT0_CORE_PORT_MODE_L		5
+#define  XLPORT_MODE_REG__XPORT0_CORE_PORT_MODE_R		3
+#define  XLPORT_MODE_REG__XPORT0_CORE_PORT_MODE_WIDTH	3
+#define   XPORT0_CORE_PORT_MODE_QUAD					0x0
+#define   XPORT0_CORE_PORT_MODE_TRI_012					0x1
+#define   XPORT0_CORE_PORT_MODE_TRI_023					0x2
+#define   XPORT0_CORE_PORT_MODE_DUAL					0x3
+#define   XPORT0_CORE_PORT_MODE_SINGLE					0x4
+#define  XLPORT_MODE_REG__XPORT0_PHY_PORT_MODE_L		2
+#define  XLPORT_MODE_REG__XPORT0_PHY_PORT_MODE_R		0
+#define  XLPORT_MODE_REG__XPORT0_PHY_PORT_MODE_WIDTH 	3
+#define   XPORT0_PHY_PORT_MODE_QUAD						0x0
+#define   XPORT0_PHY_PORT_MODE_TRI_012					0x1
+#define   XPORT0_PHY_PORT_MODE_TRI_023					0x2
+#define   XPORT0_PHY_PORT_MODE_DUAL						0x3
+#define   XPORT0_PHY_PORT_MODE_SINGLE					0x4
+#define XLPORT_ENABLE_REG								(0x02020b00)
+#define  XLPORT_ENABLE_REG__PORT3						3
+#define  XLPORT_ENABLE_REG__PORT2						2
+#define  XLPORT_ENABLE_REG__PORT1						1
+#define  XLPORT_ENABLE_REG__PORT0						0
+#define XLPORT_MAC_CONTROL								(0x02021000)
+#define  XLPORT_MAC_CONTROL__RX_DUAL_CYCLE_TDM_EN		5
+#define  XLPORT_MAC_CONTROL__RX_NON_LINEAR_QUAD_TDM_EN	3
+#define  XLPORT_MAC_CONTROL__RX_FLEX_TDM_ENABLE			2
+#define  XLPORT_MAC_CONTROL__XMAC0_BYPASS_OSTS			1
+#define  XLPORT_MAC_CONTROL__XMAC0_RESET				0
+#define XLPORT_XGXS0_CTRL_REG							(0x02021400)
+#define  XLPORT_XGXS0_CTRL_REG__RefSel        8
+#define  XLPORT_XGXS0_CTRL_REG__RefCMOS       7
+#define  XLPORT_XGXS0_CTRL_REG__Pwrdwn_CML_LC 6
+#define  XLPORT_XGXS0_CTRL_REG__Pwrdwn_CML    5
+#define  XLPORT_XGXS0_CTRL_REG__IDDQ					4
+#define  XLPORT_XGXS0_CTRL_REG__PWRDWN					3
+#define  XLPORT_XGXS0_CTRL_REG__Refin_EN      2
+#define  XLPORT_XGXS0_CTRL_REG__RSTB_HW					0
+#define XLPORT_WC_UCMEM_CTRL							(0x02021900)
+#define  XLPORT_WC_UCMEM_CTRL__ACCESS_MODE				0
+#define XLPORT_MIB_RESET								(0x02022400)
+#define  XLPORT_MIB_RESET__CLR_CNT_L					3
+#define  XLPORT_MIB_RESET__CLR_CNT_R					0
+#define XLPORT_INTR_STATUS								(0x02022900)
+#define XLPORT_INTR_ENABLE								(0x02022a00)
+#define XLPORT_SOFT_RESET								(0x02020c00)
+#define  XLPORT_SOFT_RESET__PORT3						3
+#define  XLPORT_SOFT_RESET__PORT2						2
+#define  XLPORT_SOFT_RESET__PORT1						1
+#define  XLPORT_SOFT_RESET__PORT0						0
+#define XLPORT_POWER_SAVE								(0x02020d00)
+#define  XLPORT_POWER_SAVE__XPORT_CORE0					0
+
+#define XLPORT_PORT_FIELD(reg, port)					reg##__PORT##port
+#define XLPORT_PORT_FIELD_SET(_r, _p, _v)  { \
+	if (_p == 0)    	val |= (1 << _r##__PORT0); \
+	else if (_p == 1)   val |= (1 << _r##__PORT1); \
+	else if (_p == 2)   val |= (1 << _r##__PORT2); \
+	else if (_p == 3)   val |= (1 << _r##__PORT3); \
+}
+
+#define XLPORT_PORT_FIELD_CLEAR(_r, _p, _v)  { \
+	if (_p == 0)    	val &= ~(1 << _r##__PORT0); \
+	else if (_p == 1)   val &= ~(1 << _r##__PORT1); \
+	else if (_p == 2)   val &= ~(1 << _r##__PORT2); \
+	else if (_p == 3)   val &= ~(1 << _r##__PORT3); \
+}
+
+static u32 pm4x10_enabled = 0;
+
+static inline void
+xlmac_reg64_write(u32 addr, u64 val)
+{
+	iproc_cmic_schan_reg64_write(CMIC_BLOCK_TYPE_APM, addr, val);
+}
+
+static inline u64
+xlmac_reg64_read(u32 addr)
+{
+	return iproc_cmic_schan_reg64_read(CMIC_BLOCK_TYPE_APM, addr);
+}
+
+static inline void
+xlport_reg32_write(u32 addr, u32 val)
+{
+	iproc_cmic_schan_reg32_write(CMIC_BLOCK_TYPE_APM, addr, val);
+}
+
+static inline u32
+xlport_reg32_read(u32 addr)
+{
+	return iproc_cmic_schan_reg32_read(CMIC_BLOCK_TYPE_APM, addr);
+}
+
+
+/* MDIO address for each lane in this PM */
+static u32 lane_mdio_addr[4] = { 3, 4, 5, 6 };
+
+static inline void
+pm_phy_sbus_write(u32 lane, u32 addr, u32 val, u32 mask, u32 shift)
+{
+	u32 device, mem_data[4];
+
+  /* TSC register address (indirect access) */
+  if ((addr == 0x0002) || (addr == 0x0003) || ((addr <= 0xc340) && (addr >= 0x9000)))
+  	device = 0; /* PCS (TSC) */
+  else
+  	device = 1; /* PMA/PMD (Physical Media Device or called serdes(merlin)) */
+
+  mem_data[0] = (device << 27) | (lane_mdio_addr[lane] << 19) | (lane << 16) | addr;
+  mem_data[1] = ((val << shift) << 16) |       /* data */
+                (~(mask << shift) & 0xffff);   /* mask */
+  mem_data[2] = TSC_OPERATION_WRITE;
+  mem_data[3] = 0;
+	iproc_cmic_schan_ucmem_write(CMIC_BLOCK_TYPE_APM, mem_data);
+	}
+
+static inline u32
+pm_phy_sbus_read(u32 lane, u32 addr, u32 *val)
+{
+	u32 device, mem_data[4];
+
+	/* TSC register address (indirect access) */
+  if ((addr == 0x0002) || (addr == 0x0003) || ((addr <= 0xc340) && (addr >= 0x9000)))
+  	device = 0; /* PCS (TSC) */
+  else
+  	device = 1; /* PMA/PMD (Physical Media Device or called serdes(merlin)) */
+
+  mem_data[0] = (device << 27) | (lane_mdio_addr[lane] << 19) | (lane << 16) | addr;
+  mem_data[1] = 0;
+  mem_data[2] = TSC_OPERATION_READ;
+  mem_data[3] = 0;
+	iproc_cmic_schan_ucmem_write(CMIC_BLOCK_TYPE_APM, mem_data);
+	*val = iproc_cmic_schan_ucmem_read(CMIC_BLOCK_TYPE_APM, mem_data);
+	return 0;
+}
+
+
+static void cmpw(u8 readonly, u32 addr, u32 val)
+{
+	u8 i;
+	
+	if (readonly)
+  {
+    //printk("(read only) Reg addr = 0x%x, current = 0x%x, expect = 0x%x\n", reg_addr, get_val, reg_data_val);
+  } else
+  {
+   	//printk("(write) Reg addr = 0x%x, current = 0x%x, expect = 0x%x\n", reg_addr, get_val, reg_data_val);
+    for (i=0; i<4; ++i)  /* per lane */
+  	  if ((i % 2) == 0)
+        pm_phy_sbus_write(i, addr, val, 0xffff, 0);
+  }
+}
+
+static inline u32
+pm_phy_configure(int port)
+{
+	cmpw(0, 0x0002, 0x600d);	cmpw(0, 0x0003, 0x8770);	cmpw(0, 0x000d, 0x0000);	cmpw(0, 0x000e, 0x0000);
+	cmpw(0, 0x0096, 0x0000);	cmpw(0, 0x0097, 0x0000);	cmpw(0, 0x0098, 0x0000);  cmpw(0, 0x0099, 0x0000);
+  cmpw(0, 0x009a, 0x0000);  cmpw(0, 0x009b, 0x0000);  cmpw(0, 0x9000, 0x6000);  cmpw(0, 0x9001, 0x00aa);
+  cmpw(0, 0x9003, 0xe4e4);  cmpw(0, 0x9004, 0x0083);  cmpw(0, 0x9005, 0x0000);  cmpw(0, 0x9007, 0x0000);
+  cmpw(0, 0x9008, 0x0000);  cmpw(0, 0x9009, 0x0000);  cmpw(0, 0x900a, 0xf800);  cmpw(0, 0x900e, 0x0312);
+  cmpw(0, 0x9010, 0x0003);  cmpw(0, 0x9011, 0x0000);  cmpw(1, 0x9012, 0x0002);  cmpw(1, 0x9013, 0x0002);
+  cmpw(0, 0x9014, 0x0000);  cmpw(0, 0x9030, 0x0000);  cmpw(0, 0x9031, 0x0028);  cmpw(0, 0x9032, 0x0000);
+  cmpw(0, 0x9033, 0x0000);  cmpw(0, 0x9034, 0x0000);  cmpw(0, 0x9035, 0x0000);  cmpw(0, 0x9037, 0x0000);
+  cmpw(0, 0x9038, 0x0000);  cmpw(0, 0x9039, 0x0000);  cmpw(0, 0x903a, 0x0000);  cmpw(0, 0x903b, 0x0000);
+  cmpw(0, 0x903c, 0x0000);  cmpw(0, 0x903d, 0x0000);  cmpw(0, 0x903e, 0x0000);  cmpw(0, 0x9040, 0x0000);
+  cmpw(0, 0x9041, 0x0000);  cmpw(0, 0x9042, 0x0000);  cmpw(0, 0x9043, 0x0000);  cmpw(0, 0x9044, 0x0000);
+  cmpw(0, 0x9045, 0x0000);  cmpw(0, 0x9050, 0x0000);  cmpw(0, 0x9051, 0x0000);  cmpw(0, 0x9052, 0x0000);
+  cmpw(0, 0x9053, 0x0000);  cmpw(0, 0x9054, 0x0000);  cmpw(0, 0x9055, 0x0000);  cmpw(0, 0x9056, 0x0000);
+  cmpw(0, 0x9057, 0x0000);  cmpw(0, 0x9058, 0x0000);  cmpw(0, 0x9059, 0x0000);  cmpw(0, 0x905a, 0x0000);
+  cmpw(0, 0x9060, 0x0000);  cmpw(0, 0x9061, 0x0000);  cmpw(0, 0x9062, 0x0000);  cmpw(1, 0x90b1, 0x0000);
+  cmpw(0, 0x90b3, 0x0000);  cmpw(0, 0x90b4, 0x001d);  cmpw(0, 0x90b5, 0xffff);  cmpw(0, 0x9123, 0x3fff);
+  cmpw(0, 0x9130, 0x7690);  cmpw(0, 0x9131, 0xc4f0);  cmpw(0, 0x9132, 0xe647);  cmpw(0, 0x9140, 0x0000);
+  cmpw(0, 0x9141, 0x0000);  cmpw(0, 0x9142, 0x0000);  cmpw(0, 0x9220, 0x0101);  cmpw(0, 0x9221, 0x6140);
+  cmpw(0, 0x9222, 0xeea7);  cmpw(0, 0x9230, 0x4010);  cmpw(0, 0x9231, 0x0400);  cmpw(0, 0x9232, 0x0041);
+  cmpw(0, 0x9233, 0x8090);  cmpw(0, 0x9234, 0xa0b0);  cmpw(0, 0x9235, 0xc0d0);  cmpw(0, 0x9236, 0xe070);
+  cmpw(0, 0x9237, 0x0001);  cmpw(0, 0x9238, 0xf0f0);  cmpw(0, 0x9239, 0xf0f0);  cmpw(0, 0x923a, 0xf0f0);
+  cmpw(0, 0x923b, 0xf0f0);  cmpw(0, 0x923c, 0x0003);  cmpw(0, 0x9240, 0x0000);  cmpw(0, 0x9241, 0x0000);
+  cmpw(0, 0x9242, 0x0000);  cmpw(0, 0x9243, 0x0000);  cmpw(0, 0x9244, 0x0000);  cmpw(0, 0x9245, 0x0000);
+  cmpw(0, 0x9246, 0x0000);  cmpw(0, 0x9247, 0x0000);  cmpw(0, 0x9248, 0x0000);  cmpw(0, 0x9251, 0x029a);
+  cmpw(0, 0x9252, 0x0000);  cmpw(0, 0x9253, 0x10ed);  cmpw(0, 0x9254, 0x0000);  cmpw(0, 0x9255, 0x14d4);
+  cmpw(0, 0x9256, 0x029a);  cmpw(0, 0x9257, 0x8382);  cmpw(0, 0x9258, 0x0bb8);  cmpw(0, 0x9259, 0x0a6a);
+  cmpw(0, 0x925a, 0x029a);  cmpw(0, 0x925b, 0x0a6a);  cmpw(0, 0x925c, 0x029a);  cmpw(0, 0x925d, 0x3b5f);
+  cmpw(0, 0x925e, 0x006b);  cmpw(0, 0x9260, 0x0000);  cmpw(0, 0x9261, 0x0000);  cmpw(0, 0x9262, 0x00ff);
+  cmpw(0, 0x9263, 0x0002);  cmpw(0, 0x9264, 0x0000);  cmpw(0, 0x9270, 0xff00);  cmpw(0, 0x9272, 0x0000);
+  cmpw(0, 0x9273, 0x0000);  cmpw(0, 0x9274, 0x0400);  cmpw(0, 0x9275, 0x0000);  cmpw(0, 0x9276, 0x0000);
+  cmpw(0, 0x9277, 0x0000);  cmpw(0, 0x9278, 0x0000);  cmpw(0, 0x9279, 0x0000);  cmpw(0, 0x927a, 0x0000);
+  cmpw(0, 0x9280, 0xff00);  cmpw(0, 0x9282, 0x0000);  cmpw(0, 0x9283, 0x0000);  cmpw(0, 0x9284, 0x0400);
+  cmpw(0, 0x9285, 0x0000);  cmpw(0, 0x9286, 0x0000);  cmpw(0, 0x9287, 0x0000);  cmpw(0, 0x9288, 0x0000);
+  cmpw(0, 0x9289, 0x0000);  cmpw(0, 0x928a, 0x0000);  cmpw(0, 0x9290, 0xff00);  cmpw(0, 0x9292, 0x0000);
+  cmpw(0, 0x9293, 0x0000);  cmpw(0, 0x9294, 0x0400);  cmpw(0, 0x9295, 0x0000);  cmpw(0, 0x9296, 0x0000);
+  cmpw(0, 0x9297, 0x0000);  cmpw(0, 0x9298, 0x0000);  cmpw(0, 0x9299, 0x0000);  cmpw(0, 0x929a, 0x0000);
+  cmpw(0, 0x92a0, 0xff00);  cmpw(0, 0x92a2, 0x0000);  cmpw(0, 0x92a3, 0x0000);  cmpw(0, 0x92a4, 0x0400);
+  cmpw(0, 0x92a5, 0x0000);  cmpw(0, 0x92a6, 0x0000);  cmpw(0, 0x92a7, 0x0000);  cmpw(0, 0x92a8, 0x0000);
+  cmpw(0, 0x92a9, 0x0000);  cmpw(0, 0x92aa, 0x0000);  cmpw(0, 0xa000, 0xfffc);  cmpw(0, 0xa001, 0x8030);
+  cmpw(0, 0xa002, 0x0070);  cmpw(0, 0xa003, 0x0064);  cmpw(1, 0xa011, 0x0812);  cmpw(0, 0xa020, 0x0000);
+  cmpw(0, 0xa021, 0x0000);  cmpw(0, 0xa022, 0x0000);  cmpw(0, 0xa023, 0x1400);  cmpw(0, 0xa024, 0x030f);
+  cmpw(0, 0xa031, 0x0000);  cmpw(0, 0xa032, 0x0000);  cmpw(0, 0xa080, 0x0000);  cmpw(0, 0xa081, 0x0000);
+  cmpw(0, 0xa085, 0x0000);  cmpw(0, 0xa086, 0x8000);  cmpw(0, 0xc010, 0xc003);  cmpw(0, 0xc011, 0x0000);
+  cmpw(1, 0xc012, 0x000e);  cmpw(0, 0xc013, 0x000c);  cmpw(0, 0xc014, 0x0000);  cmpw(0, 0xc018, 0x0000);
+  cmpw(0, 0xc019, 0x0000);  cmpw(0, 0xc040, 0x0000);  cmpw(0, 0xc041, 0x0000);  cmpw(0, 0xc042, 0x0000);
+  cmpw(0, 0xc043, 0x0000);
+  //cmpw(0, 0xc050, 0x0135);  /* speed = 10M   */
+  //cmpw(0, 0xc050, 0x0136);  /* speed = 100M  */
+  cmpw(0, 0xc050, 0x0137);  /* speed = 1000M */
+  //cmpw(0, 0xc050, 0x011c);  /* speed = 10G   */
+  cmpw(1, 0xc051, 0x0000);  cmpw(0, 0xc052, 0x0000);  cmpw(1, 0xc054, 0xef62);  cmpw(0, 0xc055, 0x0000);
+  cmpw(0, 0xc058, 0x0000);  cmpw(0, 0xc060, 0x0000);  cmpw(0, 0xc061, 0x0000);  cmpw(0, 0xc070, 0x1c00);
+  cmpw(0, 0xc072, 0x0e05);  cmpw(0, 0xc073, 0x0830);  cmpw(0, 0xc074, 0x0010);  cmpw(0, 0xc075, 0x0021);
+  cmpw(0, 0xc076, 0x0000);  cmpw(0, 0xc077, 0x0040);  cmpw(0, 0xc078, 0x0004);  cmpw(0, 0xc079, 0x0000);
+  cmpw(0, 0xc07a, 0x0000);  cmpw(0, 0xc100, 0x0000);  cmpw(0, 0xc101, 0x0000);  cmpw(0, 0xc102, 0x0000);
+  cmpw(0, 0xc103, 0x0000);  cmpw(0, 0xc104, 0x0000);  cmpw(0, 0xc105, 0x0000);  cmpw(0, 0xc111, 0x0000);
+  cmpw(0, 0xc112, 0x01b4);  cmpw(0, 0xc113, 0x01cb);  cmpw(0, 0xc114, 0x0000);  cmpw(1, 0xc120, 0x4811);
+  cmpw(1, 0xc121, 0x0084);  cmpw(0, 0xc130, 0x0000);  cmpw(0, 0xc131, 0x2000);  cmpw(0, 0xc132, 0x442c);
+  cmpw(0, 0xc133, 0x0000);  cmpw(0, 0xc134, 0x0870);  cmpw(0, 0xc135, 0x0000);  cmpw(0, 0xc136, 0x0000);
+  cmpw(0, 0xc137, 0x0001);  cmpw(0, 0xc139, 0x0000);  cmpw(0, 0xc13d, 0x14a0);  cmpw(0, 0xc140, 0x0000);
+  cmpw(0, 0xc141, 0x0000);  cmpw(0, 0xc142, 0x0000);  cmpw(0, 0xc143, 0x0000);  cmpw(0, 0xc144, 0x0000);
+  cmpw(0, 0xc145, 0x0000);  cmpw(0, 0xc146, 0x0000);  cmpw(0, 0xc147, 0x0000);  cmpw(0, 0xc148, 0x0000);
+  cmpw(0, 0xc149, 0x0000);  cmpw(0, 0xc14a, 0x0000);  cmpw(0, 0xc14b, 0x0000);  cmpw(0, 0xc14c, 0x0000);
+  cmpw(0, 0xc14d, 0x0000);  cmpw(0, 0xc14e, 0x0000);  cmpw(0, 0xc152, 0x0000);  cmpw(0, 0xc153, 0x0000);
+  cmpw(0, 0xc154, 0x0000);  cmpw(0, 0xc155, 0x0000);  cmpw(0, 0xc156, 0x0000);  cmpw(0, 0xc157, 0x0000);
+  cmpw(0, 0xc158, 0x0000);  cmpw(0, 0xc159, 0x0000);  cmpw(0, 0xc15a, 0x0000);  cmpw(0, 0xc15b, 0x0000);
+  cmpw(0, 0xc15c, 0x0000);  cmpw(0, 0xc161, 0x0000);  cmpw(0, 0xc162, 0x0000);  cmpw(0, 0xc163, 0x0000);
+  cmpw(0, 0xc170, 0x0000);  cmpw(0, 0xc171, 0x0000);  cmpw(0, 0xc172, 0x0000);  cmpw(0, 0xc173, 0x0000);
+  cmpw(0, 0xc174, 0x0000);  cmpw(0, 0xc175, 0x0000);  cmpw(0, 0xc176, 0x0000);  cmpw(0, 0xc177, 0x0000);
+  cmpw(0, 0xc178, 0x0000);  cmpw(0, 0xc179, 0x0000);  cmpw(0, 0xc17a, 0x0000);  cmpw(0, 0xc17b, 0x0000);
+  cmpw(0, 0xc17c, 0x0000);  cmpw(0, 0xc17d, 0x0000);  cmpw(0, 0xc180, 0x0000);  cmpw(0, 0xc181, 0x0056);
+  cmpw(0, 0xc182, 0x0005);  cmpw(0, 0xc183, 0x2000);  cmpw(0, 0xc184, 0x0001);  cmpw(0, 0xc185, 0x02a1);
+  cmpw(0, 0xc186, 0x0168);  cmpw(0, 0xc187, 0x0000);  cmpw(0, 0xc188, 0x0000);  cmpw(0, 0xc190, 0x0000);
+  cmpw(0, 0xc191, 0x0000);  cmpw(0, 0xc192, 0x0000);  cmpw(0, 0xc193, 0x0000);  cmpw(0, 0xc194, 0x0000);
+  cmpw(0, 0xc195, 0x0000);  cmpw(0, 0xc196, 0x0000);  cmpw(0, 0xc197, 0x0000);  cmpw(0, 0xc198, 0x0000);
+  cmpw(0, 0xc199, 0x0000);  cmpw(0, 0xc19a, 0x0000);  cmpw(0, 0xc1a0, 0x0000);  cmpw(0, 0xc1a1, 0x0000);
+  cmpw(0, 0xc1a2, 0x0000);  cmpw(0, 0xc1a3, 0x0000);  cmpw(0, 0xc1a4, 0x0000);  cmpw(0, 0xc1a5, 0x0000);
+  cmpw(0, 0xc1a6, 0x0000);  cmpw(0, 0xc1a7, 0x0000);  cmpw(0, 0xc1a8, 0x0000);  cmpw(0, 0xc1a9, 0x0000);
+  cmpw(0, 0xc1aa, 0x0000);  cmpw(0, 0xc1ab, 0x0030);  cmpw(0, 0xc1ac, 0x0000);  cmpw(0, 0xc1ad, 0x0001);
+  cmpw(0, 0xc1ae, 0x0000);  cmpw(0, 0xc253, 0x4000);  cmpw(0, 0xc30a, 0x0000);  cmpw(0, 0xc30b, 0x0000);
+  cmpw(0, 0xc330, 0x0002);  cmpw(0, 0xc340, 0x0011);  cmpw(0, 0xd001, 0x0205);  cmpw(0, 0xd002, 0x0690);
+  cmpw(0, 0xd003, 0x00f0);  cmpw(0, 0xd004, 0x2401);  cmpw(1, 0xd005, 0xf07c);  cmpw(1, 0xd006, 0x0002);
+  cmpw(1, 0xd007, 0x6969);  cmpw(1, 0xd008, 0x3414);  cmpw(1, 0xd009, 0x5878);  cmpw(1, 0xd00a, 0x00e0);
+  cmpw(0, 0xd00b, 0x0060);  cmpw(0, 0xd00d, 0x0805);  cmpw(0, 0xd00e, 0x0000);  cmpw(0, 0xd010, 0x0028);
+  cmpw(0, 0xd011, 0x0200);  cmpw(0, 0xd012, 0x0087);  cmpw(0, 0xd013, 0x1c1e);  cmpw(0, 0xd014, 0x35ad);
+  cmpw(0, 0xd015, 0x35af);  cmpw(0, 0xd016, 0x340d);  cmpw(0, 0xd017, 0x0000);  cmpw(0, 0xd018, 0x0011);
+  cmpw(0, 0xd019, 0x0000);  cmpw(1, 0xd01a, 0x0004);  cmpw(1, 0xd01b, 0x0dff);  cmpw(1, 0xd01c, 0x0000);
+  cmpw(1, 0xd01d, 0x0000);  cmpw(1, 0xd01e, 0x0880);  cmpw(0, 0xd020, 0x0000);  cmpw(0, 0xd021, 0x0000);
+  cmpw(0, 0xd022, 0x0000);  cmpw(0, 0xd023, 0x0000);  cmpw(0, 0xd024, 0x0000);  cmpw(0, 0xd025, 0x0000);
+  cmpw(0, 0xd026, 0x0000);  cmpw(0, 0xd027, 0x8400);  cmpw(0, 0xd029, 0x0000);  cmpw(0, 0xd02a, 0x0000);
+  cmpw(0, 0xd02b, 0x2e02);  cmpw(0, 0xd02c, 0x0000);  cmpw(0, 0xd02d, 0x0000);  cmpw(0, 0xd02e, 0xc400);
+  cmpw(0, 0xd030, 0xa404);  cmpw(0, 0xd031, 0x2060);  cmpw(0, 0xd032, 0x0100);  cmpw(0, 0xd033, 0x0000);
+  cmpw(1, 0xd034, 0xfff0);  cmpw(1, 0xd035, 0x00d0);  cmpw(1, 0xd036, 0xfffa);  cmpw(1, 0xd037, 0x0096);
+  cmpw(1, 0xd038, 0x000b);  cmpw(1, 0xd039, 0x0108);  cmpw(1, 0xd03a, 0x2118);  cmpw(1, 0xd03b, 0x0000);
+  cmpw(1, 0xd03c, 0x0000);  cmpw(1, 0xd03d, 0x0000);  cmpw(1, 0xd03e, 0x009f);  cmpw(0, 0xd040, 0x00b8);
+  cmpw(0, 0xd041, 0x0000);  cmpw(0, 0xd042, 0x0001);  cmpw(0, 0xd050, 0x0004);  cmpw(0, 0xd051, 0x0052);
+  cmpw(0, 0xd052, 0x0310);  cmpw(0, 0xd053, 0x0000);  cmpw(0, 0xd054, 0x0000);  cmpw(0, 0xd055, 0x0000);
+  cmpw(0, 0xd056, 0x0000);  cmpw(0, 0xd060, 0x0000);  cmpw(0, 0xd061, 0x0000);  cmpw(0, 0xd062, 0x0000);
+  cmpw(0, 0xd063, 0x0004);  cmpw(0, 0xd064, 0x0a00);  cmpw(0, 0xd065, 0x0032);  cmpw(1, 0xd066, 0x0002);
+  cmpw(0, 0xd067, 0x03f5);  cmpw(0, 0xd070, 0x0000);  cmpw(0, 0xd071, 0x0000);  cmpw(0, 0xd072, 0x0000);
+  cmpw(0, 0xd073, 0x3100);  cmpw(0, 0xd074, 0x0004);  cmpw(0, 0xd075, 0x0004);  cmpw(0, 0xd078, 0x0000);
+  cmpw(0, 0xd079, 0x0000);  cmpw(0, 0xd07a, 0x0000);  cmpw(0, 0xd07b, 0x0000);  cmpw(0, 0xd07c, 0x0000);
+  cmpw(1, 0xd07d, 0x0002);
+  //cmpw(0, 0xd080, 0x8008);  /* speed = 10M */
+  //cmpw(0, 0xd080, 0x8008);  /* speed = 100M */
+  cmpw(0, 0xd080, 0x8008);  /* speed = 1000M */
+  //cmpw(0, 0xd080, 0x8000);  /* speed = 10G */
+  cmpw(0, 0xd081, 0x0001);  cmpw(0, 0xd083, 0x0000);  cmpw(0, 0xd085, 0x0000);  cmpw(0, 0xd086, 0x0000);
+  cmpw(1, 0xd089, 0x0000);  cmpw(0, 0xd08a, 0x0000);  cmpw(1, 0xd08b, 0x0000);  cmpw(1, 0xd08c, 0x0000);
+  cmpw(0, 0xd08e, 0x0001);  cmpw(0, 0xd090, 0x1c40);  cmpw(0, 0xd091, 0x1048);  cmpw(0, 0xd092, 0x7e92);
+  cmpw(0, 0xd093, 0x288f);  cmpw(0, 0xd094, 0x0820);  cmpw(0, 0xd095, 0x07a0);  cmpw(0, 0xd096, 0x14f8);
+  cmpw(0, 0xd097, 0x0121);  cmpw(0, 0xd098, 0x0000);  cmpw(0, 0xd099, 0x0088);  cmpw(0, 0xd0a0, 0x2800);
+  cmpw(0, 0xd0a1, 0x0744);  cmpw(0, 0xd0a2, 0x5250);  cmpw(0, 0xd0a3, 0x1556);  cmpw(0, 0xd0a4, 0x0000);
+  cmpw(0, 0xd0a5, 0x2800);  cmpw(0, 0xd0a6, 0x0001);  cmpw(0, 0xd0a7, 0x0aa0);  cmpw(0, 0xd0a8, 0x0000);
+  cmpw(0, 0xd0a9, 0x0000);  cmpw(0, 0xd0aa, 0x0088);  cmpw(0, 0xd0b0, 0x2480);  cmpw(0, 0xd0b1, 0x0007);
+  cmpw(0, 0xd0b2, 0x0080);  cmpw(0, 0xd0b3, 0x460e);  cmpw(0, 0xd0b4, 0x0501);  cmpw(0, 0xd0b5, 0x1405);
+  cmpw(0, 0xd0b6, 0x0000);  cmpw(0, 0xd0b7, 0x0000);  cmpw(0, 0xd0b8, 0x4442);  cmpw(0, 0xd0b9, 0x5285);
+  cmpw(0, 0xd0ba, 0x0015);  cmpw(0, 0xd0be, 0x0000);  cmpw(0, 0xd0bf, 0x0001);  cmpw(0, 0xd0c0, 0x5229);
+  cmpw(0, 0xd0c1, 0x0008);  cmpw(0, 0xd0c2, 0xfd29);  cmpw(1, 0xd0c8, 0x0333);  cmpw(1, 0xd0c9, 0x0303);
+  cmpw(1, 0xd0ca, 0x0000);  cmpw(1, 0xd0cb, 0x0001);  cmpw(1, 0xd0cc, 0x0009);  cmpw(0, 0xd0d0, 0x0602);
+  cmpw(0, 0xd0d1, 0x002a);  cmpw(0, 0xd0d2, 0x000e);  cmpw(0, 0xd0d3, 0x0000);  cmpw(0, 0xd0d4, 0x0000);
+  cmpw(0, 0xd0d5, 0x0000);  cmpw(0, 0xd0d6, 0x0000);  cmpw(0, 0xd0d7, 0x0000);  cmpw(0, 0xd0d8, 0x0002);
+  cmpw(0, 0xd0d9, 0x0000);  cmpw(0, 0xd0da, 0x8000);  cmpw(0, 0xd0db, 0x0000);  cmpw(0, 0xd0dc, 0x0000);
+  cmpw(0, 0xd0e0, 0x0000);  cmpw(0, 0xd0e1, 0x000a);  cmpw(0, 0xd0e2, 0x0002);  cmpw(0, 0xd0e3, 0x0000);
+  cmpw(0, 0xd0e8, 0x0002);  cmpw(0, 0xd0f0, 0x0363);  cmpw(0, 0xd0f1, 0x0001);  cmpw(0, 0xd0f2, 0x0000);
+  cmpw(0, 0xd0f3, 0x0000);  cmpw(0, 0xd0f4, 0xa271);  cmpw(0, 0xd0f5, 0x0000);  cmpw(0, 0xd0f6, 0x0000);
+  cmpw(0, 0xd0f7, 0x8604);  cmpw(1, 0xd0f8, 0x0000);  cmpw(1, 0xd0f9, 0x001c);  cmpw(1, 0xd0fa, 0x403c);
+  cmpw(0, 0xd0fe, 0x0000);  cmpw(0, 0xd100, 0xff00);  cmpw(0, 0xd101, 0xff00);  cmpw(0, 0xd102, 0xff00);
+  cmpw(0, 0xd103, 0xff00);  cmpw(0, 0xd104, 0xff00);  cmpw(0, 0xd105, 0xff00);  cmpw(0, 0xd106, 0xff00);
+  cmpw(0, 0xd107, 0xff00);  cmpw(0, 0xd108, 0xff00);  cmpw(0, 0xd109, 0xff00);  cmpw(0, 0xd10a, 0xff00);
+  cmpw(0, 0xd10b, 0xff00);  cmpw(0, 0xd10c, 0xff00);  cmpw(0, 0xd10d, 0xff00);  cmpw(0, 0xd10e, 0xff00);
+  cmpw(0, 0xd110, 0x0000);  cmpw(0, 0xd111, 0x0020);  cmpw(1, 0xd112, 0x0000);  cmpw(0, 0xd113, 0xc140);
+  cmpw(0, 0xd11b, 0x00aa);  cmpw(0, 0xd11c, 0x4155);  cmpw(0, 0xd11d, 0x4914);  cmpw(0, 0xd11e, 0x000f);
+  cmpw(0, 0xd120, 0x1ffa);  cmpw(0, 0xd121, 0xfff0);  cmpw(0, 0xd122, 0x0fff);  cmpw(0, 0xd123, 0x1007);
+  cmpw(0, 0xd124, 0x8240);  cmpw(0, 0xd125, 0x8160);  cmpw(0, 0xd126, 0x0000);  cmpw(1, 0xd128, 0x4f52);
+  cmpw(1, 0xd129, 0x1fdb);  cmpw(1, 0xd12a, 0xbffd);  cmpw(1, 0xd12b, 0xfff3);  cmpw(1, 0xd12c, 0xfff3);
+  cmpw(1, 0xd12d, 0x23ff);  cmpw(1, 0xd12e, 0x5288);  cmpw(0, 0xd130, 0x01f4);  cmpw(0, 0xd131, 0x00c8);
+  cmpw(1, 0xd141, 0x003f);  cmpw(1, 0xd142, 0x0003);  cmpw(1, 0xd143, 0x0000);  cmpw(1, 0xd144, 0x003f);
+  cmpw(1, 0xd145, 0x0003);  cmpw(1, 0xd146, 0x0000);  cmpw(1, 0xd147, 0x0010);  cmpw(0, 0xd150, 0x0000);
+  cmpw(0, 0xd151, 0x0101);  cmpw(0, 0xd152, 0x0202);  cmpw(0, 0xd153, 0x0303);  cmpw(0, 0xd161, 0x0000);
+  cmpw(0, 0xd162, 0x0000);  cmpw(0, 0xd163, 0x0000);  cmpw(0, 0xd164, 0x0003);  cmpw(0, 0xd167, 0x0000);
+  cmpw(0, 0xd168, 0x041c);  cmpw(1, 0xd16c, 0x0000);  cmpw(0, 0xd171, 0x0000);  cmpw(0, 0xd172, 0x0000);
+  cmpw(0, 0xd174, 0x0003);  cmpw(0, 0xd177, 0x0000);  cmpw(1, 0xd17c, 0x0000);  cmpw(0, 0xd17d, 0x0001);
+  cmpw(0, 0xd180, 0x8000);  cmpw(0, 0xd181, 0x0001);  cmpw(0, 0xd183, 0x0000);  cmpw(1, 0xd185, 0x0000);
+  cmpw(0, 0xd186, 0x0000);  cmpw(1, 0xd189, 0x0000);  cmpw(1, 0xd18a, 0x0000);  cmpw(1, 0xd18b, 0x0000);
+  cmpw(1, 0xd18c, 0x0000);  cmpw(0, 0xd18e, 0x0001);  cmpw(0, 0xd190, 0x8000);  cmpw(0, 0xd191, 0x0001);
+  cmpw(0, 0xd193, 0x0000);  cmpw(1, 0xd195, 0x0000);  cmpw(0, 0xd196, 0x0000);  cmpw(1, 0xd199, 0x0000);
+  cmpw(0, 0xd19a, 0x0000);  cmpw(1, 0xd19b, 0x0000);  cmpw(1, 0xd19c, 0x0000);  cmpw(0, 0xd19e, 0x0001);
+  cmpw(0, 0xd200, 0x0003);  cmpw(0, 0xd201, 0x000b);  cmpw(0, 0xd202, 0x0011);  cmpw(0, 0xd200, 0x0003);
+  cmpw(1, 0xd203, 0x0001);  cmpw(0, 0xd204, 0x0800);  cmpw(0, 0xd205, 0x2000);  cmpw(0, 0xd206, 0x0200);
+  cmpw(0, 0xd207, 0x0000);  cmpw(0, 0xd208, 0x0800);  cmpw(0, 0xd209, 0x2000);  cmpw(1, 0xd20a, 0x0200);
+  cmpw(1, 0xd20b, 0x0000);  cmpw(0, 0xd20c, 0x0000);  cmpw(0, 0xd20d, 0x0000);  cmpw(0, 0xd20e, 0x0000);
+  cmpw(1, 0xd210, 0x02ec);  cmpw(0, 0xd211, 0x0000);  cmpw(0, 0xd212, 0x0000);  cmpw(1, 0xd213, 0x0000);
+  cmpw(1, 0xd214, 0x0000);  cmpw(0, 0xd215, 0x0000);  cmpw(0, 0xd216, 0x0007);  cmpw(1, 0xd217, 0x0000);
+  cmpw(1, 0xd218, 0x0802);  cmpw(1, 0xd219, 0x0802);  cmpw(1, 0xd21a, 0x7a90);  cmpw(0, 0xd21b, 0x0000);
+  cmpw(0, 0xd220, 0x0000);  cmpw(0, 0xd221, 0x0000);  cmpw(1, 0xd222, 0x0000);  cmpw(1, 0xd223, 0x0018);
+  cmpw(0, 0xd224, 0x0000);  cmpw(0, 0xd225, 0x8401);  cmpw(0, 0xd226, 0x0000);  cmpw(1, 0xd227, 0x0000);
+  cmpw(0, 0xd228, 0x0101);  cmpw(0, 0xd229, 0x0000);  cmpw(1, 0xd22a, 0x0007);  cmpw(0, 0xffdc, 0x001f);
+  cmpw(0, 0xffdd, 0x404d);  cmpw(0, 0xffde, 0x0000);  cmpw(0, 0xffdf, 0x0000);
+}
+
+
+static inline u32
+pm_ucode_download(u8 *ucode_image, u16 ucode_len)
+{
+	u32 get_val;
+  u8 i, wrdata_lsb;
+  u16 wrdata_lsw, ucode_len_padded, count = 0;  
+
+  /* Check array pointer */
+  if (ucode_image == (u8 *)NULL) {
+    printk("uCode Image is empty !!\n");
+    return -1;
+	}
+
+  /* Check ucode size */ 
+  if (ucode_len > (32768)) {                      /* 16 x 2048 */
+    printk("Can't fit all of the firmware into the device load table(max = 16 x 2048 bytes) \n");
+    return -1;
+  }
+	
+  //[1] EFUN(wrc_micro_master_clk_en(0x1));                   /* Enable clock to microcontroller subsystem */
+  /* [0xd200] Write to Clock control register 0 to enable micro core clock (m0) */
+  pm_phy_sbus_write(0, 0xd200, 0x0001, 0x0001, 0);
+  
+  //[2] EFUN(wrc_micro_master_rstb(0x1));                     /* De-assert reset to microcontroller sybsystem */
+  /* [0xd201] Write to Reset control registers 0 to make micro_master_rstb = 1 */
+  pm_phy_sbus_write(0, 0xd201, 0x0001, 0x0001, 0);
+  
+  //[3] EFUN(wrc_micro_master_rstb(0x0));                     /* Assert reset to microcontroller sybsystem - Toggling reset */
+  /* [0xd201] Write to Reset control registers 0 to make micro_master_rstb = 0 */
+  pm_phy_sbus_write(0, 0xd201, 0x0000, 0x0001, 0);
+
+  //[4] EFUN(wrc_micro_master_rstb(0x1));                     /* De-assert reset to microcontroller sybsystem */
+  /* [0xd201] Write to Reset control registers 0 to make micro_master_rstb = 1 */
+  pm_phy_sbus_write(0, 0xd201, 0x0001, 0x0001, 0);
+  
+  //[5] EFUN(wrc_micro_ra_init(0x1));                         /* Set initialization command to initialize code RAM */
+  /* [0xd202] Write to rmi to ahb control register 0 to initialize code RAMs */
+  pm_phy_sbus_write(0, 0xd202, 0x0001, 0x0003, 8);
+  
+  //[6] EFUN(merlin16_INTERNAL_poll_micro_ra_initdone(sa__, 250)); /* Poll for micro_ra_initdone = 1 to indicate initialization done */
+  /* [0xd203] Read from ahb status register 0 to make sure all are done */
+  for (i=0; i<100; ++i)
+  {
+  	pm_phy_sbus_read(0, 0xd203, &get_val);
+  	if (get_val == 0x1)    /* code/data RAM initialization process is complete */
+  		break;
+    udelay(2500);
+  }
+  if (i == 100)
+  {
+  	printk("code/data RAM initialization process is timeout !!\n");
+  	return -1;
+  }
+  
+  //[7] EFUN(wrc_micro_ra_init(0x0));                         /* Clear initialization command */
+  /* [0xd202] Write to rmi to ahb control register 0 to clear intialize code/data RAM command */
+  pm_phy_sbus_write(0, 0xd202, 0x0000, 0x0003, 8);
+  
+  ucode_len_padded = ((ucode_len + 3) & 0xFFFC);        /* Aligning ucode size to 4-byte boundary */
+  
+  /* Code to Load microcode */
+  //[8] EFUN(wrc_micro_autoinc_wraddr_en(0x1));               /* To auto increment RAM write address */
+  /* [0xd202] Write to rmi to ahb control register 0 to make Automatic increment write address enable */
+  pm_phy_sbus_write(0, 0xd202, 0x0001, 0x0001, 12);
+  
+  //[9] EFUN(wrc_micro_ra_wrdatasize(0x1));                   /* Select 16bit transfers */
+  /* [0xd202] Write to rmi to ahb control register 0 to select write data size = 16 bits */
+  pm_phy_sbus_write(0, 0xd202, 0x0001, 0x0003, 0);
+  
+  //[10] EFUN(wrc_micro_ra_wraddr_msw(0x0));                  /* Upper 16bits of start address of Program RAM where the ucode is to be loaded */
+  /* [0xd205] Write to rmi to ahb write address MSW (bits 31:16) register with 0 */
+  pm_phy_sbus_write(0, 0xd205, 0x0000, 0xffff, 0);
+  
+  //[11] EFUN(wrc_micro_ra_wraddr_lsw(0x0));                  /* Lower 16bits of start address of Program RAM where the ucode is to be loaded */
+  /* [0xd206] Write to rmi to ahb write data LSW (bits 15:0) register with 0 (starting address = 0x0) */
+  pm_phy_sbus_write(0, 0xd206, 0x0000, 0xffff, 0);
+  
+  do {                                                        /* ucode_image loaded 16bits at a time */
+  	/* wrdata_lsb read from ucode_image; zero padded to 4byte boundary */
+    wrdata_lsb = (count < ucode_len) ? ucode_image[count] : 0x0;
+    count++;
+    /* wrdata_msb read from ucode_image; zero padded to 4byte boundary */
+    wrdata_lsw = (count < ucode_len) ? ucode_image[count] : 0x0;
+    count++;
+    /* 16bit wrdata_lsw formed from 8bit msb and lsb values read from ucode_image */
+    wrdata_lsw = ((wrdata_lsw << 8) | wrdata_lsb);
+    
+    //[12] EFUN(wrc_micro_ra_wrdata_lsw(wrdata_lsw));         /* Program RAM lower 16bits write data */
+    /* [0xd206] Write to rmi to ahb write data LSW (bits 15:0) register with data */
+    pm_phy_sbus_write(0, 0xd206, wrdata_lsw, 0xffff, 0);
+  } while (count < ucode_len_padded);                 /* Loop repeated till entire image loaded (upto the 4byte boundary) */
+  
+  //[13] EFUN(wrc_micro_ra_wrdatasize(0x2));                  /* Select 32bit transfers as default */
+  /* [0xd202] Write to rmi to ahb control register 0 to Select 32bit transfers as default */
+  pm_phy_sbus_write(0, 0xd202, 0x0002, 0x0003, 0);
+  
+  //[14] EFUN(wrc_micro_core_clk_en(0x1));                    /* Enable clock to M0 core */
+  /* [0xd200] Write to Clock control register 0 to enable micro core clock enable (m0) */
+  pm_phy_sbus_write(0, 0xd200, 0x0001, 0x0001, 1);
+  
+  return 0;
+}
+
+static int __xlmac_credit_reset(int port)
+{
+	return 0;
+}
+
+static void __xlmac_enable_set(int port, bool enable)
+{
+	u64 ctrl, octrl;
+	int soft_reset;
+
+	ctrl = xlmac_reg64_read(XLMAC_CTRL(port));
+	octrl = ctrl;
+	/* Don't disable TX since it stops egress and hangs if CPU sends */
+	ctrl |= (1 << XLMAC_CTRL__TX_EN);
+	ctrl &= ~(1 << XLMAC_CTRL__RX_EN);
+	if (enable) {
+		ctrl |= (1 << XLMAC_CTRL__RX_EN);
+	}
+
+	if (ctrl == octrl) {
+		/* SDK-49952 fix soluition :
+		 *  >> to avoid the unexpected early return to prevent this problem.
+		 *  1. Problem occurred for disabling process only.
+		 *  2. To comply origianl designing senario, XLMAC_CTRLr.SOFT_RESETf is
+		 *	  used to early check to see if this port is at disabled state
+		 *	  already.
+		 */
+		soft_reset = ctrl & (1 << XLMAC_CTRL__SOFT_RESET);
+		if ((enable) || (!enable && soft_reset)){
+			return;
+		}
+	}
+
+	ctrl |= (1 << XLMAC_CTRL__SOFT_RESET);
+	if (enable) {
+		/* Reset EP credit before de-assert SOFT_RESET */
+		__xlmac_credit_reset(port);
+		/* Deassert SOFT_RESET */
+		ctrl &= ~(1 << XLMAC_CTRL__SOFT_RESET);
+	}
+
+	xlmac_reg64_write(XLMAC_CTRL(port), ctrl);
+}
+
+static int __xlmac_enable_get(int port)
+{
+	u64 ctrl;
+	int tx_en, rx_en;
+
+	ctrl = xlmac_reg64_read(XLMAC_CTRL(port));
+	tx_en = ctrl & (1 << XLMAC_CTRL__TX_EN);
+	rx_en = ctrl & (1 << XLMAC_CTRL__RX_EN);
+
+	return (tx_en && rx_en);
+}
+
+static int __xlmac_speed_set(int port, int speed)
+{
+	u64 speed_cfg, val64;
+	int enable;
+
+  //pm_phy_sbus_write(port, 0xd080, 0x8008, 0x8008, 0); /* CKRST_CTRL_OSR_MODE_CONTROL */
+
+	if (speed == 1000) {
+		speed_cfg = SPEED_MODE_LINK_1G;
+		pm_phy_sbus_write(port, 0xc050, 0x0037, 0x01ff, 0); /* SC_X4_CONTROL_CONTROL */
+	} else if (speed == 100) {
+		speed_cfg = SPEED_MODE_LINK_100M;
+		pm_phy_sbus_write(port, 0xc050, 0x0036, 0x01ff, 0); /* SC_X4_CONTROL_CONTROL */
+	} else if (speed == 10) {
+		speed_cfg = SPEED_MODE_LINK_10M;
+		pm_phy_sbus_write(port, 0xc050, 0x0035, 0x01ff, 0); /* SC_X4_CONTROL_CONTROL */
+	} else {
+		printk("%s: Invalid xlport speed(%d)!\n", __func__, speed);
+		return -1;
+	}
+
+	pm_phy_sbus_write(port, 0xc050, 0x0000, 0x0001, 8); /* SC_X4_CONTROL_CONTROL */
+	pm_phy_sbus_write(port, 0xc050, 0x0001, 0x0001, 8); /* SC_X4_CONTROL_CONTROL */
+
+	enable = __xlmac_enable_get(port);
+	/* disable before updating the speed */
+	if (enable) {
+		__xlmac_enable_set(port, 0);
+	}
+
+	/* Update the speed */
+	val64 = xlmac_reg64_read(XLMAC_MODE(port));
+	val64 &= ~(0x70);
+	val64 |= speed_cfg << XLMAC_MODE__SPEED_MODE_R;
+	xlmac_reg64_write(XLMAC_MODE(port), val64);
+	debug("%s XLMAC_MODE = 0x%llx\n",  __func__, xlmac_reg64_read(XLMAC_MODE(port)));
+
+	if (enable) {
+		__xlmac_enable_set(port, 1);
+	}
+	return 0;
+}
+
+static int __xlmac_rx_max_size_set(int port, int value)
+{
+	u64 val64;
+	u64 mask64;
+
+	val64 = xlmac_reg64_read(XLMAC_RX_MAX_SIZE(port));
+	mask64 = (1 << XLMAC_RX_MAX_SIZE__RX_MAX_SIZE_WIDTH) - 1;
+	val64 &= ~(mask64 << XLMAC_RX_MAX_SIZE__RX_MAX_SIZE_R);
+	val64 |= value << XLMAC_RX_MAX_SIZE__RX_MAX_SIZE_R;
+	xlmac_reg64_write(XLMAC_RX_MAX_SIZE(port), val64);
+
+	return 0;
+}
+
+static int __xlmac_tx_mac_addr_set(int port, u8 *mac)
+{
+	u64 val64;
+
+	/* set our local address */
+	debug("GMAC: %02x:%02x:%02x:%02x:%02x:%02x\n",
+			mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
+
+	val64 = (u64)htonl(*(u32 *)&mac[2]);
+	val64 |= ((u64)htons(*(u32 *)mac) << 32);
+	xlmac_reg64_write(XLMAC_TX_MAC_SA(port), val64);
+
+	debug("%s XLMAC_TX_MAC_SA = 0x%llx\n",  __func__, xlmac_reg64_read(XLMAC_TX_MAC_SA(port)));
+	return 0;
+}
+
+static int __xlmac_init(int port)
+{
+	u64 val64;
+
+	/* Disable Tx/Rx, assume that MAC is stable (or out of reset) */
+	val64 = xlmac_reg64_read(XLMAC_CTRL(port));
+	val64 &= ~(1 << XLMAC_CTRL__XGMII_IPG_CHECK_DISABLE);
+	val64 &= ~(1 << XLMAC_CTRL__RX_EN);
+	val64 &= ~(1 << XLMAC_CTRL__TX_EN);
+	xlmac_reg64_write(XLMAC_CTRL(port), val64);
+
+	/* XLMAC_RX_CTRL */
+	val64 = xlmac_reg64_read(XLMAC_RX_CTRL(port));
+	val64 &= ~(1 << XLMAC_RX_CTRL__STRIP_CRC);
+	xlmac_reg64_write(XLMAC_RX_CTRL(port), val64);
+
+	/* XLMAC_TX_CTRL */
+	val64 = xlmac_reg64_read(XLMAC_TX_CTRL(port));
+	val64 &= ~(0x3 << XLMAC_TX_CTRL__CRC_MODE_R);
+	val64 |= (CRC_MODE_REPLACE << XLMAC_TX_CTRL__CRC_MODE_R);
+	val64 |= (1 << XLMAC_TX_CTRL__PAD_EN);
+	xlmac_reg64_write(XLMAC_TX_CTRL(port), val64);
+
+	/* PAUSE */
+	val64 = xlmac_reg64_read(XLMAC_PAUSE_CTRL(port));
+	val64 |= 1 << XLMAC_PAUSE_CTRL__RX_PAUSE_EN;
+	val64 |= 1 << XLMAC_PAUSE_CTRL__TX_PAUSE_EN;
+	xlmac_reg64_write(XLMAC_PAUSE_CTRL(port), val64);
+
+	/* PFC */
+	val64 = xlmac_reg64_read(XLMAC_PFC_CTRL(port));
+	val64 |= ((u64)1 << XLMAC_PFC_CTRL__PFC_REFRESH_EN);
+	xlmac_reg64_write(XLMAC_PFC_CTRL(port), val64);
+
+	/* Set jumbo max size (8000 byte payload) */
+	__xlmac_rx_max_size_set(port, JUMBO_MAXSZ);
+
+	/* XLMAC_RX_LSS_CTRL */
+	val64 = xlmac_reg64_read(XLMAC_RX_LSS_CTRL(port));
+	val64 |= 1 << XLMAC_RX_LSS_CTRL__DROP_TX_DATA_ON_LINK_INTERRUPT;
+	val64 |= 1 << XLMAC_RX_LSS_CTRL__DROP_TX_DATA_ON_REMOTE_FAULT;
+	val64 |= 1 << XLMAC_RX_LSS_CTRL__DROP_TX_DATA_ON_LOCAL_FAULT;
+	xlmac_reg64_write(XLMAC_RX_LSS_CTRL(port), val64);
+
+	/* Disable loopback and bring XLMAC out of reset */
+	val64 = xlmac_reg64_read(XLMAC_CTRL(port));
+	val64 &= ~(1 << XLMAC_CTRL__SOFT_RESET);;
+	val64 &= ~(1 << XLMAC_CTRL__LOCAL_LPBK);
+	val64 |= 1 << XLMAC_CTRL__RX_EN;
+	val64 |= 1 << XLMAC_CTRL__TX_EN;
+	xlmac_reg64_write(XLMAC_CTRL(port), val64);
+
+	return 0;
+}
+
+static int __tsc_reset(int in_reset)
+{
+	u32 val;
+
+	val = xlport_reg32_read(XLPORT_XGXS0_CTRL_REG);
+	if (in_reset) {
+		//val &= ~(7 << XLPORT_XGXS0_CTRL_REG__RefSel);
+		val |= (1 << XLPORT_XGXS0_CTRL_REG__IDDQ);
+		//val &= ~(1 << XLPORT_XGXS0_CTRL_REG__Refin_EN);
+		val |= 1 << XLPORT_XGXS0_CTRL_REG__PWRDWN;
+		val &= ~(1 << XLPORT_XGXS0_CTRL_REG__RSTB_HW);
+	} else {
+		//val |= (5 << XLPORT_XGXS0_CTRL_REG__RefSel);
+		val &= ~(1 << XLPORT_XGXS0_CTRL_REG__IDDQ);
+		//val |= (1 << XLPORT_XGXS0_CTRL_REG__Refin_EN);
+		val &= ~(1 << XLPORT_XGXS0_CTRL_REG__PWRDWN);
+		//val &= ~(0 << XLPORT_XGXS0_CTRL_REG__RSTB_HW);
+		val |= (1 << XLPORT_XGXS0_CTRL_REG__RSTB_HW);
+	}
+	xlport_reg32_write(XLPORT_XGXS0_CTRL_REG, val);
+
+
+/*	if (!in_reset)
+	{
+  	msleep(1);
+	  val |= (1 << XLPORT_XGXS0_CTRL_REG__RSTB_HW);
+		xlport_reg32_write(XLPORT_XGXS0_CTRL_REG, val);
+	} */
+	msleep(1);
+	return 0;
+}
+
+static void pm4x10_tsc_config(int port)
+{
+#ifdef CONFIG_IPROC_EMULATION
+	printf("skip %s... in emulation\n", __func__);
+#else
+	u32 val;
+	int i;
+
+	/* Global PMD reset controls */
+	pm_phy_sbus_write(port, 0x9010, 0x0000, 0xffff, 0);
+	udelay(10);
+	pm_phy_sbus_write(port, 0x9010, 0x0003, 0xffff, 0);
+	udelay(10);
+	
+	/* PMD lane reset controls */
+	for (i=0; i<4; ++i)
+	{
+	  pm_phy_sbus_write(i, 0xc010, 0x0000, 0xc003, 0);
+	  udelay(10);
+	  pm_phy_sbus_write(i, 0xc010, 0xc003, 0xc003, 0);
+	}
+	/* set refclk_sel = 156.25 MHz */
+	pm_phy_sbus_write(port, 0x9000, 0x0003, 0x0007, 13);
+	/* set heartbeat_count_1us = 0x271 */
+	pm_phy_sbus_write(port, 0xd0f4, 0x0271, 0x03ff, 0);
+#endif
+	return 0;
+}
+
+/*****************************************************************************
+*****************************************************************************/
+static void pm4x10_xlport_mac_enable(int port)
+{
+	__xlmac_enable_set(port, 1);
+}
+
+static void pm4x10_xlport_mac_disable(int port)
+{
+	__xlmac_enable_set(port, 0);
+}
+
+//static int pm4x10_xlport_speed_set(int port, int speed)
+int pm4x10_xlport_speed_set(int port, int speed)
+{
+	return __xlmac_speed_set(port, speed);
+}
+
+//static int pm4x10_xlport_mac_addr_set(int port, u8 *mac)
+int pm4x10_xlport_mac_addr_set(int port, u8 *mac)
+{
+	return __xlmac_tx_mac_addr_set(port, mac);
+}
+
+static int pm4x10_xlport_max_packet_size_set(int port, int value)
+{
+	return __xlmac_rx_max_size_set(port, value);
+}
+
+//static int pm4x10_xlport_loopback_set(int port, int lb_type, int lb_en)
+int pm4x10_xlport_loopback_set(int port, int lb_type, int lb_en)
+{
+	u64 val64;
+	u32 val32;
+//printk("  (%s) enter.....port = %d, lb_type = %d, lb_en = %d\n", __func__, port, lb_type, lb_en);
+
+	switch(lb_type) {
+		case pmLoopbackMac:
+			val64 = xlmac_reg64_read(XLMAC_CTRL(port));
+	    val64 &= ~(1 << XLMAC_CTRL__LOCAL_LPBK);
+	    if (lb_en) {
+		    printk("(%s) MAC port = %d, lb_en = %d\n", __func__, port, lb_en);
+		    val64 |= (1 << XLMAC_CTRL__LOCAL_LPBK);
+	    }
+	    xlmac_reg64_write(XLMAC_CTRL(port), val64);
+			break;
+
+		case pmLoopbackPhy:
+			if (lb_en) {
+				printk("(%s) PHY port = %d, lb_en = %d\n", __func__, port, lb_en);
+				pm_phy_sbus_write(port*2, 0x9009, (1 << port*2), 0x000f, 4);  /* MAIN0_LOOPBACK_CONTROL */
+				pm_phy_sbus_write(port*2, 0xc014, 0x0043, 0x0043, 0);  /* PMD_X4_OVERRIDE */
+				pm_phy_sbus_write(port*2, 0xc010, 0x0001, 0x0001, 8);  /* PMD_X4_CONTROL */
+			} else {
+				pm_phy_sbus_write(port*2, 0x9009, 0x0000, 0x000f, 4);  /* MAIN0_LOOPBACK_CONTROL */
+				pm_phy_sbus_write(port*2, 0xc014, 0x0000, 0x0043, 0);  /* PMD_X4_OVERRIDE */
+				pm_phy_sbus_write(port*2, 0xc010, 0x0000, 0x0001, 8);  /* PMD_X4_CONTROL */
+			}
+			break;
+
+		default:
+			break;
+	}
+	return 0;
+}
+
+//static int pm4x10_xlport_stats_get(int port, struct iproc_pm_stats *stats)
+int pm4x10_xlport_stats_get(int port, struct iproc_pm_stats *stats)
+{
+	stats->rx_frames = xlmac_reg64_read(XLMIB_GRxPkt(port));
+	stats->rx_frame_good = xlmac_reg64_read(XLMIB_GRxPOK(port));
+	stats->rx_bytes = xlmac_reg64_read(XLMIB_GRxByt(port));
+	stats->rx_frame_64 = xlmac_reg64_read(XLMIB_GRx64(port));
+	stats->rx_frame_127 = xlmac_reg64_read(XLMIB_GRx127(port));
+	stats->rx_frame_255 = xlmac_reg64_read(XLMIB_GRx255(port));
+	stats->rx_frame_511 = xlmac_reg64_read(XLMIB_GRx511(port));
+	stats->rx_frame_1023 = xlmac_reg64_read(XLMIB_GRx1023(port));
+	stats->rx_frame_1518 = xlmac_reg64_read(XLMIB_GRx1518(port));
+	stats->rx_frame_1522 = xlmac_reg64_read(XLMIB_GRx1522(port));
+	stats->rx_frame_jumbo = xlmac_reg64_read(XLMIB_GRx2047(port)) +
+							xlmac_reg64_read(XLMIB_GRx4095(port)) +
+							xlmac_reg64_read(XLMIB_GRx9216(port)) +
+							xlmac_reg64_read(XLMIB_GRx16383(port));
+	stats->rx_frame_unicast = xlmac_reg64_read(XLMIB_GRxUCA(port));
+	stats->rx_frame_multicast = xlmac_reg64_read(XLMIB_GRxMCA(port));
+	stats->rx_frame_broadcast = xlmac_reg64_read(XLMIB_GRxBCA(port));
+	stats->rx_frame_control = xlmac_reg64_read(XLMIB_GRxCF(port));
+	stats->rx_frame_pause = xlmac_reg64_read(XLMIB_GRxPF(port));
+	stats->rx_frame_jabber = xlmac_reg64_read(XLMIB_GRxJBR(port));
+	stats->rx_frame_fragment = xlmac_reg64_read(XLMIB_GRxFRG(port));
+	stats->rx_frame_vlan = xlmac_reg64_read(XLMIB_GRxVLN(port));
+	stats->rx_frame_dvlan = xlmac_reg64_read(XLMIB_GRxDVLN(port));
+	stats->rx_frame_fcs_error = xlmac_reg64_read(XLMIB_GRxFCS(port));
+	stats->rx_frame_unsupport = xlmac_reg64_read(XLMIB_GRxUO(port));
+	stats->rx_frame_wrong_sa = xlmac_reg64_read(XLMIB_GRxWSA(port));
+	stats->rx_frame_align_err = xlmac_reg64_read(XLMIB_GRxALN(port));
+	stats->rx_frame_length_err = xlmac_reg64_read(XLMIB_GRxFLR(port));
+	stats->rx_frame_oversize = xlmac_reg64_read(XLMIB_GRxOVR(port));
+	stats->rx_frame_mtu_err = xlmac_reg64_read(XLMIB_GRxMTUE(port));
+	stats->rx_frame_truncated_err = xlmac_reg64_read(XLMIB_GRxTRFU(port));
+	stats->rx_frame_undersize = xlmac_reg64_read(XLMIB_GRxUND(port));
+	stats->tx_frames = xlmac_reg64_read(XLMIB_GTxPkt(port));
+	stats->tx_frame_good = xlmac_reg64_read(XLMIB_GTxPOK(port));
+	stats->tx_bytes = xlmac_reg64_read(XLMIB_GTxBYT(port));
+	stats->tx_frame_64 = xlmac_reg64_read(XLMIB_GTx64(port));
+	stats->tx_frame_127 = xlmac_reg64_read(XLMIB_GTx127(port));
+	stats->tx_frame_255 = xlmac_reg64_read(XLMIB_GTx255(port));
+	stats->tx_frame_511 = xlmac_reg64_read(XLMIB_GTx511(port));
+	stats->tx_frame_1023 = xlmac_reg64_read(XLMIB_GTx1023(port));
+	stats->tx_frame_1518 = xlmac_reg64_read(XLMIB_GTx1518(port));
+	stats->tx_frame_1522 = xlmac_reg64_read(XLMIB_GTx1522(port));
+	stats->tx_frame_jumbo = xlmac_reg64_read(XLMIB_GTx2047(port)) +
+							xlmac_reg64_read(XLMIB_GTx4095(port)) +
+							xlmac_reg64_read(XLMIB_GTx9216(port)) +
+							xlmac_reg64_read(XLMIB_GTx16383(port));
+	stats->tx_frame_unicast = xlmac_reg64_read(XLMIB_GTxUCA(port));
+	stats->tx_frame_multicast = xlmac_reg64_read(XLMIB_GTxMCA(port));
+	stats->tx_frame_broadcast = xlmac_reg64_read(XLMIB_GTxBCA(port));
+	stats->tx_frame_control = xlmac_reg64_read(XLMIB_GTxCF(port));
+	stats->tx_frame_pause = xlmac_reg64_read(XLMIB_GTxPF(port));
+	stats->tx_frame_jabber = xlmac_reg64_read(XLMIB_GTxJBR(port));
+	stats->tx_frame_fragment = xlmac_reg64_read(XLMIB_GTxFRG(port));
+	stats->tx_frame_vlan = xlmac_reg64_read(XLMIB_GTxVLN(port));
+	stats->tx_frame_dvlan = xlmac_reg64_read(XLMIB_GTxDVLN(port));
+	stats->tx_frame_fcs_error = xlmac_reg64_read(XLMIB_GTxFCS(port));
+	stats->tx_frame_oversize = xlmac_reg64_read(XLMIB_GTxOVR(port));
+	stats->tx_frame_error = xlmac_reg64_read(XLMIB_GTxErr(port));
+	stats->tx_frame_fifo_underrun = xlmac_reg64_read(XLMIB_GTxUFL(port));
+	stats->tx_frame_collision = xlmac_reg64_read(XLMIB_GTxNCL(port));
+
+	return 0;
+}
+
+//static int pm4x10_xlport_mib_reset(int port)
+int pm4x10_xlport_mib_reset(int port)
+{
+	u32 val;
+
+	/* MIB reset */
+	val = xlport_reg32_read(XLPORT_MIB_RESET);
+	val |= (1 << port) << XLPORT_MIB_RESET__CLR_CNT_R;
+	xlport_reg32_write(XLPORT_MIB_RESET, val);
+
+	val &= ~((1 << port) << XLPORT_MIB_RESET__CLR_CNT_R);
+	xlport_reg32_write(XLPORT_MIB_RESET, val);
+
+	return 0;
+}
+
+//static int pm4x10_pm_xlport_port_config(int port, int enable)
+int pm4x10_pm_xlport_port_config(int port, int enable)
+{
+	u32 val;
+
+	if (enable) {
+		/* Soft reset */
+		val = xlport_reg32_read(XLPORT_SOFT_RESET);
+		XLPORT_PORT_FIELD_SET(XLPORT_SOFT_RESET, port, val);
+		xlport_reg32_write(XLPORT_SOFT_RESET, val);
+
+		XLPORT_PORT_FIELD_CLEAR(XLPORT_SOFT_RESET, port, val);
+		xlport_reg32_write(XLPORT_SOFT_RESET, val);
+
+		/* Port enable */
+		val = xlport_reg32_read(XLPORT_ENABLE_REG);
+		XLPORT_PORT_FIELD_SET(XLPORT_ENABLE_REG, port, val);
+		xlport_reg32_write(XLPORT_ENABLE_REG, val);
+
+		/* Init MAC */
+		__xlmac_init(port);
+
+#if 0 //FIXME
+		/* LSS */
+		val = xlport_reg32_read(XLPORT_FAULT_LINK_STATUS(port));
+		val |= 1 << XLPORT_FAULT_LINK_STATUS__REMOTE_FAULT;
+		val |= 1 << XLPORT_FAULT_LINK_STATUS__LOCAL_FAULT;
+		xlport_reg32_write(XLPORT_FAULT_LINK_STATUS(port), val);
+#endif /* 0 */
+
+		/* MIB reset */
+		val = xlport_reg32_read(XLPORT_MIB_RESET);
+		val |= (1 << port) << XLPORT_MIB_RESET__CLR_CNT_R;
+		xlport_reg32_write(XLPORT_MIB_RESET, val);
+
+		val &= ~((1 << port) << XLPORT_MIB_RESET__CLR_CNT_R);
+		xlport_reg32_write(XLPORT_MIB_RESET, val);
+	} else {
+		/* Port disable */
+		val = xlport_reg32_read(XLPORT_ENABLE_REG);
+		XLPORT_PORT_FIELD_CLEAR(XLPORT_ENABLE_REG, port, val);
+		xlport_reg32_write(XLPORT_ENABLE_REG, val);
+
+		/* Soft reset */
+		val = xlport_reg32_read(XLPORT_SOFT_RESET);
+		XLPORT_PORT_FIELD_CLEAR(XLPORT_SOFT_RESET, port, val);
+		xlport_reg32_write(XLPORT_SOFT_RESET, val);
+	}
+
+	return 0;
+}
+
+static int pm4x10_pm_disable(void)
+{
+	u32 val;
+
+	/* Put MAC in reset */
+	val = xlport_reg32_read(XLPORT_MAC_CONTROL);
+	val |= 1 << XLPORT_MAC_CONTROL__XMAC0_RESET;
+	xlport_reg32_write(XLPORT_MAC_CONTROL, val);
+
+	/* Put Serdes in reset*/
+	__tsc_reset(1);
+
+	return 0;
+}
+
+static int pm4x10_pm_enable(void)
+{
+	u32 val;
+	u32 mask;
+
+	/* Power Save */
+	val = xlport_reg32_read(XLPORT_POWER_SAVE);
+	val &= ~(1 << XLPORT_POWER_SAVE__XPORT_CORE0);
+	xlport_reg32_write(XLPORT_POWER_SAVE, val);
+
+	/* Port configuration */
+	val = xlport_reg32_read(XLPORT_MODE_REG);
+	mask = (1 << XLPORT_MODE_REG__XPORT0_CORE_PORT_MODE_WIDTH) - 1;
+	val &= ~(mask << XLPORT_MODE_REG__XPORT0_CORE_PORT_MODE_R);
+	val |= (XPORT0_CORE_PORT_MODE_QUAD << XLPORT_MODE_REG__XPORT0_CORE_PORT_MODE_R);
+	mask = (1 << XLPORT_MODE_REG__XPORT0_PHY_PORT_MODE_WIDTH) - 1;
+	val &= ~(mask << XLPORT_MODE_REG__XPORT0_PHY_PORT_MODE_R);
+	val |= (XPORT0_CORE_PORT_MODE_QUAD << XLPORT_MODE_REG__XPORT0_PHY_PORT_MODE_R);
+	xlport_reg32_write(XLPORT_MODE_REG, val);
+
+	/* Get Serdes OOR */
+	__tsc_reset(1);
+	__tsc_reset(0);
+
+	/* Bring MAC OOR */
+	val = xlport_reg32_read(XLPORT_MAC_CONTROL);
+	val &= ~(1 << XLPORT_MAC_CONTROL__XMAC0_RESET);
+	xlport_reg32_write(XLPORT_MAC_CONTROL, val);
+
+	return 0;
+}
+
+int pm4x10_pm_init(struct iproc_pm_ops *pm_ops, u8 land_idx)
+{
+#if 0
+	pm_ops = kmalloc(sizeof(struct iproc_pm_ops), GFP_KERNEL);
+	if (!pm_ops) {
+		return -ENOMEM;
+	}
+	pm_ops->port_enable= pm4x10_pm_xlport_port_config;
+	pm_ops->port_speed = pm4x10_xlport_speed_set;
+	pm_ops->port_loopback = pm4x10_xlport_loopback_set;
+	pm_ops->port_mac_addr = pm4x10_xlport_mac_addr_set;
+	pm_ops->port_stats = pm4x10_xlport_stats_get;
+	pm_ops->port_stats_clear = pm4x10_xlport_mib_reset;
+#endif
+
+#if 0	
+	if (!pm4x10_enabled)  /* check initialize for first time */
+#else
+  if (pm4x10_enabled == 0x100)  /* don't do it now */
+#endif
+	{
+	  /* configure TSC registers before download ucode */
+	  pm4x10_tsc_config(land_idx);
+	  
+	  /* ucode download */
+    pm_ucode_download(merlin16_ucode, merlin16_ucode_len);
+    
+    /* Configure TSC/merlin16 registers */
+    pm_phy_configure(land_idx);
+    
+    /* Enable PM4x10 */
+		pm4x10_pm_enable();
+		pm4x10_enabled++;
+	}
+
+	return 0;
+}
+
+int pm4x10_pm_deinit(struct iproc_pm_ops *pm_ops)
+{
+#if 0
+	kfree(pm_ops);
+	pm_ops = NULL;
+#endif
+	pm4x10_enabled--;
+	if (!pm4x10_enabled) {
+		pm4x10_pm_disable();
+	}
+
+	return 0;
+}
+
+#if 0
+static void pm4x10_xlport_config(int port)
+{
+	u32 val;
+	u64 val64;
+
+	/* xlport_mac_config */
+	val = xlport_reg32_read(XLPORT_ENABLE_REG);
+	val |= ((1 << XLPORT_ENABLE_REG__PORT0) | (1 << XLPORT_ENABLE_REG__PORT2));
+	xlport_reg32_write(XLPORT_ENABLE_REG, val);
+	debug("%s XLPORT_ENABLE_REG = 0x%x\n",  __func__, xlport_reg32_read(XLPORT_ENABLE_REG));
+
+	val = xlport_reg32_read(XLPORT_MAC_CONTROL);
+	val &= ~(1 << XLPORT_MAC_CONTROL__XMAC0_RESET);
+	xlport_reg32_write(XLPORT_MAC_CONTROL, val);
+
+	/* xlport_intr_enable ? */
+
+	/* Resetting MIB counter */
+	xlport_reg32_write(XLPORT_MIB_RESET, 0xf);
+	/* FIXME : delay? */
+	/* udelay(10); */
+	xlport_reg32_write(XLPORT_MIB_RESET, 0x0);
+
+	/* Ethernet mode, 1G */
+	val64 = xlmac_reg64_read(XLMAC_MODE(port));
+	val64 &= ~(0x70);
+	val64 |= SPEED_MODE_LINK_1G << XLMAC_MODE__SPEED_MODE_R;
+	xlmac_reg64_write(XLMAC_MODE(port), val64);
+	debug("%s XLMAC_MODE = 0x%llx\n",  __func__, xlmac_reg64_read(XLMAC_MODE(port)));
+
+	val64 = xlmac_reg64_read(XLMAC_RX_CTRL(port));
+	val64 &= ~(1 << XLMAC_RX_CTRL__STRIP_CRC);
+	xlmac_reg64_write(XLMAC_RX_CTRL(port), val64);
+	debug("%s XLMAC_RX_CTRL = 0x%llx\n",  __func__, xlmac_reg64_read(XLMAC_RX_CTRL(port)));
+
+	val64 = xlmac_reg64_read(XLMAC_TX_CTRL(port));
+	val64 &= ~(0x3 << XLMAC_TX_CTRL__CRC_MODE_R);
+	val64 |= (CRC_MODE_REPLACE << XLMAC_TX_CTRL__CRC_MODE_R);
+	val64 |= (1 << XLMAC_TX_CTRL__PAD_EN);
+	xlmac_reg64_write(XLMAC_TX_CTRL(port), val64);
+	debug("%s XLMAC_TX_CTRL = 0x%llx\n",  __func__, xlmac_reg64_read(XLMAC_TX_CTRL(port)));
+
+#if 0
+	val64 = xlmac_reg64_read(XLMAC_CTRL(port));
+	val64 &= ~(1 << XLMAC_CTRL__SOFT_RESET);
+	val64 |= ((1 << XLMAC_CTRL__RX_EN) | (1 << XLMAC_CTRL__TX_EN));
+	xlmac_reg64_write(XLMAC_CTRL(port), val64);
+	debug("%s XLMAC_CTRL = 0x%llx\n",  __func__, xlmac_reg64_read(XLMAC_CTRL(port)));
+#endif
+}
+#endif /* 0 */
-- 
2.33.0

