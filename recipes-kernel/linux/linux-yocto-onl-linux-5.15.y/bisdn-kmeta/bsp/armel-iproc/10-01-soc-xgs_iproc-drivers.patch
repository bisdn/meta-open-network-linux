diff --git a/drivers/soc/bcm/Makefile b/drivers/soc/bcm/Makefile
index 0f0efa28d92b..2495fd8732db 100644
--- a/drivers/soc/bcm/Makefile
+++ b/drivers/soc/bcm/Makefile
@@ -3,3 +3,4 @@ obj-$(CONFIG_BCM2835_POWER)	+= bcm2835-power.o
 obj-$(CONFIG_RASPBERRYPI_POWER)	+= raspberrypi-power.o
 obj-y				+= bcm63xx/
 obj-$(CONFIG_SOC_BRCMSTB)	+= brcmstb/
+obj-$(CONFIG_ARCH_XGS_IPROC)	+= xgs_iproc/
diff --git a/drivers/soc/bcm/xgs_iproc/Makefile b/drivers/soc/bcm/xgs_iproc/Makefile
new file mode 100644
index 000000000000..dd95e6943fbc
--- /dev/null
+++ b/drivers/soc/bcm/xgs_iproc/Makefile
@@ -0,0 +1 @@
+obj-$(CONFIG_ARCH_XGS_IPROC) += xgs-iproc-misc-setup.o xgs-iproc-idm.o xgs-iproc.o iproc-cmic.o iproc-cmicx.o iproc-cmicd.o
diff --git a/drivers/soc/bcm/xgs_iproc/iproc-cmic.c b/drivers/soc/bcm/xgs_iproc/iproc-cmic.c
new file mode 100644
index 000000000000..d4132ba9a5ec
--- /dev/null
+++ b/drivers/soc/bcm/xgs_iproc/iproc-cmic.c
@@ -0,0 +1,161 @@
+/*
+ * Copyright (C) 2016 Broadcom
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/module.h>
+#include <asm/io.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/of_device.h>
+#include <linux/soc/bcm/iproc-cmic.h>
+
+
+extern const struct sbus_ops cmicx_sbus_ops;
+extern const struct sbus_ops cmicd_sbus_ops;
+
+static struct iproc_cmic *cmic;
+
+int iproc_cmic_schan_reg32_write(u32 blk_type, u32 addr, u32 val)
+{
+	if (cmic && cmic->sbus_ops) {
+		if (cmic->sbus_ops->reg32_write) {
+			return cmic->sbus_ops->reg32_write(cmic, blk_type, addr, val);
+		}
+	}
+	return -EINVAL;
+}
+
+u32 iproc_cmic_schan_reg32_read(u32 blk_type, u32 addr)
+{
+	if (cmic && cmic->sbus_ops) {
+		if (cmic->sbus_ops->reg32_read) {
+			return cmic->sbus_ops->reg32_read(cmic, blk_type, addr);
+		}
+	}
+	return 0;
+}
+
+int iproc_cmic_schan_reg64_write(u32 blk_type, u32 addr, u64 val)
+{
+	if (cmic && cmic->sbus_ops) {
+		if (cmic->sbus_ops->reg64_write) {
+			return cmic->sbus_ops->reg64_write(cmic, blk_type, addr, val);
+		}
+	}
+	return -EINVAL;
+}
+
+u64 iproc_cmic_schan_reg64_read(u32 blk_type, u32 addr)
+{
+	if (cmic && cmic->sbus_ops) {
+		if (cmic->sbus_ops->reg64_read) {
+			return cmic->sbus_ops->reg64_read(cmic, blk_type, addr);
+		}
+	}
+	return 0;
+}
+
+int iproc_cmic_schan_ucmem_write(u32 blk_type, u32 *mem)
+{
+	if (cmic && cmic->sbus_ops) {
+		if (cmic->sbus_ops->ucmem_write) {
+			return cmic->sbus_ops->ucmem_write(cmic, blk_type, mem);
+		}
+	}
+	return -EINVAL;
+}
+
+int iproc_cmic_schan_ucmem_read(u32 blk_type, u32 *mem)
+{
+	if (cmic && cmic->sbus_ops) {
+		if (cmic->sbus_ops->ucmem_read) {
+			return cmic->sbus_ops->ucmem_read(cmic, blk_type, mem);
+		}
+	}
+	return -EINVAL;
+}
+
+void inline __iomem *iproc_cmic_base_get(void)
+{
+	if (cmic && cmic->base) {
+		return cmic->base;
+	}
+	return NULL;
+}
+
+/****************************************************************************
+ ***************************************************************************/
+static int cmic_probe(struct platform_device *pdev)
+{
+	struct device_node *np = pdev->dev.of_node;
+
+	cmic = devm_kzalloc(&pdev->dev, sizeof(*cmic), GFP_KERNEL);
+	if (!cmic) {
+		return -ENOMEM;
+	}
+
+	platform_set_drvdata(pdev, cmic);
+	cmic->dev = &pdev->dev;
+
+	cmic->base = (void *)of_iomap(np, 0);
+	if (IS_ERR(cmic->base)) {
+		dev_err(&pdev->dev, "Unable to iomap CMIC resource\n");
+		return PTR_ERR(cmic->base);
+	}
+
+	if (of_device_is_compatible(np, "brcm,iproc-cmicx")) {
+		cmic->sbus_ops = &cmicx_sbus_ops;
+	} else if (of_device_is_compatible(np, "brcm,iproc-cmicd")) {
+		cmic->sbus_ops = &cmicd_sbus_ops;
+	}
+
+	if (cmic->sbus_ops) {
+		if (cmic->sbus_ops->init) {
+			/* Initial cmic */
+			cmic->sbus_ops->init(cmic);
+		}
+	}
+
+	return 0;
+}
+
+static int cmic_remove(struct platform_device *pdev)
+{
+	if (cmic->base) {
+		iounmap(cmic->base);
+	}
+
+	devm_kfree(&pdev->dev, cmic);
+	cmic = NULL;
+
+	return 0;
+}
+
+static const struct of_device_id iproc_cmic_of_match[] = {
+	{.compatible = "brcm,iproc-cmicx",},
+	{.compatible = "brcm,iproc-cmicd",},
+	{},
+};
+MODULE_DEVICE_TABLE(of, iproc_cmic_of_match);
+
+static struct platform_driver iproc_cmic_driver = {
+	.driver = {
+		.name  = "iproc_cmic",
+		.of_match_table = iproc_cmic_of_match,
+	},
+	.probe = cmic_probe,
+	.remove = cmic_remove,
+};
+
+module_platform_driver(iproc_cmic_driver);
+MODULE_LICENSE("GPL");
+
diff --git a/drivers/soc/bcm/xgs_iproc/iproc-cmicd.c b/drivers/soc/bcm/xgs_iproc/iproc-cmicd.c
new file mode 100644
index 000000000000..24738e2c509a
--- /dev/null
+++ b/drivers/soc/bcm/xgs_iproc/iproc-cmicd.c
@@ -0,0 +1,166 @@
+/*
+ * Copyright (C) 2016 Broadcom
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/module.h>
+#include <asm/io.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/of_device.h>
+#include <linux/soc/bcm/iproc-cmic.h>
+
+#define CMICD_SBUS_RING_MAP_0_7(base)			(base + 0x10098)
+#define CMICD_SBUS_RING_MAP_8_15(base)			(base + 0x1009C)
+#define CMICD_SBUS_RING_MAP_16_23(base)			(base + 0x100A0)
+#define CMICD_SBUS_RING_MAP_24_31(base)			(base + 0x100A4)
+#define CMICD_SCHAN_CH0_CTRL(base)				(base + 0x10000)
+#define CMICD_SCHAN_CH0_MESSAGE(base)			(base + 0x1000c)
+
+#define READ_MEMORY_CMD_MSG				0x07
+#define READ_MEMORY_ACK_MSG				0x08
+#define WRITE_MEMORY_CMD_MSG			0x09
+#define WRITE_MEMORY_ACK_MSG			0x0a
+#define READ_REGISTER_CMD_MSG			0x0b
+#define READ_REGISTER_ACK_MSG			0x0c
+#define WRITE_REGISTER_CMD_MSG			0x0d
+#define WRITE_REGISTER_ACK_MSG			0x0e
+#define SBUSV4_REGTYPE_SHIFT			25
+#define SBUSV4_REGADDR_SHIFT			8
+#define SBUSV4_OPCODE_SHIFT				26
+#define SBUSV4_BLOCKID_SHIFT			19
+#define SBUSV4_DLEN_SHIFT				7
+
+#define CMICD_XLPORT_WC_UCMEM_DATA		0x0
+#define REG32_DATA_LEN					4
+#define REG64_DATA_LEN					8
+#define UCMEM_DATA_LEN					16
+
+#define CMICD_BLOCK_ID_TOP				16
+
+
+#define CMICD_CMD(mode, blk, len)		((mode << SBUSV4_OPCODE_SHIFT) | \
+			 							 (blk << SBUSV4_BLOCKID_SHIFT) | \
+										 (len << SBUSV4_DLEN_SHIFT))
+
+static int __cmicd_schan_write(struct iproc_cmic *cmic,
+						u32 cmd, u32 addr, u32 *val, int len)
+{
+	u32 read = 0x0;
+	void __iomem *msg_addr;
+	int i;
+
+	if (!cmic || !cmic->base) {
+		return -EINVAL;
+	}
+
+	msg_addr = CMICD_SCHAN_CH0_MESSAGE(cmic->base);
+	writel(cmd, msg_addr);
+
+	msg_addr += 4;
+	writel(addr, msg_addr);
+
+	for (i = 0; i < len; i++) {
+		msg_addr += 4;
+		writel(val[i], msg_addr);
+	}
+
+    writel(0x1, CMICD_SCHAN_CH0_CTRL(cmic->base));
+
+	// FIXME, should set timeout
+    while (read != 0x2) {
+        read = readl(CMICD_SCHAN_CH0_CTRL(cmic->base));
+    }
+    return read;
+}
+
+static int __cmicd_schan_read(struct iproc_cmic *cmic,
+						u32 cmd, u32 addr, u32 *val, int len)
+{
+	u32 read = 0x0;
+	void __iomem *msg_addr;
+	int i;
+
+	if (!cmic || !cmic->base) {
+		return -EINVAL;
+	}
+
+	read = __cmicd_schan_write(cmic, cmd, addr, NULL, 0);
+	if (read != 0x02) {
+		return read;
+	}
+
+	msg_addr = CMICD_SCHAN_CH0_MESSAGE(cmic->base);
+    for (i = 0; i < len; i++) {
+		msg_addr += 4;
+        val[i] = readl(msg_addr);
+    }
+    return val[0];
+}
+
+static int iproc_cmicd_schan_reg32_write(struct iproc_cmic *cmic,
+						u32 blk_type, u32 addr, u32 val)
+{
+	u32 cmd, block;
+
+	if (!cmic || !cmic->base) {
+		return -EINVAL;
+	}
+
+	if (blk_type == CMIC_BLOCK_TYPE_TOP) {
+		block = CMICD_BLOCK_ID_TOP;
+	} else {
+		return -EINVAL;
+	}
+
+	cmd = CMICD_CMD(WRITE_REGISTER_CMD_MSG, block, REG32_DATA_LEN);
+	return __cmicd_schan_write(cmic, cmd, addr, &val, 1);
+}
+
+static u32 iproc_cmicd_schan_reg32_read(struct iproc_cmic *cmic,
+						u32 blk_type, u32 addr)
+{
+	u32 cmd, block, val;
+
+	if (!cmic || !cmic->base) {
+		return -EINVAL;
+	}
+
+	if (blk_type == CMIC_BLOCK_TYPE_TOP) {
+		block = CMICD_BLOCK_ID_TOP;
+	} else {
+		return -EINVAL;
+	}
+
+	cmd = CMICD_CMD(READ_REGISTER_CMD_MSG, block, REG32_DATA_LEN);
+	return __cmicd_schan_read(cmic, cmd, addr, &val, 1);
+}
+
+static int iproc_cmicd_init(struct iproc_cmic *cmic)
+{
+	if (!cmic || !cmic->base) {
+		return -EINVAL;
+	}
+
+	/* Configure SBUS Ring Map for TOP, block id = 16, ring number = 4 */
+	writel(0x11112200, CMICD_SBUS_RING_MAP_0_7(cmic->base));
+	writel(0x00430001, CMICD_SBUS_RING_MAP_8_15(cmic->base));
+	writel(0x00005064, CMICD_SBUS_RING_MAP_16_23(cmic->base));
+	writel(0x00000000, CMICD_SBUS_RING_MAP_24_31(cmic->base));
+
+	return 0;
+}
+
+const struct sbus_ops cmicd_sbus_ops = {
+	.init			= iproc_cmicd_init,
+	.reg32_write	= iproc_cmicd_schan_reg32_write,
+	.reg32_read		= iproc_cmicd_schan_reg32_read,
+};
diff --git a/drivers/soc/bcm/xgs_iproc/iproc-cmicx.c b/drivers/soc/bcm/xgs_iproc/iproc-cmicx.c
new file mode 100644
index 000000000000..0d62b37d2651
--- /dev/null
+++ b/drivers/soc/bcm/xgs_iproc/iproc-cmicx.c
@@ -0,0 +1,269 @@
+/*
+ * Copyright (C) 2016 Broadcom
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/module.h>
+#include <asm/io.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/of_device.h>
+#include <linux/soc/bcm/iproc-cmic.h>
+
+#define CMICX_TOP_SBUS_TIMEOUT(base)			(base + 0x00000)
+#define CMICX_TOP_SBUS_RING_MAP_0_7(base)		(base + 0x0000c)
+#define CMICX_TOP_SBUS_RING_MAP_32_39(base)		(base + 0x0001c)
+#define CMICX_SCHAN_CH0_CTRL(base)				(base + 0x10000)
+#define CMICX_SCHAN_CH0_MESSAGE(base)			(base + 0x1000c)
+
+#define READ_MEMORY_CMD_MSG				0x07
+#define READ_MEMORY_ACK_MSG				0x08
+#define WRITE_MEMORY_CMD_MSG			0x09
+#define WRITE_MEMORY_ACK_MSG			0x0a
+#define READ_REGISTER_CMD_MSG			0x0b
+#define READ_REGISTER_ACK_MSG			0x0c
+#define WRITE_REGISTER_CMD_MSG			0x0d
+#define WRITE_REGISTER_ACK_MSG			0x0e
+#define SBUSV4_REGTYPE_SHIFT			25
+#define SBUSV4_REGADDR_SHIFT			8
+#define SBUSV4_OPCODE_SHIFT				26
+#define SBUSV4_BLOCKID_SHIFT			19
+#define SBUSV4_DLEN_SHIFT				7
+
+#define CMICX_XLPORT_WC_UCMEM_DATA		0x0
+#define REG32_DATA_LEN					4
+#define REG64_DATA_LEN					8
+#define UCMEM_DATA_LEN					16
+
+#define CMICX_BLOCK_ID_TOP				7
+#define CMICX_BLOCK_ID_XLPORT7			38
+
+
+#define CMICX_CMD(mode, blk, len)		((mode << SBUSV4_OPCODE_SHIFT) | \
+			 							 (blk << SBUSV4_BLOCKID_SHIFT) | \
+										 (len << SBUSV4_DLEN_SHIFT))
+
+static int __cmicx_schan_write(struct iproc_cmic *cmic,
+						u32 cmd, u32 addr, u32 *val, int len)
+{
+	u32 read = 0x0;
+	void __iomem *msg_addr;
+	int i;
+
+	if (!cmic || !cmic->base) {
+		return -EINVAL;
+	}
+
+	msg_addr = CMICX_SCHAN_CH0_MESSAGE(cmic->base);
+	writel(cmd, msg_addr);
+
+	msg_addr += 4;
+	writel(addr, msg_addr);
+
+	for (i = 0; i < len; i++) {
+		msg_addr += 4;
+		writel(val[i], msg_addr);
+	}
+
+    writel(0x1, CMICX_SCHAN_CH0_CTRL(cmic->base));
+
+	// FIXME, should set timeout
+    while (read != 0x2) {
+        read = readl(CMICX_SCHAN_CH0_CTRL(cmic->base));
+    }
+    return read;
+}
+
+static int __cmicx_schan_read(struct iproc_cmic *cmic,
+						u32 cmd, u32 addr, u32 *val, int len)
+{
+	u32 read = 0;
+	void __iomem *msg_addr;
+	int i;
+
+	if (!cmic || !cmic->base) {
+		return -EINVAL;
+	}
+
+	msg_addr = CMICX_SCHAN_CH0_MESSAGE(cmic->base);
+	writel(cmd, msg_addr);
+
+	msg_addr += 4;
+	writel(addr, msg_addr);
+	
+	writel(0x1, CMICX_SCHAN_CH0_CTRL(cmic->base));
+
+	// FIXME, should set timeout
+	while (read != 0x2) {
+		read = readl(CMICX_SCHAN_CH0_CTRL(cmic->base));
+	}
+
+	msg_addr = CMICX_SCHAN_CH0_MESSAGE(cmic->base);
+    for (i = 0; i < len; i++) {
+		msg_addr += 4;
+        val[i] = readl(msg_addr);
+    }
+	
+	if (len == 1)
+    return val[0];
+	else
+		return val[1];
+}
+
+static int iproc_cmicx_schan_reg32_write(struct iproc_cmic *cmic,
+						u32 blk_type, u32 addr, u32 val)
+{
+	u32 cmd, block;
+
+	if (!cmic || !cmic->base) {
+		return -EINVAL;
+	}
+
+	if (blk_type == CMIC_BLOCK_TYPE_TOP) {
+		block = CMICX_BLOCK_ID_TOP;
+	} else if (blk_type == CMIC_BLOCK_TYPE_APM) {
+		block = CMICX_BLOCK_ID_XLPORT7;	} else {
+		return -EINVAL;
+	}
+
+	cmd = CMICX_CMD(WRITE_REGISTER_CMD_MSG, block, REG32_DATA_LEN);
+	return __cmicx_schan_write(cmic, cmd, addr, &val, 1);
+}
+
+static u32 iproc_cmicx_schan_reg32_read(struct iproc_cmic *cmic,
+						u32 blk_type, u32 addr)
+{
+	u32 cmd, block, val;
+
+	if (!cmic || !cmic->base) {
+		return -EINVAL;
+	}
+
+	if (blk_type == CMIC_BLOCK_TYPE_TOP) {
+		block = CMICX_BLOCK_ID_TOP;
+	} else if (blk_type == CMIC_BLOCK_TYPE_APM) {
+		block = CMICX_BLOCK_ID_XLPORT7;	} else {
+		return -EINVAL;
+	}
+
+	cmd = CMICX_CMD(READ_REGISTER_CMD_MSG, block, REG32_DATA_LEN);
+	return __cmicx_schan_read(cmic, cmd, addr, &val, 1);
+}
+
+static int iproc_cmicx_schan_reg64_write(struct iproc_cmic *cmic,
+						u32 blk_type, u32 addr, u64 val)
+{
+	u32 cmd, block;
+
+	if (!cmic || !cmic->base) {
+		return -EINVAL;
+	}
+
+	if (blk_type == CMIC_BLOCK_TYPE_TOP) {
+		block = CMICX_BLOCK_ID_TOP;
+	} else if (blk_type == CMIC_BLOCK_TYPE_APM) {
+		block = CMICX_BLOCK_ID_XLPORT7;	} else {
+		return -EINVAL;
+	}
+
+	cmd = CMICX_CMD(WRITE_REGISTER_CMD_MSG, block, REG64_DATA_LEN);
+	return __cmicx_schan_write(cmic, cmd, addr, (u32 *)&val, 2);
+}
+
+static u64 iproc_cmicx_schan_reg64_read(struct iproc_cmic *cmic,
+						u32 blk_type, u32 addr)
+{
+	u32 cmd, block;
+	u64 val;
+
+	if (!cmic || !cmic->base) {
+		return -EINVAL;
+	}
+
+	if (blk_type == CMIC_BLOCK_TYPE_TOP) {
+		block = CMICX_BLOCK_ID_TOP;
+	} else if (blk_type == CMIC_BLOCK_TYPE_APM) {
+		block = CMICX_BLOCK_ID_XLPORT7;	} else {
+		return -EINVAL;
+	}
+
+	cmd = CMICX_CMD(READ_REGISTER_CMD_MSG, block, REG64_DATA_LEN);
+	__cmicx_schan_read(cmic, cmd, addr, (u32 *)&val, 2);
+	return val;
+}
+
+static int iproc_cmicx_schan_ucmem_write(struct iproc_cmic *cmic,
+						u32 blk_type, u32 *mem)
+{
+	u32 cmd, block;
+
+	if (!cmic || !cmic->base) {
+		return -EINVAL;
+	}
+
+	if (blk_type == CMIC_BLOCK_TYPE_TOP) {
+		block = CMICX_BLOCK_ID_TOP;
+	} else if (blk_type == CMIC_BLOCK_TYPE_APM) {
+		block = CMICX_BLOCK_ID_XLPORT7;	} else {
+		return -EINVAL;
+	}
+
+	cmd = CMICX_CMD(WRITE_MEMORY_CMD_MSG, block, UCMEM_DATA_LEN);
+	return __cmicx_schan_write(cmic, cmd, CMICX_XLPORT_WC_UCMEM_DATA, mem, 4);
+}
+
+static int iproc_cmicx_schan_ucmem_read(struct iproc_cmic *cmic,
+						u32 blk_type, u32 *mem)
+{
+	u32 cmd, block;
+
+	if (!cmic || !cmic->base) {
+		return -EINVAL;
+	}
+
+	if (blk_type == CMIC_BLOCK_TYPE_TOP) {
+		block = CMICX_BLOCK_ID_TOP;
+	} else if (blk_type == CMIC_BLOCK_TYPE_APM) {
+		block = CMICX_BLOCK_ID_XLPORT7;	} else {
+		return -EINVAL;
+	}
+
+	cmd = CMICX_CMD(READ_MEMORY_CMD_MSG, block, UCMEM_DATA_LEN);
+	return __cmicx_schan_read(cmic, cmd, CMICX_XLPORT_WC_UCMEM_DATA, mem, 2);
+}
+
+static int iproc_cmicx_init(struct iproc_cmic *cmic)
+{
+	if (!cmic || !cmic->base) {
+		return -EINVAL;
+	}
+
+	/*
+	 * SBUS ring and block number:
+	 * ring 5: TOP(7)
+	 * ring 7: XLPORT7(38)
+	 */
+	writel(0x52222100, CMICX_TOP_SBUS_RING_MAP_0_7(cmic->base));
+	writel(0x07500066, CMICX_TOP_SBUS_RING_MAP_32_39(cmic->base));
+	writel(0x5000, CMICX_TOP_SBUS_TIMEOUT(cmic->base));
+
+	return 0;
+}
+
+const struct sbus_ops cmicx_sbus_ops = {
+	.init			= iproc_cmicx_init,
+	.reg32_write	= iproc_cmicx_schan_reg32_write,
+	.reg32_read		= iproc_cmicx_schan_reg32_read,
+	.reg64_write	= iproc_cmicx_schan_reg64_write,
+	.reg64_read		= iproc_cmicx_schan_reg64_read,
+	.ucmem_write	= iproc_cmicx_schan_ucmem_write,
+	.ucmem_read		= iproc_cmicx_schan_ucmem_read,
+};
diff --git a/drivers/soc/bcm/xgs_iproc/xgs-iproc-idm.c b/drivers/soc/bcm/xgs_iproc/xgs-iproc-idm.c
new file mode 100644
index 000000000000..ea4e2bb80aeb
--- /dev/null
+++ b/drivers/soc/bcm/xgs_iproc/xgs-iproc-idm.c
@@ -0,0 +1,309 @@
+/*
+ * Copyright (C) 2016 Broadcom Corporation
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/interrupt.h>
+#include <linux/irqchip/arm-gic.h>
+#include <linux/irq.h>
+#include <asm/io.h>
+#include <linux/of.h>
+#include <linux/of_irq.h>
+#include <linux/of_address.h>
+#include <linux/of_device.h>
+
+
+#define IPROC_IDM_COMPATIBLE "brcm,iproc-idm"
+
+#define IDM_ERROR_LOG_ENABLE			0x33A
+#define IDM_ERROR_LOG_CLEAR			0x3
+
+#define IDM_ERROR_LOG_CONTROL_REG(base) 	(base + 0x900)
+#define IDM_ERROR_LOG_COMPLETE_REG(base)	(base + 0x904)
+#define IDM_ERROR_LOG_STATUS_REG(base)		(base + 0x908)
+#define IDM_ERROR_LOG_ADDR_LSB_REG(base)	(base + 0x90c)
+#define IDM_ERROR_LOG_ID_REG(base)		(base + 0x914)
+#define IDM_ERROR_LOG_FLAGS_REG(base)		(base + 0x91c)
+#define IDM_INTERRUPT_STATUS_REG(base)		(base + 0xa00)
+
+enum support_dev_ids {
+	XGS_IPROC_HX4 = 0,
+	XGS_IPROC_KT2,
+	XGS_IPROC_HR2,
+	XGS_IPROC_GH,
+	XGS_IPROC_SB2,
+	XGS_IPROC_HR3,
+	XGS_IPROC_GH2,
+	XGS_IPROC_WH2,
+	XGS_IPROC_HX5,
+	XGS_IPROC_MAX_DEVS,
+};
+
+static struct xgs_iproc_dev_infos_s {
+	char dt_compat_str[32];
+	u32 dev_id;
+	u32 dmac_reset_offset;
+} xgs_iproc_dev_infos[] = {
+	{ "brcm,helix4", XGS_IPROC_HX4, 0x14800 },
+	{ "brcm,katana2", XGS_IPROC_KT2, 0x14800 },
+	{ "brcm,hurricane2", XGS_IPROC_HR2, 0x14800 },
+	{ "brcm,greyhound", XGS_IPROC_GH, 0x14800 },
+	{ "brcm,saber2", XGS_IPROC_SB2, 0xf800 },
+	{ "brcm,hurricane3", XGS_IPROC_HR3, 0xf800 },
+	{ "brcm,greyhound2", XGS_IPROC_GH2, 0xf800 },
+	{ "brcm,wolfhound2", XGS_IPROC_WH2, 0xf800 },
+	{ "brcm,helix5", XGS_IPROC_HX5, 0x10800 },
+	{ "", 0, 0 }
+};
+
+#define IDM_BASE_ADDR_NUM		2
+#define IDM_BASE_ADDR_MASK		0x10000000
+#define IDM_BASE_ADDR_AREA(val) 	((val & IDM_BASE_ADDR_MASK) >> 28)
+#define IDM_OFFSET_MASK 		0x0FFFFFFF
+
+static struct xgs_iproc_idm_err_offset_s {
+	u32 ihost_s1[XGS_IPROC_MAX_DEVS];
+	u32 ihost_s0[XGS_IPROC_MAX_DEVS];
+	u32 axi_pcie_s0[XGS_IPROC_MAX_DEVS];
+	u32 ddr_s1[XGS_IPROC_MAX_DEVS];
+	u32 ddr_s2[XGS_IPROC_MAX_DEVS];
+	u32 cmic_s0[XGS_IPROC_MAX_DEVS];
+	u32 apby_s0[XGS_IPROC_MAX_DEVS];
+	u32 rom_s0[XGS_IPROC_MAX_DEVS];
+	u32 nand_idm[XGS_IPROC_MAX_DEVS];
+	u32 qspi_idm[XGS_IPROC_MAX_DEVS];
+	u32 a9jtag_s0[XGS_IPROC_MAX_DEVS];
+	u32 sram_s0[XGS_IPROC_MAX_DEVS];
+	u32 apbz_s0[XGS_IPROC_MAX_DEVS];
+	u32 axiic_ds_3[XGS_IPROC_MAX_DEVS];
+	u32 apbw_idm[XGS_IPROC_MAX_DEVS];
+	u32 apbx_idm[XGS_IPROC_MAX_DEVS];
+	u32 axiic_ds_0[XGS_IPROC_MAX_DEVS];
+	u32 periph_s0[XGS_IPROC_MAX_DEVS];
+	u32 genres_s0[XGS_IPROC_MAX_DEVS];
+} xgs_iproc_idm_err_offset = {
+	/*       HX4,        KT2,        HR2,         GH,        SB2,        HR3,
+	         GH2,        WH2,        HX5 */
+	{ 0x00007000, 0x00007000, 0x00007000, 0x00006000, 0x00006000, 0x00006000,
+	  0x00006000, 0x00006000,        0x0 },	/* IHOST_S1_IDM */
+	{ 0x00008000, 0x00008000, 0x00008000, 0x00007000, 0x00007000, 0x00007000,
+	  0x00007000, 0x00007000, 0x00014000 },	/* IHOST_S0_IDM */
+	{ 0x0000b000, 0x0000b000, 0x0000b000, 0x00008000, 0x00008000, 0x00008000,
+	  0x00008000, 0x00008000, 0x0000a000 },	/* AXI_PCIE_S0_IDM */
+	{ 0x00009000, 0x00009000, 0x00009000, 0x10002000, 0x10002000, 0x00004000,
+	  0x10002000, 0x00004000, 0x0001a000 },	/* DDR_S1_IDM */
+	{ 0x0000a000, 0x0000a000, 0x0000a000, 0x10003000, 0x10003000, 0x00005000,
+	  0x10003000, 0x00005000, 0x0001b000 },	/* DDR_S2_IDM */
+	{ 0x0000d000, 0x0000d000, 0x0000d000, 0x0000a000, 0x0000a000, 0x0000a000,
+	  0x0000a000, 0x0000a000, 0x0000b000 },	/* CMICD_S0_IDM */
+	{ 0x0000f000, 0x0000f000, 0x0000f000,        0x0,        0x0,        0x0,
+	         0x0,        0x0, 0x0000c000 },	/* APBY_S0_IDM */
+	{ 0x0001a000, 0x0001a000, 0x0001a000, 0x10004000, 0x10004000, 0x0001a000,
+	  0x10004000, 0x0001a000,        0x0 },	/* ROM_S0_IDM */
+	{ 0x0001b000, 0x0001b000, 0x0001b000, 0x10005000, 0x10005000, 0x0001d000,
+	  0x10005000, 0x0001d000,        0x0 },	/* NAND_IDM */
+	{ 0x0001c000, 0x0001c000, 0x0001c000, 0x10006000, 0x10006000, 0x0001f000,
+	  0x10006000, 0x0001f000,        0x0 },	/* QSPI_IDM */
+	{ 0x0001d000, 0x0001d000, 0x0001d000, 0x00019000, 0x00019000, 0x00019000,
+	  0x00019000, 0x00019000,        0x0 },	/* A9JTAG_S0_IDM */
+	{ 0x00020000, 0x00020000, 0x00020000, 0x0001b000, 0x0001b000,        0x0,
+	  0x0001b000,        0x0,        0x0 },	/* SRAM_S0_IDM */
+	{ 0x00021000, 0x00021000, 0x00021000,        0x0,        0x0,        0x0,
+	         0x0,        0x0, 0x00017000 },	/* APBZ_S0_IDM */
+	{ 0x00023000, 0x00023000, 0x00023000, 0x0001e000, 0x0001e000,        0x0,
+	  0x0001e000,        0x0,        0x0 },	/* AXIIC_DS_3_IDM */
+	{ 0x00031000, 0x00031000, 0x00031000,        0x0,        0x0,        0x0,
+	         0x0,        0x0,        0x0 },	/* APBW_IDM */
+	{ 0x00032000, 0x00032000, 0x00032000, 0x00030000, 0x00030000, 0x00030000,
+	  0x00030000, 0x00030000,        0x0 },	/* APBX_IDM */
+	{ 0x00041000, 0x00041000, 0x00041000, 0x00020000, 0x00020000, 0x00020000,
+	  0x00020000, 0x00020000, 0x00053000 },	/* AXIIC_DS_0_IDM */
+	{        0x0,        0x0,        0x0,        0x0,        0x0,        0x0,
+	         0x0,        0x0, 0x00018000 },	/* PERIPH_S0_IDM */
+	{        0x0,        0x0,        0x0,        0x0,        0x0,        0x0,
+	         0x0,        0x0, 0x00019000 },	/* GENRES_S0_IDM */
+};
+
+struct xgs_iproc_idm {
+	u32 curr_dev;
+	void __iomem *idm_base[IDM_BASE_ADDR_NUM];
+	u32 dmac_reset_offset;
+};
+
+static struct xgs_iproc_idm xgs_iproc_idm = { 0 };
+
+/**********************************************************************************
+***********************************************************************************/
+void inline __iomem *get_iproc_idm_base(int idx)
+{
+	if (idx >= IDM_BASE_ADDR_NUM)
+		return NULL;
+
+	return xgs_iproc_idm.idm_base[idx];
+}
+
+int xgs_iproc_idm_dmac_reset(void)
+{
+	void __iomem *reset_base = NULL;
+
+	if (xgs_iproc_idm.idm_base[0] == NULL ||
+		xgs_iproc_idm.dmac_reset_offset == 0) {
+		return -EINVAL;
+	}
+
+	reset_base = xgs_iproc_idm.idm_base[0] + xgs_iproc_idm.dmac_reset_offset;
+	writel(readl(reset_base) & ~0x1, reset_base);
+
+	return 0;
+}
+
+static int idm_error_log_dump(void __iomem *idm_addr)
+{
+	void __iomem *reg_addr;
+	u32 val;
+
+	reg_addr = (void __iomem *)IDM_ERROR_LOG_STATUS_REG(idm_addr);
+	if ((val = readl(reg_addr)) > 0) {
+		printk(KERN_DEBUG "%s: %d, %d\n", __func__, __LINE__, val);
+
+		reg_addr = (void __iomem *)IDM_ERROR_LOG_ADDR_LSB_REG(idm_addr);
+		val = readl(reg_addr);
+		printk(KERN_DEBUG "%s: %d, %08x\n", __func__, __LINE__, val);
+
+		reg_addr = (void __iomem *)IDM_ERROR_LOG_ID_REG(idm_addr);
+		val = readl(reg_addr);
+		printk(KERN_DEBUG "%s: %d, %08x\n", __func__, __LINE__, val);
+
+		reg_addr = (void __iomem *)IDM_ERROR_LOG_FLAGS_REG(idm_addr);
+		val = readl(reg_addr);
+		printk(KERN_DEBUG "%s: %d, %08x\n", __func__, __LINE__, val);
+
+		reg_addr = (void __iomem *)IDM_ERROR_LOG_COMPLETE_REG(idm_addr);
+		writel(IDM_ERROR_LOG_CLEAR, reg_addr);
+
+		reg_addr = (void __iomem *)IDM_ERROR_LOG_STATUS_REG(idm_addr);
+		val = readl(reg_addr);
+		printk(KERN_DEBUG "%s: %d, %d\n", __func__, __LINE__, val);
+	}
+
+	return 0;
+}
+
+static irqreturn_t idm_timeout_handler(int val, void *ptr)
+{
+	u32 idx, offset;
+	void __iomem *idm_addr;
+	u32 i, cnt, *idm_item;
+
+	if (xgs_iproc_idm.curr_dev == XGS_IPROC_MAX_DEVS)
+		return IRQ_HANDLED;
+
+	cnt = sizeof(struct xgs_iproc_idm_err_offset_s) / (sizeof(u32) * XGS_IPROC_MAX_DEVS);
+	for (i = 0; i < cnt; i++) {
+		idm_item = (u32*)((u32*)(&xgs_iproc_idm_err_offset) + i * XGS_IPROC_MAX_DEVS);
+		offset = idm_item[xgs_iproc_idm.curr_dev];
+		if (offset != 0) {
+			idx = IDM_BASE_ADDR_AREA(offset);
+			if (xgs_iproc_idm.idm_base[idx]) {
+				idm_addr = xgs_iproc_idm.idm_base[idx] + (offset & IDM_OFFSET_MASK);
+				idm_error_log_dump(idm_addr);
+			}
+		}
+	}
+
+	return IRQ_HANDLED;
+}
+
+static int init_request_idm_timeout(void)
+{
+	void __iomem *idm_addr;
+	void __iomem *reg_addr;
+	u32 i, cnt, *idm_item;
+	u32 idx, offset;
+
+	if (xgs_iproc_idm.curr_dev == XGS_IPROC_MAX_DEVS)
+		return IRQ_HANDLED;
+
+	/* clear all pending idm interrupts */
+	idm_timeout_handler(0, NULL);
+
+	/* enable idm error log for all slaves */
+	cnt = sizeof(struct xgs_iproc_idm_err_offset_s) / (sizeof(u32) * XGS_IPROC_MAX_DEVS);
+	for (i = 0; i < cnt; i++) {
+		idm_item = (u32*)((u32*)(&xgs_iproc_idm_err_offset) + i * XGS_IPROC_MAX_DEVS);
+		offset = idm_item[xgs_iproc_idm.curr_dev];
+		if (offset != 0) {
+			idx = IDM_BASE_ADDR_AREA(offset);
+			if (xgs_iproc_idm.idm_base[idx]) {
+				idm_addr = xgs_iproc_idm.idm_base[idx] + (offset & IDM_OFFSET_MASK);
+				reg_addr = (void __iomem *)IDM_ERROR_LOG_CONTROL_REG(idm_addr);
+				writel(IDM_ERROR_LOG_ENABLE, reg_addr);
+			}
+		}
+	}
+
+	return 0;
+}
+
+int xgs_iproc_idm_init(void)
+{
+	struct device_node *np;
+	int idx, ret = 0;
+	int irq, irqs_total;
+
+	/* Get IDM base addr */
+	np = of_find_compatible_node(NULL, NULL, IPROC_IDM_COMPATIBLE);
+	if (!np) {
+		pr_err("%s: No IDM node found\n", __func__);
+		return -ENODEV;
+	}
+
+	xgs_iproc_idm.idm_base[0] = of_iomap(np, 0);
+	if (!xgs_iproc_idm.idm_base[0]) {
+		return -ENOMEM;
+	}
+
+	/*
+	 * Second IDM base addr required for GH/SB2/GH2 IDM timeout handling.
+	 * For other devices, the second IDM base addr is not used. So, it is
+	 * fine even the addr is NULL.
+	 */
+	xgs_iproc_idm.idm_base[1] = of_iomap(np, 1);
+
+	/* Get the current platform */
+	idx = 0;
+	while(1) {
+		if (strlen(xgs_iproc_dev_infos[idx].dt_compat_str) == 0)
+			return -EINVAL;
+		if (of_machine_is_compatible(xgs_iproc_dev_infos[idx].dt_compat_str))
+			break;
+		idx++;
+	}
+	xgs_iproc_idm.curr_dev = xgs_iproc_dev_infos[idx].dev_id;
+	xgs_iproc_idm.dmac_reset_offset = xgs_iproc_dev_infos[idx].dmac_reset_offset;
+
+	/* Setup idm timeout handler for debug purpose */
+	init_request_idm_timeout();
+
+	irqs_total = of_irq_count(np);
+	if (!irqs_total)
+		return -EINVAL;
+
+	for (idx = 0; idx < irqs_total; idx++) {
+		irq = of_irq_get(np, idx);
+		ret = request_irq(irq, (irq_handler_t)idm_timeout_handler,
+				  IRQF_PERCPU, "IDM", NULL);
+		if (ret != 0)
+			printk(KERN_WARNING "%s: request_irq return = %d\n", __func__, ret);
+	}
+
+	return ret;
+}
diff --git a/drivers/soc/bcm/xgs_iproc/xgs-iproc-misc-setup.c b/drivers/soc/bcm/xgs_iproc/xgs-iproc-misc-setup.c
new file mode 100644
index 000000000000..1fee0241ee0a
--- /dev/null
+++ b/drivers/soc/bcm/xgs_iproc/xgs-iproc-misc-setup.c
@@ -0,0 +1,88 @@
+/*
+ * Copyright (C) 2016 Broadcom Corporation
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/io.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/of_platform.h>
+
+#define IPROC_DMU_PCU_COMPATIBLE "brcm,iproc-dmu-pcu"
+#define IPROC_WRAP_CTRL_COMPATIBLE "brcm,iproc-wrap-ctrl"
+#define KT2_WRAP_MISC_COMPATIBLE "brcm,kt2-wrap-misc"
+
+static void __iomem *iproc_dmu_pcu_base = NULL;
+static void __iomem *iproc_wrap_ctrl_base = NULL;
+
+extern void request_idm_timeout_interrupts(struct platform_device *);
+
+void inline  __iomem *get_iproc_dmu_pcu_base(void)
+{
+	return iproc_dmu_pcu_base;
+}
+
+void inline __iomem *get_iproc_wrap_ctrl_base(void)
+{
+	return iproc_wrap_ctrl_base;
+}
+
+int inline is_wh2_amac_sgmii(void)
+{
+	return readl(get_iproc_wrap_ctrl_base() + 0xa8) & 0x04;
+}
+
+int xgs_iproc_misc_setup(void)
+{
+	struct device_node *np;
+	void __iomem *wrap_misc_reg = NULL;
+	u32 tmp;
+	u32 wrap_misc_offset, serdes_ctrl_sel, serdes_mdio_sel;
+
+	/* Get DMU/PCU base addr */
+	np = of_find_compatible_node(NULL, NULL, IPROC_DMU_PCU_COMPATIBLE);
+	if (!np) {
+		pr_err("%s: No dmu/pcu node found\n", __func__);
+		return -ENODEV ;
+	}
+
+	iproc_dmu_pcu_base = of_iomap(np, 0);
+	if (!iproc_dmu_pcu_base)
+		return -ENOMEM;
+
+	/* Get WRAP CTRL base addr */
+	np = of_find_compatible_node(NULL, NULL, IPROC_WRAP_CTRL_COMPATIBLE);
+	if (!np) {
+		pr_err("%s: No wrap ctrl node found\n", __func__);
+		return -ENODEV;
+	}
+
+	iproc_wrap_ctrl_base = of_iomap(np, 0);
+	if (!iproc_wrap_ctrl_base)
+		return -ENOMEM;
+
+	/* Enable AMAC SERDES MDIO SEL/CTRL for HX4/KT2 */
+	if (!of_property_read_u32_index(np, "amac-serdes-mdio-ctrl-sel", 0,
+		&wrap_misc_offset)) {
+		of_property_read_u32_index(np, "amac-serdes-mdio-ctrl-sel", 1,
+					&serdes_ctrl_sel);
+		of_property_read_u32_index(np, "amac-serdes-mdio-ctrl-sel", 2,
+					&serdes_mdio_sel);
+
+		wrap_misc_reg = (void __iomem *)(iproc_wrap_ctrl_base +
+						wrap_misc_offset);
+		tmp = readl(wrap_misc_reg);
+		tmp |= (1 << serdes_ctrl_sel) | (1 << serdes_mdio_sel);
+		writel(tmp, wrap_misc_reg);
+	}
+
+	return 1;
+}
diff --git a/drivers/soc/bcm/xgs_iproc/xgs-iproc.c b/drivers/soc/bcm/xgs_iproc/xgs-iproc.c
new file mode 100644
index 000000000000..fdce5f3aca16
--- /dev/null
+++ b/drivers/soc/bcm/xgs_iproc/xgs-iproc.c
@@ -0,0 +1,104 @@
+/*
+ * Copyright (C) 2016 Broadcom
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+/* Currently, this driver is only support for Helix5. As for the other
+ * XGS IProc chips, the initial code and reset handler are defined in
+ * mach-iproc/board_bu.c
+ */
+
+#include <asm/proc-fns.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/of_device.h>
+#include <linux/notifier.h>
+#include <linux/reboot.h>
+#include <linux/soc/bcm/xgs-iproc-misc-setup.h>
+#include <linux/soc/bcm/xgs-iproc-idm.h>
+
+
+#define DMU_CRU_RESET_OFFSET		0x200
+
+static int xgs_iproc_restart(struct notifier_block *nb,
+							unsigned long action, void *data)
+{
+	void * __iomem reg_addr;
+	u32 val;
+
+	/* CRU_RESET register */
+	reg_addr = get_iproc_dmu_pcu_base() + DMU_CRU_RESET_OFFSET;
+
+	/* set iproc_reset_n to 0 */
+	val = readl(reg_addr);
+	val &= ~((u32) 1 << 1);
+
+	writel(val, reg_addr);
+
+	/* Wait for reset */
+	while (1) {
+		cpu_do_idle();
+	}
+
+	return 0;
+}
+
+static struct notifier_block xgs_iproc_nb = {
+	.notifier_call  = xgs_iproc_restart,
+	.priority       = 192,
+};
+
+static char * xgs_iproc_dt_compat_str[] = {
+	"brcm,helix5",
+	"",
+};
+
+static int __init xgs_iproc_init(void)
+{
+	int ret;
+	int idx = 0;
+
+	while(1) {
+		if (strlen(xgs_iproc_dt_compat_str[idx]) == 0) {
+			return -EINVAL;
+		}
+		if (of_machine_is_compatible(xgs_iproc_dt_compat_str[idx])) {
+			break;
+		}
+		idx++;
+	}
+
+	ret = xgs_iproc_misc_setup();
+	if (ret < 0) {
+		return ret;
+	}
+
+	/* Init idm and setup idm timeout handler for debug purpose */
+	/* xgs_iproc_idm_init should be init before reset dmac */
+	ret = xgs_iproc_idm_init();
+	if (ret < 0) {
+		return ret;
+	}
+
+	/* FIXME, need confirm whether we need reset the DMAC or not */
+	xgs_iproc_idm_dmac_reset();
+
+	/* Populate platform devices */
+	of_platform_populate(NULL, of_default_bus_match_table, NULL, NULL);
+
+	if (register_reboot_notifier(&xgs_iproc_nb)) {
+		printk("Register reboot handler failed\n");
+	}
+
+	return 0;
+}
+arch_initcall(xgs_iproc_init);
+
diff --git a/include/linux/soc/bcm/iproc-cmic.h b/include/linux/soc/bcm/iproc-cmic.h
new file mode 100644
index 000000000000..59a4f7277238
--- /dev/null
+++ b/include/linux/soc/bcm/iproc-cmic.h
@@ -0,0 +1,34 @@
+#ifndef _IPROC_CMIC_H
+#define _IPROC_CMIC_H
+
+struct iproc_cmic {
+	void __iomem *base;
+	struct device *dev;
+
+	const struct sbus_ops *sbus_ops;
+};
+
+struct sbus_ops {
+	int (*init)(struct iproc_cmic *cmic);
+	int	(*reg32_write)(struct iproc_cmic *cmic, u32 block, u32 addr, u32 val);
+	u32	(*reg32_read)(struct iproc_cmic *cmic, u32 block, u32 addr);
+	int	(*reg64_write)(struct iproc_cmic *cmic, u32 block, u32 addr, u64 val);
+	u64	(*reg64_read)(struct iproc_cmic *cmic, u32 block, u32 addr);
+	int	(*ucmem_write)(struct iproc_cmic *cmic, u32 block, u32 *mem);
+	int (*ucmem_read)(struct iproc_cmic *cmic, u32 block, u32 *mem);
+};
+
+enum cmic_block_type {
+	CMIC_BLOCK_TYPE_TOP = 0,
+	CMIC_BLOCK_TYPE_APM = 1,
+};
+
+extern int iproc_cmic_schan_reg32_write(u32 blk_type, u32 addr, u32 val);
+extern u32 iproc_cmic_schan_reg32_read(u32 blk_type, u32 addr);
+extern int iproc_cmic_schan_reg64_write(u32 blk_type, u32 addr, u64 val);
+extern u64 iproc_cmic_schan_reg64_read(u32 blk_type, u32 addr);
+extern int iproc_cmic_schan_ucmem_write(u32 blk_type, u32 *mem);
+extern int iproc_cmic_schan_ucmem_read(u32 blk_type, u32 *mem);
+extern void inline __iomem *iproc_cmic_base_get(void);
+
+#endif /* _IPROC_CMIC_H */
diff --git a/include/linux/soc/bcm/xgs-iproc-idm.h b/include/linux/soc/bcm/xgs-iproc-idm.h
new file mode 100644
index 000000000000..5c8726d9693a
--- /dev/null
+++ b/include/linux/soc/bcm/xgs-iproc-idm.h
@@ -0,0 +1,21 @@
+/*
+ * Copyright (C) 2016 Broadcom Corporation
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef XGS_IPROC_IDM_H
+#define XGS_IPROC_IDM_H
+
+extern void inline __iomem *get_iproc_idm_base(int idx);
+extern int xgs_iproc_idm_dmac_reset(void);
+extern int xgs_iproc_idm_init(void);
+
+#endif /* XGS_IPROC_IDM_H */
diff --git a/include/linux/soc/bcm/xgs-iproc-misc-setup.h b/include/linux/soc/bcm/xgs-iproc-misc-setup.h
new file mode 100644
index 000000000000..7d38a51c2221
--- /dev/null
+++ b/include/linux/soc/bcm/xgs-iproc-misc-setup.h
@@ -0,0 +1,22 @@
+/*
+ * Copyright (C) 2016 Broadcom Corporation
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef XGS_IPROC_MISC_SETUP_H
+#define XGS_IPROC_MISC_SETUP_H
+
+extern int xgs_iproc_misc_setup(void);
+extern void __iomem *get_iproc_wrap_ctrl_base(void);
+extern void __iomem *get_iproc_dmu_pcu_base(void);
+extern int is_wh2_amac_sgmii(void);
+
+#endif /* XGS_IPROC_MISC_SETUP_H */
-- 
2.33.0

