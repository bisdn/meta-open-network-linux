From 95661a0d9c3e867c08d6c0aea9b57c9e38621f4a Mon Sep 17 00:00:00 2001
From: Jostar Yang <jostar_yang@accton.com.tw>
Date: Mon, 8 Nov 2021 17:28:38 +0800
Subject: [PATCH 1/3] [as4630-54pe] Add SFP reset sysfs and fix Led drv

Signed-off-by: Jostar Yang <jostar_yang@accton.com.tw>
---
 .../builds/x86-64-accton-as4630-54pe-cpld.c   | 125 ++++++++++++------
 .../builds/x86-64-accton-as4630-54pe-leds.c   |  26 ++--
 2 files changed, 98 insertions(+), 53 deletions(-)

diff --git a/packages/platforms/accton/x86-64/as4630-54pe/modules/builds/x86-64-accton-as4630-54pe-cpld.c b/packages/platforms/accton/x86-64/as4630-54pe/modules/builds/x86-64-accton-as4630-54pe-cpld.c
index b4618dc4..3aba8a50 100755
--- a/packages/platforms/accton/x86-64/as4630-54pe/modules/builds/x86-64-accton-as4630-54pe-cpld.c
+++ b/packages/platforms/accton/x86-64/as4630-54pe/modules/builds/x86-64-accton-as4630-54pe-cpld.c
@@ -86,7 +86,9 @@ static const struct i2c_device_id as4630_54pe_cpld_id[] = {
 };
 MODULE_DEVICE_TABLE(i2c, as4630_54pe_cpld_id);
 
-#define TRANSCEIVER_PRESENT_ATTR_ID(index)   	MODULE_PRESENT_##index
+#define TRANSCEIVER_RESET_ATTR_ID(index)        MODULE_RESET_##index
+#define TRANSCEIVER_LPMODE_ATTR_ID(index)       MODULE_LPMODE_##index
+#define TRANSCEIVER_PRESENT_ATTR_ID(index)      MODULE_PRESENT_##index
 #define TRANSCEIVER_TXDISABLE_ATTR_ID(index)   	MODULE_TXDISABLE_##index
 #define TRANSCEIVER_RXLOS_ATTR_ID(index)   		MODULE_RXLOS_##index
 #define TRANSCEIVER_TXFAULT_ATTR_ID(index)   	MODULE_TXFAULT_##index
@@ -99,7 +101,6 @@ enum as4630_54pe_cpld_sysfs_attributes {
 	CPLD_VERSION,
 	ACCESS,
 	/* transceiver attributes */
-	PSU_POWER_GOOD,
 	TRANSCEIVER_RXLOS_ATTR_ID(49),
 	TRANSCEIVER_RXLOS_ATTR_ID(50),
 	TRANSCEIVER_RXLOS_ATTR_ID(51),
@@ -114,6 +115,10 @@ enum as4630_54pe_cpld_sysfs_attributes {
 	TRANSCEIVER_PRESENT_ATTR_ID(52),
 	TRANSCEIVER_PRESENT_ATTR_ID(53),
 	TRANSCEIVER_PRESENT_ATTR_ID(54),
+	TRANSCEIVER_RESET_ATTR_ID(53),
+	TRANSCEIVER_RESET_ATTR_ID(54),
+	TRANSCEIVER_LPMODE_ATTR_ID(53),
+	TRANSCEIVER_LPMODE_ATTR_ID(54),
 	TRANSCEIVER_TXDISABLE_ATTR_ID(49),
 	TRANSCEIVER_TXDISABLE_ATTR_ID(50),
 	TRANSCEIVER_TXDISABLE_ATTR_ID(51),
@@ -139,6 +144,8 @@ static ssize_t show_status(struct device *dev, struct device_attribute *da,
              char *buf);
 static ssize_t set_tx_disable(struct device *dev, struct device_attribute *da,
 			const char *buf, size_t count);
+static ssize_t set_qsfp(struct device *dev, struct device_attribute *da,
+                        const char *buf, size_t count);
 static ssize_t access(struct device *dev, struct device_attribute *da,
 			const char *buf, size_t count);
 static ssize_t show_version(struct device *dev, struct device_attribute *da,
@@ -152,11 +159,6 @@ static ssize_t fan_show_value(struct device *dev, struct device_attribute *da, c
 static ssize_t set_duty_cycle(struct device *dev, struct device_attribute *da,
                               const char *buf, size_t count);
 
-static ssize_t show_power(struct device *dev, struct device_attribute *da,
-             char *buf);
-
-
-
 /* transceiver attributes */
 #define DECLARE_SFP_TRANSCEIVER_SENSOR_DEVICE_ATTR(index) \
     static SENSOR_DEVICE_ATTR(module_present_##index, S_IRUGO, show_status, NULL, MODULE_PRESENT_##index); \
@@ -171,9 +173,13 @@ static ssize_t show_power(struct device *dev, struct device_attribute *da,
 	&sensor_dev_attr_module_tx_fault_##index.dev_attr.attr
 	
 #define DECLARE_QSFP_TRANSCEIVER_SENSOR_DEVICE_ATTR(index) \
+    static SENSOR_DEVICE_ATTR(module_lpmode_##index, S_IRUGO | S_IWUSR, show_status, set_qsfp, MODULE_LPMODE_##index); \
+    static SENSOR_DEVICE_ATTR(module_reset_##index, S_IRUGO | S_IWUSR, show_status, set_qsfp, MODULE_RESET_##index); \
     static SENSOR_DEVICE_ATTR(module_present_##index, S_IRUGO, show_status, NULL, MODULE_PRESENT_##index);
 
 #define DECLARE_QSFP_TRANSCEIVER_ATTR(index)  \
+    &sensor_dev_attr_module_lpmode_##index.dev_attr.attr, \
+    &sensor_dev_attr_module_reset_##index.dev_attr.attr, \
     &sensor_dev_attr_module_present_##index.dev_attr.attr
 
 
@@ -193,8 +199,6 @@ static ssize_t show_power(struct device *dev, struct device_attribute *da,
     static SENSOR_DEVICE_ATTR(fan_duty_cycle_percentage, S_IWUSR | S_IRUGO, fan_show_value, set_duty_cycle, FAN_DUTY_CYCLE_PERCENTAGE);
 #define DECLARE_FAN_DUTY_CYCLE_ATTR(index) &sensor_dev_attr_fan_duty_cycle_percentage.dev_attr.attr
 
-                                           
-static SENSOR_DEVICE_ATTR(psu_power_good, S_IRUGO, show_power,    NULL, PSU_POWER_GOOD);	
 
 static SENSOR_DEVICE_ATTR(version, S_IRUGO, show_version, NULL, CPLD_VERSION);
 static SENSOR_DEVICE_ATTR(access, S_IWUSR, NULL, access, ACCESS);
@@ -217,7 +221,6 @@ DECLARE_FAN_DUTY_CYCLE_SENSOR_DEV_ATTR(1);
 static struct attribute *as4630_54pe_cpld_attributes[] = {
     &sensor_dev_attr_version.dev_attr.attr,
     &sensor_dev_attr_access.dev_attr.attr,
-    &sensor_dev_attr_psu_power_good.dev_attr.attr,
 	DECLARE_SFP_TRANSCEIVER_ATTR(49),
 	DECLARE_SFP_TRANSCEIVER_ATTR(50),
 	DECLARE_SFP_TRANSCEIVER_ATTR(51),
@@ -284,8 +287,18 @@ static ssize_t show_status(struct device *dev, struct device_attribute *da,
             reg=0x21;
             mask=0x1 << (attr->index==MODULE_PRESENT_53?0:4);
             break;
-	default:
-	    return 0;
+        case MODULE_RESET_53 ... MODULE_RESET_54:
+            reg=0x21;
+            mask=0x1 << (attr->index==MODULE_RESET_53?3:7);
+            revert = 1;
+            break;
+        case MODULE_LPMODE_53 ... MODULE_LPMODE_54:
+            reg = 0x21;
+            mask = 0x1 << (attr->index==MODULE_LPMODE_53?2:6);
+            revert = 0;
+            break;
+	    default:
+		    return 0;
     }
 
     if( attr->index >= MODULE_PRESENT_49 && attr->index <= MODULE_PRESENT_54 )        
@@ -307,6 +320,61 @@ exit:
 	return status;
 }
 
+static ssize_t set_qsfp(struct device *dev, struct device_attribute *da,
+                        const char *buf, size_t count)
+{
+    struct sensor_device_attribute *attr = to_sensor_dev_attr(da);
+    struct i2c_client *client = to_i2c_client(dev);
+    struct as4630_54pe_cpld_data *data = i2c_get_clientdata(client);
+    long disable;
+    int status;
+    u8 reg = 0, mask = 0, revert = 0;
+
+    status = kstrtol(buf, 10, &disable);
+    if (status) {
+        return status;
+    }
+    reg  = 0x21;
+    switch (attr->index)
+    {
+    case MODULE_RESET_53 ... MODULE_RESET_54:
+        mask=0x1 << (attr->index==MODULE_RESET_53?3:7);
+        revert = 1;
+        break;
+    case MODULE_LPMODE_53 ... MODULE_LPMODE_54:
+        mask=0x1 << (attr->index==MODULE_LPMODE_53?2:6);
+        revert = 0;
+        break;
+    default:
+        return 0;
+    }
+
+    disable = revert ? disable : !disable;
+    /* Read current status */
+    mutex_lock(&data->update_lock);
+    status = as4630_54pe_cpld_read_internal(client, reg);
+    if (unlikely(status < 0)) {
+        goto exit;
+    }
+    if (disable) {
+        status &= ~mask;
+    }
+    else {
+        status |= mask;
+    }
+    status = as4630_54pe_cpld_write_internal(client, reg, status);
+    if (unlikely(status < 0)) {
+        goto exit;
+    }
+
+    mutex_unlock(&data->update_lock);
+    return count;
+
+exit:
+    mutex_unlock(&data->update_lock);
+    return status;
+}
+
 static ssize_t set_tx_disable(struct device *dev, struct device_attribute *da,
 			const char *buf, size_t count)
 {
@@ -321,6 +389,7 @@ static ssize_t set_tx_disable(struct device *dev, struct device_attribute *da,
 	if (status) {
 		return status;
 	}
+    reg  = 0x9;
     switch (attr->index)
     {
          case MODULE_TXDISABLE_49 ... MODULE_TXDISABLE_50:
@@ -343,11 +412,11 @@ static ssize_t set_tx_disable(struct device *dev, struct device_attribute *da,
 		goto exit;
 	}
 	/* Update tx_disable status */
-	if (!disable) {
-		status &= ~mask;
+	if (disable) {
+		status |= mask;
 	}
 	else {
-	    status |= mask;
+	    status &= ~mask;
 	}
     status = as4630_54pe_cpld_write_internal(client, reg, status);
 	if (unlikely(status < 0)) {
@@ -603,30 +672,6 @@ static struct as4630_54pe_cpld_data *as4630_54pe_fan_update_device(struct device
     return data;
 }
 
-static ssize_t show_power(struct device *dev, struct device_attribute *da,
-             char *buf)
-{
-    struct i2c_client *client = to_i2c_client(dev);
-    struct as4630_54pe_cpld_data *data = i2c_get_clientdata(client);
-    int status = 0;
-    u8 reg = 0, mask = 0;
-  
-    reg=0xc;
-    mask=0x2;
-    mutex_lock(&data->update_lock);
-	status = as4630_54pe_cpld_read_internal(client, reg);
-	if (unlikely(status < 0)) {
-		goto exit;
-	}
-	mutex_unlock(&data->update_lock);
-
-	return sprintf(buf, "%d\n", !(status & mask));
-
-exit:
-	mutex_unlock(&data->update_lock);
-	return status;
-}
-
 /*
  * I2C init/probing/exit functions
  */
@@ -636,7 +681,7 @@ static int as4630_54pe_cpld_probe(struct i2c_client *client,
 	struct i2c_adapter *adap = to_i2c_adapter(client->dev.parent);
 	struct as4630_54pe_cpld_data *data;
 	int ret = -ENODEV;
-	int status;	
+
 	const struct attribute_group *group = NULL;
 
 	if (!i2c_check_functionality(adap, I2C_FUNC_SMBUS_BYTE))
diff --git a/packages/platforms/accton/x86-64/as4630-54pe/modules/builds/x86-64-accton-as4630-54pe-leds.c b/packages/platforms/accton/x86-64/as4630-54pe/modules/builds/x86-64-accton-as4630-54pe-leds.c
index ff5d01c5..ddfdb056 100755
--- a/packages/platforms/accton/x86-64/as4630-54pe/modules/builds/x86-64-accton-as4630-54pe-leds.c
+++ b/packages/platforms/accton/x86-64/as4630-54pe/modules/builds/x86-64-accton-as4630-54pe-leds.c
@@ -64,7 +64,7 @@ static struct accton_as4630_54pe_led_data  *ledctl = NULL;
 #define LED_TYPE_POE_REG_MASK	        (0x2|0x1)
 #define LED_MODE_POE_GREEN_VALUE        0x1
 #define LED_MODE_POE_AMBER_VALUE        0x2
-#define LED_MODE_POE_OFF_VALUE	        0x0
+#define LED_MODE_POE_OFF_VALUE	        0x3
 
 #define LED_TYPE_STK1_REG_MASK	        0x20
 #define LED_MODE_STK1_GREEN_VALUE       0x0
@@ -74,20 +74,20 @@ static struct accton_as4630_54pe_led_data  *ledctl = NULL;
 #define LED_MODE_STK2_GREEN_VALUE       0x0
 #define LED_MODE_STK2_OFF_VALUE	        0x10
 
-#define LED_TYPE_FAN_REG_MASK           (0x20|0x10)
-#define LED_MODE_FAN_AMBER_VALUE        0x20
-#define LED_MODE_FAN_GREEN_VALUE        0x10
-#define LED_MODE_FAN_OFF_VALUE	        (0x0)
+#define LED_TYPE_FAN_REG_MASK           (0x8|0x4)
+#define LED_MODE_FAN_AMBER_VALUE        0x8
+#define LED_MODE_FAN_GREEN_VALUE        0x4
+#define LED_MODE_FAN_OFF_VALUE	        (0xC)
 
-#define LED_TYPE_PSU2_REG_MASK          (0x8|0x4)
-#define LED_MODE_PSU2_AMBER_VALUE        0x8
-#define LED_MODE_PSU2_GREEN_VALUE        0x4
-#define LED_MODE_PSU2_OFF_VALUE	        (0x0)
+#define LED_TYPE_PSU2_REG_MASK          (0x80|0x40)
+#define LED_MODE_PSU2_AMBER_VALUE        0x80
+#define LED_MODE_PSU2_GREEN_VALUE        0x40
+#define LED_MODE_PSU2_OFF_VALUE	        (0xC0)
 
 #define LED_TYPE_PSU1_REG_MASK          (0x2|0x1)
 #define LED_MODE_PSU1_AMBER_VALUE        0x2
 #define LED_MODE_PSU1_GREEN_VALUE        0x1
-#define LED_MODE_PSU1_OFF_VALUE	        (0x0)
+#define LED_MODE_PSU1_OFF_VALUE	        (0x3)
 
 enum led_type {
     LED_TYPE_DIAG,
@@ -106,8 +106,8 @@ struct led_reg {
 };
 
 static const struct led_reg led_reg_map[] = {    
-    {(1<<LED_TYPE_DIAG)| (1<<LED_TYPE_PRI) | (1<<LED_TYPE_PSU2) , 0x30},
-    {(1<<LED_TYPE_PSU1) | (1<<LED_TYPE_FAN) | (1<<LED_TYPE_POE) |(1<<LED_TYPE_STK1) | (1<<LED_TYPE_STK2) , 0x31},
+    {(1<<LED_TYPE_DIAG)| (1<<LED_TYPE_PRI) | (1<<LED_TYPE_PSU1) , 0x30},
+    {(1<<LED_TYPE_PSU2) | (1<<LED_TYPE_FAN) | (1<<LED_TYPE_POE) |(1<<LED_TYPE_STK1) | (1<<LED_TYPE_STK2) , 0x31},
 };
 
 
@@ -379,7 +379,7 @@ static struct led_classdev accton_as4630_54pe_leds[] = {
         .brightness_set	 = accton_as4630_54pe_led_diag_set,
         .brightness_get	 = accton_as4630_54pe_led_diag_get,
         .flags			 = LED_CORE_SUSPENDRESUME,
-        .max_brightness	 = LED_MODE_GREEN,
+        .max_brightness	 = LED_MODE_GREEN_BLINK,
     },
     [LED_TYPE_PRI] = {
         .name			 = "pri",
-- 
2.31.1

