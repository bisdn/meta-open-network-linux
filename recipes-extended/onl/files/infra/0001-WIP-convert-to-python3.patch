Upstream-Status: incomplete,untested

From 6c0d96572740bebd3c13998cb0222586127c7d01 Mon Sep 17 00:00:00 2001
From: Jonas Gorski <jonas.gorski@bisdn.de>
Date: Thu, 16 Jun 2022 10:49:42 +0200
Subject: [PATCH 1/2] WIP: convert to python3

Convert python scripts from python2 to python3:

* ran 2to3 on all files
* s/python2/python3/
* added text=True to all check_output() invocations

Only tested in so far the build scripts are used within bisdn-linux, so
most parts are untested.

Signed-off-by: Jonas Gorski <jonas.gorski@bisdn.de>
---
 builder/unix/tools/dependmodules.py  | 22 +++++++++++-----------
 builder/unix/tools/manifesttool.py   | 20 ++++++++++----------
 builder/unix/tools/mmg.py            |  6 +++---
 builder/unix/tools/modtool.py        | 14 +++++++-------
 builder/unix/tools/modulegen.py      | 14 +++++++-------
 builder/unix/tools/modulemakes.py    |  2 +-
 builder/unix/tools/wod.py            |  8 ++++----
 sourcegen/caimlogen.py               |  4 ++--
 sourcegen/cconfigdefgen.py           | 12 ++++++------
 sourcegen/cdefaultsourceformatter.py |  2 +-
 sourcegen/cenumgen.py                |  8 ++++----
 sourcegen/cflagsgen.py               |  8 ++++----
 sourcegen/cfunctiongen.py            | 22 +++++++++++-----------
 sourcegen/cloggen.py                 |  6 +++---
 sourcegen/cm.py                      |  4 ++--
 sourcegen/cmacrogen.py               | 12 ++++++------
 sourcegen/cobjectgen.py              |  6 +++---
 sourcegen/cportingmacrogen.py        |  2 +-
 sourcegen/cstructgen.py              | 14 +++++++-------
 sourcegen/ctypesgen.py               |  2 +-
 sourcegen/cutilgen.py                |  6 +++---
 sourcegen/cxenumgen.py               |  4 ++--
 sourcegen/cxmacrogen.py              |  8 ++++----
 sourcegen/pyenumgen.py               |  4 ++--
 sourcegen/sg.py                      |  8 ++++----
 sourcegen/sourcegen.py               |  2 +-
 sourcegen/sourceobjectgen.py         |  8 ++++----
 sourcegen/util.py                    |  4 ++--
 tools/asr.py                         |  9 +++++----
 29 files changed, 121 insertions(+), 120 deletions(-)

diff --git a/builder/unix/tools/dependmodules.py b/builder/unix/tools/dependmodules.py
index e78df03799b6..88ba484cf1a4 100755
--- a/builder/unix/tools/dependmodules.py
+++ b/builder/unix/tools/dependmodules.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python2
+#!/usr/bin/python3
 ################################################################
 #
 #        Copyright 2013, Big Switch Networks, Inc.
@@ -27,7 +27,7 @@ import os
 import sys
 
 if len(sys.argv) == 1:
-    print "usage: %s MACRO:MODULE [MACRO:MODULE] [MACRO:MODULE] ..."
+    print("usage: %s MACRO:MODULE [MACRO:MODULE] [MACRO:MODULE] ...")
     sys.exit(1);
 
 
@@ -46,24 +46,24 @@ for arg in sys.argv[1:]:
 
 
 # Print entries.
-print "/* Autogenerated Module Dependencies. */\n"
+print("/* Autogenerated Module Dependencies. */\n")
 
-for (macro, entries) in macros.iteritems():
+for (macro, entries) in macros.items():
     m = "DEPENDMODULE_%s" % macro.upper()
-    print "#ifdef %s" % m
+    print("#ifdef %s" % m)
     for mod in entries:
-        print "%s(%s)" % (m, mod)
-    print "#undef %s" % m
-    print "#endif /* %s */\n" %m
+        print("%s(%s)" % (m, mod))
+    print("#undef %s" % m)
+    print("#endif /* %s */\n" %m)
 
 # The special 'build' class also gets native compilation defines
-print "/* Preprocessor definitions for all modules included in this build. */"
+print("/* Preprocessor definitions for all modules included in this build. */")
 for mod in macros['build']:
-    print """
+    print("""
 #ifndef DEPENDMODULE_INCLUDE_%(MODULE)s
 #define DEPENDMODULE_INCLUDE_%(MODULE)s
 #endif
-""" % dict(MODULE=mod.upper())
+""" % dict(MODULE=mod.upper()))
 
 
 
diff --git a/builder/unix/tools/manifesttool.py b/builder/unix/tools/manifesttool.py
index e83f047199b4..99e991dd7f11 100755
--- a/builder/unix/tools/manifesttool.py
+++ b/builder/unix/tools/manifesttool.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python2
+#!/usr/bin/python3
 ################################################################
 #
 #        Copyright 2013, Big Switch Networks, Inc.
@@ -147,21 +147,21 @@ if __name__ == "__main__":
                    dox=DoxManifest,)
 
     if len(sys.argv) == 1:
-        print >>sys.stderr, "Module Manifest Tool"
-        print >>sys.stderr, "usage: %s [%s|all]" % (
-            sys.argv[0], "|".join(classes.keys()))
-        for n in classes.keys():
-            print >>sys.stderr, "%-10s%s" % (
-                n, classes[n].__doc__)
-        print >>sys.stderr, "%-10s%s" % (
-            "all", "Generate all files.")
+        print("Module Manifest Tool", file=sys.stderr)
+        print("usage: %s [%s|all]" % (
+            sys.argv[0], "|".join(list(classes.keys()))), file=sys.stderr)
+        for n in list(classes.keys()):
+            print("%-10s%s" % (
+                n, classes[n].__doc__), file=sys.stderr)
+        print("%-10s%s" % (
+            "all", "Generate all files."), file=sys.stderr)
 
         sys.exit(1);
 
 
     targets = sys.argv[1:]
     if "all" in targets:
-        targets = classes.keys()
+        targets = list(classes.keys())
 
     for name in targets:
         if name in classes:
diff --git a/builder/unix/tools/mmg.py b/builder/unix/tools/mmg.py
index 7f1eb8c67819..1d005ae1f795 100755
--- a/builder/unix/tools/mmg.py
+++ b/builder/unix/tools/mmg.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python2
+#!/usr/bin/python3
 ################################################################
 #
 #        Copyright 2013, Big Switch Networks, Inc.
@@ -128,7 +128,7 @@ class ManifestBase(object):
     def generate_file(self, target):
         s = self.generate_str()
         if target == '-':
-            print s
+            print(s)
         else:
             with open(target, "w") as f:
                 f.write(s)
@@ -166,6 +166,6 @@ if __name__ == "__main__":
     if not os.path.exists(target) or ops.only_if_missing is False:
         data = generate_manifest_data(dirs)[0]
         MakeManifest(data).generate_file(target)
-    print target
+    print(target)
 
 
diff --git a/builder/unix/tools/modtool.py b/builder/unix/tools/modtool.py
index b6f0f91ec37b..921d39ed860f 100755
--- a/builder/unix/tools/modtool.py
+++ b/builder/unix/tools/modtool.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python2
+#!/usr/bin/python3
 ############################################################
 #
 # Module Management Tool
@@ -52,7 +52,7 @@ class ModuleTool(object):
             f.write(json.dumps(self.modules, indent=2))
 
     def write_make_manifest(self, handle):
-        for (mname, module) in sorted(self.modules.iteritems()):
+        for (mname, module) in sorted(self.modules.items()):
             handle.write("%s_BASEDIR := %s\n" % (mname, module['dir']))
 
     def make_manifest(self, mk):
@@ -86,12 +86,12 @@ class ModuleTool(object):
 
 
     def show_dependencies(self):
-        for (nname, module) in sorted(self.modules.iteritems()):
-            print "%s : %s" % (module['name'], module.get('depends', None))
+        for (nname, module) in sorted(self.modules.items()):
+            print(("%s : %s" % (module['name'], module.get('depends', None))))
 
 
     def foreach_module(self, cmd):
-        for (nname, module) in self.modules.iteritems():
+        for (nname, module) in list(self.modules.items()):
             import subprocess
             subprocess.check_call(cmd % module, shell=True)
 
@@ -134,12 +134,12 @@ if __name__ == '__main__':
         mm.show_dependencies()
 
     if ops.dependmodules:
-        print " ".join(mm.dependmodules(ops.dependmodules))
+        print((" ".join(mm.dependmodules(ops.dependmodules))))
 
     if ops.make_manifest:
         if not os.path.exists(ops.make_manifest) or ops.force:
             mm.make_manifest(ops.make_manifest)
-        print ops.make_manifest
+        print((ops.make_manifest))
 
     if ops.foreach_module:
         mm.foreach_module(ops.foreach_module)
diff --git a/builder/unix/tools/modulegen.py b/builder/unix/tools/modulegen.py
index 2cbc4e2447b4..ba340f7f797b 100644
--- a/builder/unix/tools/modulegen.py
+++ b/builder/unix/tools/modulegen.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python2
+#!/usr/bin/python3
 ################################################################
 #
 #        Copyright 2013, Big Switch Networks, Inc.
@@ -114,13 +114,13 @@ class ModuleFile(object):
         # Anything truly circular or missing will eventually fail.
         #
         for i in range(1, 10):
-            for (k, v) in self.__dict__.iteritems():
+            for (k, v) in list(self.__dict__.items()):
                 if type(v) is str:
                     try:
                         self.__dict__[k] = v % self.__dict__
                     except Exception as e:
                         if i == 9:
-                            print "\nclass=%s\nk=%s, v=%s\n" % (self.__class__, k,v)
+                            print("\nclass=%s\nk=%s, v=%s\n" % (self.__class__, k,v))
                             raise
 
 
@@ -133,10 +133,10 @@ class ModuleFile(object):
         if os.path.exists(self.fname):
             if self.overwrite is False:
                 # Don't overwrite an existing file
-                print "Skipping existing file %s..." % self.fname
+                print("Skipping existing file %s..." % self.fname)
                 return
 
-        print "Writing %s..." % self.fname
+        print("Writing %s..." % self.fname)
         f = open(self.fname, "w");
         f.write(self.header)
         f.write(self.body)
@@ -581,7 +581,7 @@ class GModuleDoxyFile(ModuleFile):
     def finit(self):
         self.fname = "%(MODULE_BASE_DIR)s/%(MODULE_NAME)s.doxy" % self.__dict__
         if os.path.exists('/usr/bin/doxygen'):
-            body = subprocess.check_output(["/usr/bin/doxygen", "-g", "-"])
+            body = subprocess.check_output(["/usr/bin/doxygen", "-g", "-"], text=True)
             body = body.replace("%", " percent");
             body = body.replace("PROJECT_NAME           = \"My Project\"",
                               "PROJECT_NAME           = \"%(MODULE_NAME)s\"")
@@ -653,7 +653,7 @@ class ModuleGenerator(object):
         self.opts = opts
         if globals_ is None:
             globals_ = globals().copy()
-        for name, obj in globals_.iteritems():
+        for name, obj in globals_.items():
             if name.startswith("GModule"):
                 self.classes.append(globals_[name])
 
diff --git a/builder/unix/tools/modulemakes.py b/builder/unix/tools/modulemakes.py
index c65399d76a59..5af201deda40 100755
--- a/builder/unix/tools/modulemakes.py
+++ b/builder/unix/tools/modulemakes.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python2
+#!/usr/bin/python3
 ################################################################
 #
 #        Copyright 2013, Big Switch Networks, Inc.
diff --git a/builder/unix/tools/wod.py b/builder/unix/tools/wod.py
index 9796be649741..603e7eab2ae6 100755
--- a/builder/unix/tools/wod.py
+++ b/builder/unix/tools/wod.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python2
+#!/usr/bin/python3
 ################################################################
 #
 #        Copyright 2013, Big Switch Networks, Inc.
@@ -45,12 +45,12 @@ def write_on_diff(fname, new, msg=True):
 
     if new == existing:
         if msg:
-            print "%s: no changes." % fname
+            print("%s: no changes." % fname)
     else:
         if msg:
-            print "%s: updated." % fname
+            print("%s: updated." % fname)
         with open(fname, "w") as f:
-            f.write(new)
+            f.write(new.decode('utf-8'))
 
 
 if __name__ == "__main__":
diff --git a/sourcegen/caimlogen.py b/sourcegen/caimlogen.py
index 7591cde72000..071bf04146ea 100755
--- a/sourcegen/caimlogen.py
+++ b/sourcegen/caimlogen.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python2
+#!/usr/bin/python3
 ## SourceObject ##
 #################################################################
 #
@@ -224,7 +224,7 @@ import cm
 if __name__ == "__main__":
 
     m = CAIMCommonLogMacroGenerator(flags = ["WARN", "ERROR", "INFO"])
-    print m.Header();
+    print(m.Header());
     #print m.Source();
 
 
diff --git a/sourcegen/cconfigdefgen.py b/sourcegen/cconfigdefgen.py
index bb5295c44b2c..052cd4eb57e5 100755
--- a/sourcegen/cconfigdefgen.py
+++ b/sourcegen/cconfigdefgen.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python2
+#!/usr/bin/python3
 ## SourceObject ##
 #################################################################
 #
@@ -122,7 +122,7 @@ class CConfigDefsGenerator(CObjectGenerator):
         return "%s_settings" % self.basename
 
     def CDefConstruct(self, d):
-        k = d.keys()[0]
+        k = list(d.keys())[0]
         return CConfigDefGenerator(name=k, initargs=d[k])
 
     ############################################################
@@ -207,7 +207,7 @@ import cm
 
 if __name__ == "__main__":
 
-    print "/* ConfigDefGenerator Test */"
+    print("/* ConfigDefGenerator Test */")
     m = CConfigDefGenerator(name="CONFIG_FOOBAR",
                             default=0x42,
                             doc ="""
@@ -215,16 +215,16 @@ This is the helpstring for CONFIG_FOOBAR
 You should always understand CONFIG_FOOBAR settings
 """)
 
-    print m.Define()
+    print(m.Define())
 
     data = [ { 'CONFIG1' : { 'default':0x42, 'doc': "C1" } },
              { 'CONFIG2' : { 'default':0x41, 'doc': "C2" } },
              { 'CONFIG3' : { 'default':0x10, 'doc': "C3" } }
              ]
 
-    print "/* ConfigDefsGenerator Test */"
+    print("/* ConfigDefsGenerator Test */")
     m = CConfigDefsGenerator(basename="CDEFTEST", defs=data)
 
-    print m.Define()
+    print(m.Define())
 
 
diff --git a/sourcegen/cdefaultsourceformatter.py b/sourcegen/cdefaultsourceformatter.py
index 9143ce9ff26d..f891ec9cf359 100755
--- a/sourcegen/cdefaultsourceformatter.py
+++ b/sourcegen/cdefaultsourceformatter.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python2
+#!/usr/bin/python3
 #################################################################
 #
 #        Copyright 2013, Big Switch Networks, Inc.
diff --git a/sourcegen/cenumgen.py b/sourcegen/cenumgen.py
index c3ba81d70b7a..7c0d9f369603 100755
--- a/sourcegen/cenumgen.py
+++ b/sourcegen/cenumgen.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python2
+#!/usr/bin/python3
 ## SourceObject ##
 #################################################################
 #
@@ -307,9 +307,9 @@ class CEnumGenerator(CObjectGenerator):
                 # Don't support this anymore
                 raise Exception("List formats for enum keys no longer supported.")
             elif type(m) == dict:
-                if len(m.keys()) != 1:
+                if len(list(m.keys())) != 1:
                     raise Exception("Malformed dict for enum member: m")
-                for (k,v) in m.iteritems():
+                for (k,v) in list(m.items()):
                     if type(v) is dict:
                         # Assumed this is just the member data.
                         nmember.name = k
@@ -620,4 +620,4 @@ if __name__ == "__main__":
     e = CEnumGenerator(name="testEnum", members=[ ['member1'], ['member2'],
                                                   ['member3']])
 
-    print e.Define()
+    print(e.Define())
diff --git a/sourcegen/cflagsgen.py b/sourcegen/cflagsgen.py
index 462ee57c2dbd..e8c68dcb9724 100755
--- a/sourcegen/cflagsgen.py
+++ b/sourcegen/cflagsgen.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python2
+#!/usr/bin/python3
 ## SourceObject ##
 #################################################################
 #
@@ -38,7 +38,7 @@ class CFlagsGenerator(CObjectGenerator):
     def Init(self):
         self.width = 0
         for entry in self.members:
-            name=entry.keys()[0]
+            name=list(entry.keys())[0]
             if len(name) > self.width:
                 self.width = + len(name)
 
@@ -47,7 +47,7 @@ class CFlagsGenerator(CObjectGenerator):
         s = ""
         bitcount = 0
         for entry in self.members:
-            name = entry.keys()[0]
+            name = list(entry.keys())[0]
             flag = entry[name]
             value = None
 
@@ -104,5 +104,5 @@ if __name__ == "__main__":
           }
 
     m = CFlagsGenerator(initargs=d)
-    print m.Define()
+    print(m.Define())
 
diff --git a/sourcegen/cfunctiongen.py b/sourcegen/cfunctiongen.py
index 9077bef681d2..8964f90f1cdf 100755
--- a/sourcegen/cfunctiongen.py
+++ b/sourcegen/cfunctiongen.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python2
+#!/usr/bin/python3
 ## SourceObject ##
 #################################################################
 #
@@ -119,11 +119,11 @@ if __name__ == "__main__":
 
 
     f = CTestFunction()
-    print f.Prototype();
-    print
-    print f.Define()
-    print
-    print f.Call('a', 'b') + ';'
+    print(f.Prototype());
+    print()
+    print(f.Define())
+    print()
+    print(f.Call('a', 'b') + ';')
 
 
     class CTestVoidFunction(CFunctionGenerator):
@@ -136,11 +136,11 @@ if __name__ == "__main__":
 
 
     f = CTestVoidFunction()
-    print f.Prototype()
-    print
-    print f.Define()
-    print
-    print f.Call()
+    print(f.Prototype())
+    print()
+    print(f.Define())
+    print()
+    print(f.Call())
 
 
 
diff --git a/sourcegen/cloggen.py b/sourcegen/cloggen.py
index bb1d71dc2e57..8200ce37868c 100755
--- a/sourcegen/cloggen.py
+++ b/sourcegen/cloggen.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python2
+#!/usr/bin/python3
 ## SourceObject ##
 #################################################################
 #
@@ -269,8 +269,8 @@ import cm
 if __name__ == "__main__":
 
     m = CLogGenerator(name="module");
-    print m.Header();
-    print m.Source();
+    print(m.Header());
+    print(m.Source());
 
 
 
diff --git a/sourcegen/cm.py b/sourcegen/cm.py
index c3a889fbedce..d9f90c6c0df7 100755
--- a/sourcegen/cm.py
+++ b/sourcegen/cm.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python2
+#!/usr/bin/python3
 #################################################################
 #
 #        Copyright 2013, Big Switch Networks, Inc.
@@ -114,7 +114,7 @@ class ConfigManager:
                     # Specific object name
                     return [ name ]
 
-                for (k,v) in c.definitions[type_].iteritems():
+                for (k,v) in c.definitions[type_].items():
                     if not k.startswith('__'):
                         if name == "ALL":
                             allList.append(k)
diff --git a/sourcegen/cmacrogen.py b/sourcegen/cmacrogen.py
index 0753f718b643..ccde4cf346fe 100755
--- a/sourcegen/cmacrogen.py
+++ b/sourcegen/cmacrogen.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python2
+#!/usr/bin/python3
 ## SourceObject ##
 #################################################################
 #
@@ -104,16 +104,16 @@ if __name__ == "__main__":
           }
 
     m = CMacroGenerator(initargs=d)
-    print m.Define()
+    print(m.Define())
 
     m = CMacroGenerator(name="cmg", args=[ '_a', '_b' ],
                         body = """ (_a) + (_b) + (_c) """)
-    print m.Define()
+    print(m.Define())
 
     m = CTestMacro()
-    print m.Define()
-    print
-    print m.Call('x', 'y', 'z')
+    print(m.Define())
+    print()
+    print(m.Call('x', 'y', 'z'))
 
 
 
diff --git a/sourcegen/cobjectgen.py b/sourcegen/cobjectgen.py
index 02cebeaf06ed..424467fedab7 100755
--- a/sourcegen/cobjectgen.py
+++ b/sourcegen/cobjectgen.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python2
+#!/usr/bin/python3
 #################################################################
 #
 #        Copyright 2013, Big Switch Networks, Inc.
@@ -61,5 +61,5 @@ if __name__ == "__main__":
 
     sof = CObjectFactory(cm)
     for e in options.e:
-        print "/* expr: %s */" % e
-        print sof.Eval(e)
+        print("/* expr: %s */" % e)
+        print(sof.Eval(e))
diff --git a/sourcegen/cportingmacrogen.py b/sourcegen/cportingmacrogen.py
index c3cbd1c4f964..28217e647b86 100755
--- a/sourcegen/cportingmacrogen.py
+++ b/sourcegen/cportingmacrogen.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python2
+#!/usr/bin/python3
 ## SourceObject ##
 #################################################################
 #
diff --git a/sourcegen/cstructgen.py b/sourcegen/cstructgen.py
index 28978a140d76..844761bb7652 100755
--- a/sourcegen/cstructgen.py
+++ b/sourcegen/cstructgen.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python2
+#!/usr/bin/python3
 ## SourceObject ##
 #################################################################
 #
@@ -117,10 +117,10 @@ if __name__ == "__main__":
 
     o = CStructGenerator(name='testStruct',
                          members= [ "int x", ['__self__', 'next'], "char* y"])
-    print o.Define() + "\n"
-    print o.TypedefName() + "\n"
-    print o.StructName() + "\n"
-    print o.Declare() + "\n"
+    print(o.Define() + "\n")
+    print(o.TypedefName() + "\n")
+    print(o.StructName() + "\n")
+    print(o.Declare() + "\n")
 
-    print CStructIntMap().Define() + "\n"
-    print CStructStringMap().Define() + "\n"
+    print(CStructIntMap().Define() + "\n")
+    print(CStructStringMap().Define() + "\n")
diff --git a/sourcegen/ctypesgen.py b/sourcegen/ctypesgen.py
index c4d73c51ed04..3dcb197f2c4d 100755
--- a/sourcegen/ctypesgen.py
+++ b/sourcegen/ctypesgen.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python2
+#!/usr/bin/python3
 ## SourceObject ##
 #################################################################
 #
diff --git a/sourcegen/cutilgen.py b/sourcegen/cutilgen.py
index 20b9b1d38149..d5de1eb89b53 100755
--- a/sourcegen/cutilgen.py
+++ b/sourcegen/cutilgen.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python2
+#!/usr/bin/python3
 ## SourceObject ##
 #################################################################
 #
@@ -147,8 +147,8 @@ import cm
 if __name__ == "__main__":
     data = { 'objects': [ 'zmalloc', 'pingGod' ] }
     m = CUtilGenerator(name="module", initargs=data);
-    print m.Header();
-    print m.Define();
+    print(m.Header());
+    print(m.Define());
 
 
 
diff --git a/sourcegen/cxenumgen.py b/sourcegen/cxenumgen.py
index 23b669d60e3d..242a2575b6f3 100755
--- a/sourcegen/cxenumgen.py
+++ b/sourcegen/cxenumgen.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python2
+#!/usr/bin/python3
 ## SourceObject ##
 #################################################################
 #
@@ -45,7 +45,7 @@ class CXEnumGenerator(CObjectGenerator):
 
         s = "#ifdef %s\n" % self.name
 
-        for (k,v) in sorted(self.members.iteritems()):
+        for (k,v) in sorted(self.members.items()):
             desc = v['desc'] if 'desc' in v else ""
             s += util.fcall(self.name, "%s, \"%s\"" % (k, desc)) + "\n"
         s += "#undef %s\n" % self.name
diff --git a/sourcegen/cxmacrogen.py b/sourcegen/cxmacrogen.py
index e175c6e6bef0..e89a8914b449 100755
--- a/sourcegen/cxmacrogen.py
+++ b/sourcegen/cxmacrogen.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python2
+#!/usr/bin/python3
 ## SourceObject ##
 #################################################################
 #
@@ -50,7 +50,7 @@ class CXMacroGenerator(CObjectGenerator):
             # hack for enumerations with custom description fields
             for a in args:
                 if type(a) is dict:
-                    arglist.extend(a.values())
+                    arglist.extend(list(a.values()))
                 else:
                     arglist.append(a)
                 if hasattr(self, 'noargs') and self.noargs is True:
@@ -112,11 +112,11 @@ if __name__ == "__main__":
                           'ENTRY4', ] }
 
     m = CXMacroGenerator(name='MY_XMACRO', initargs=data);
-    print m.Define()
+    print(m.Define())
 
 
     data = { 'members' : [ [ 'E01', 'E02', 'E03' ],
                            [ 'E11', 'E12', 'E13' ],
                            [ 'E21', 'E22', 'E23' ] ] }
     m = CXMacroGenerator(name='MY_XMACRO2', initargs=data)
-    print m.Define()
+    print(m.Define())
diff --git a/sourcegen/pyenumgen.py b/sourcegen/pyenumgen.py
index 2e1824708702..49b529b68cc8 100755
--- a/sourcegen/pyenumgen.py
+++ b/sourcegen/pyenumgen.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python2
+#!/usr/bin/python3
 ## SourceObject ##
 #################################################################
 #
@@ -105,4 +105,4 @@ if __name__ == "__main__":
     e = PyEnumGenerator(name="testEnum", members=[ ['member1'], ['member2'],
                                                   ['member3']])
 
-    print e.Define()
+    print(e.Define())
diff --git a/sourcegen/sg.py b/sourcegen/sg.py
index 61c13e228e94..220e817723f9 100755
--- a/sourcegen/sg.py
+++ b/sourcegen/sg.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python2
+#!/usr/bin/python3
 #################################################################
 #
 #        Copyright 2013, Big Switch Networks, Inc.
@@ -64,14 +64,14 @@ if gArgs.i:
         of = gArgs.o
         if of is None:
             of = inf
-        print "generate: %s:" % inf,
+        print("generate: %s:" % inf, end=' ')
 
         diff = sg.Generate(inf, of)
         if inf is of:
             if diff:
-                print "\x1B[35m" + "\x1B[1m" + "updated" + "\x1B[39m" + "\x1B[0m"
+                print("\x1B[35m" + "\x1B[1m" + "updated" + "\x1B[39m" + "\x1B[0m")
             else:
-                print "\x1B[37m" + "no changes" + "\x1B[39m"
+                print("\x1B[37m" + "no changes" + "\x1B[39m")
 
 
 
diff --git a/sourcegen/sourcegen.py b/sourcegen/sourcegen.py
index 471675545b44..c75b8914e7b4 100755
--- a/sourcegen/sourcegen.py
+++ b/sourcegen/sourcegen.py
@@ -26,7 +26,7 @@
 import imp
 import sys
 import re
-import StringIO
+import io
 import tempfile
 import shutil
 import filecmp
diff --git a/sourcegen/sourceobjectgen.py b/sourcegen/sourceobjectgen.py
index 5dca7778aa1b..daad88bc69c3 100755
--- a/sourcegen/sourceobjectgen.py
+++ b/sourcegen/sourceobjectgen.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python2
+#!/usr/bin/python3
 #################################################################
 #
 #        Copyright 2013, Big Switch Networks, Inc.
@@ -193,13 +193,13 @@ class SourceObjectFactory:
                         self.classes[obj] = __cls
                         self.objectTypes[ot] = obj
 
-            except TypeError, e:
+            except TypeError as e:
                 pass
 
 
     def ListClasses(self):
-        for clsname, cls in self.classes.iteritems():
-            print "%s:%s (type=%s)" % (clsname, cls, cls.objectType)
+        for clsname, cls in self.classes.items():
+            print("%s:%s (type=%s)" % (clsname, cls, cls.objectType))
 
 
     def CreateObjectList(self, cls, name=None, data=None):
diff --git a/sourcegen/util.py b/sourcegen/util.py
index 3bd253fe6d1c..b91ebd4669eb 100755
--- a/sourcegen/util.py
+++ b/sourcegen/util.py
@@ -52,7 +52,7 @@ def listifyElements(list_):
             elif isinstance(e, list):
                 n.append(e)
             elif isinstance(e, dict):
-                for k, v in e.iteritems():
+                for k, v in e.items():
                     n.append([ k, v ])
         return n
 
@@ -89,7 +89,7 @@ class DotDict(dict):
 
     def __getattr__(self, attr):
         item = self.get(attr, None)
-        if type(item) == types.DictType:
+        if type(item) == dict:
             item = DotDict(item)
         return item
 
diff --git a/tools/asr.py b/tools/asr.py
index 9055763fe1d6..571e52a4e9f2 100755
--- a/tools/asr.py
+++ b/tools/asr.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python2
+#!/usr/bin/python3
 ############################################################
 #
 # AIM Syslog Reference Tool
@@ -15,7 +15,8 @@ import logging
 import json
 import pprint
 import yaml
-import StringIO
+from io import StringIO
+from io import IOBase
 
 class AimSyslogReference(object):
 
@@ -37,7 +38,7 @@ class AimSyslogReference(object):
         self.logger.debug("Extracting %s..." % binary)
         # Get all strings from the binary
         try:
-            strings = subprocess.check_output(['strings', binary])
+            strings = subprocess.check_output(['strings', binary], text=True)
         except subprocess.CalledProcessError:
             self.logger.error("string extraction failed on file %s." % binary)
             return None
@@ -128,7 +129,7 @@ class AimSyslogReference(object):
         out = self.formats(fmt)
 
         if fname:
-            if type(fname) is file:
+            if type(fname) is IOBase:
                 fname.write(out)
             elif type(fname) is str:
                 if fname == '-' or fname == 'stdout':
-- 
2.36.1

