From 5bb41a44a0bdda148d5c9cf5959ba824c6c66c75 Mon Sep 17 00:00:00 2001
From: Jonas Gorski <jonas.gorski@bisdn.de>
Date: Fri, 26 Aug 2022 12:22:19 +0200
Subject: [PATCH 6/8] accton-as4610: let CPLD handle the FAN device

The FAN device directly depends on the CPLD device, so let it be created
by the CPLD driver. This allows us to convert the FAN driver to a simple
platform driver.

Ideally this would be handled as a MFD device, but this would require
more substantial changes.

Upstream-Status: Unsubmitted
Signed-off-by: Jonas Gorski <jonas.gorski@bisdn.de>
---
 .../modules/accton_as4610_cpld.c              | 27 ++++++
 .../modules/accton_as4610_fan.c               | 86 ++++---------------
 2 files changed, 42 insertions(+), 71 deletions(-)

diff --git a/packages/platforms/accton/armxx/arm-accton-as4610/modules/accton_as4610_cpld.c b/packages/platforms/accton/armxx/arm-accton-as4610/modules/accton_as4610_cpld.c
index c327f54ff0bd..d97b0f42a961 100644
--- a/packages/platforms/accton/armxx/arm-accton-as4610/modules/accton_as4610_cpld.c
+++ b/packages/platforms/accton/armxx/arm-accton-as4610/modules/accton_as4610_cpld.c
@@ -34,6 +34,7 @@
 #include <linux/hwmon-sysfs.h>
 #include <linux/delay.h>
 #include <linux/of.h>
+#include <linux/platform_device.h>
 
 #define I2C_RW_RETRY_COUNT				10
 #define I2C_RW_RETRY_INTERVAL			60 /* ms */
@@ -65,6 +66,7 @@ enum as4610_product_id_e {
 struct as4610_54_cpld_data {
     enum cpld_type   type;
     struct device   *hwmon_dev;
+    struct platform_device *fan_pdev;
     struct mutex     update_lock;
 };
 
@@ -450,6 +452,8 @@ static ssize_t show_version(struct device *dev, struct device_attribute *attr, c
     return sprintf(buf, "%d", val);
 }
 
+int as4610_product_id(void);
+
 /* I2C init/probing/exit functions */
 static int as4610_54_cpld_probe(struct i2c_client *client,
 			 const struct i2c_device_id *id)
@@ -479,8 +483,28 @@ static int as4610_54_cpld_probe(struct i2c_client *client,
     }
 
     as4610_54_cpld_add_client(client);
+
+    switch (as4610_product_id()) {
+    case PID_AS4610_30P:
+    case PID_AS4610_54P:
+    case PID_AS4610_54T_B:
+	    data->fan_pdev = platform_device_register_simple("as4610_fan", -1, NULL, 0);
+	    if (IS_ERR(data->fan_pdev)) {
+		    ret = PTR_ERR(data->fan_pdev);
+		    goto exit_unregister;
+	    }
+	    break;
+    default:
+	    /* no fan */
+	    break;
+    }
+
     return 0;
 
+exit_unregister:
+    as4610_54_cpld_remove_client(client);
+    /* Remove sysfs hooks */
+    sysfs_remove_group(&client->dev.kobj, &as4610_54_cpld_group);
 exit_free:
     kfree(data);
 exit:
@@ -491,6 +515,9 @@ static int as4610_54_cpld_remove(struct i2c_client *client)
 {
     struct as4610_54_cpld_data *data = i2c_get_clientdata(client);
 
+    if (data->fan_pdev)
+	    platform_device_unregister(data->fan_pdev);
+
     as4610_54_cpld_remove_client(client);
 
     /* Remove sysfs hooks */
diff --git a/packages/platforms/accton/armxx/arm-accton-as4610/modules/accton_as4610_fan.c b/packages/platforms/accton/armxx/arm-accton-as4610/modules/accton_as4610_fan.c
index fe78e0440eb3..74ff7fd68530 100644
--- a/packages/platforms/accton/armxx/arm-accton-as4610/modules/accton_as4610_fan.c
+++ b/packages/platforms/accton/armxx/arm-accton-as4610/modules/accton_as4610_fan.c
@@ -255,11 +255,19 @@ static int as4610_fan_probe(struct platform_device *pdev)
 {
 	int status = -1;
 
+	fan_data = kzalloc(sizeof(struct as4610_fan_data), GFP_KERNEL);
+	if (!fan_data) {
+		status = -ENOMEM;
+		goto exit;
+	}
+
+	mutex_init(&fan_data->update_lock);
+	fan_data->valid = 0;
+
 	/* Register sysfs hooks */
 	status = sysfs_create_group(&pdev->dev.kobj, &as4610_fan_group);
 	if (status) {
-		goto exit;
-
+		goto exit_free;
 	}
 
 	fan_data->hwmon_dev = hwmon_device_register(&pdev->dev);
@@ -274,6 +282,8 @@ static int as4610_fan_probe(struct platform_device *pdev)
 
 exit_remove:
 	sysfs_remove_group(&pdev->dev.kobj, &as4610_fan_group);
+exit_free:
+	kfree(fan_data);
 exit:
 	return status;
 }
@@ -283,6 +293,8 @@ static int as4610_fan_remove(struct platform_device *pdev)
 	hwmon_device_unregister(fan_data->hwmon_dev);
 	sysfs_remove_group(&pdev->dev.kobj, &as4610_fan_group);
 
+	kfree(fan_data);
+
 	return 0;
 }
 
@@ -301,75 +313,7 @@ static struct platform_driver as4610_fan_driver = {
 	},
 };
 
-static int as4610_number_of_system_fan(void)
-{
-	int nFan = 0;
-	int pid = as4610_product_id();
-
-	switch (pid) {
-	case PID_AS4610_30P:
-	case PID_AS4610_54P:
-		nFan = 1;
-		break;
-	case PID_AS4610_54T_B:
-		nFan = 2;
-		break;
-	default:
-		nFan = 0;
-		break;
-	}
-
-	return nFan;
-}
-
-static int __init as4610_fan_init(void)
-{
-	int ret;
-
-	if (as4610_number_of_system_fan() == 0) {
-		return 0;
-	}
-
-	ret = platform_driver_register(&as4610_fan_driver);
-	if (ret < 0) {
-		goto exit;
-	}
-
-	fan_data = kzalloc(sizeof(struct as4610_fan_data), GFP_KERNEL);
-	if (!fan_data) {
-		ret = -ENOMEM;
-		platform_driver_unregister(&as4610_fan_driver);
-		goto exit;
-	}
-
-	mutex_init(&fan_data->update_lock);
-	fan_data->valid = 0;
-
-	fan_data->pdev = platform_device_register_simple(DRVNAME, -1, NULL, 0);
-	if (IS_ERR(fan_data->pdev)) {
-		ret = PTR_ERR(fan_data->pdev);
-		platform_driver_unregister(&as4610_fan_driver);
-		kfree(fan_data);
-		goto exit;
-	}
-
-exit:
-	return ret;
-}
-
-static void __exit as4610_fan_exit(void)
-{
-	if (!fan_data) {
-		return;
-	}
-
-	platform_device_unregister(fan_data->pdev);
-	platform_driver_unregister(&as4610_fan_driver);
-	kfree(fan_data);
-}
-
-late_initcall(as4610_fan_init);
-module_exit(as4610_fan_exit);
+module_platform_driver(as4610_fan_driver);
 
 MODULE_AUTHOR("Brandon Chuang <brandon_chuang@accton.com.tw>");
 MODULE_DESCRIPTION("as4610_fan driver");
-- 
2.42.0

