From aa73d83e6046d67680774c4ced8d4ea7e2790cfa Mon Sep 17 00:00:00 2001
From: Jonas Gorski <jonas.gorski@bisdn.de>
Date: Fri, 26 Aug 2022 14:26:51 +0200
Subject: [PATCH 8/8] accton-as4610: let CPLD handle the LED device

The LED device directly depends on the CPLD device, so let it be created
by the CPLD driver. This allows us to convert the LED driver to a simple
platform driver.

Upstream-Status: Unsubmitted
Signed-off-by: Jonas Gorski <jonas.gorski@bisdn.de>
---
 .../modules/accton_as4610_cpld.c              | 20 ++++-
 .../modules/accton_as4610_leds.c              | 77 ++++++-------------
 2 files changed, 43 insertions(+), 54 deletions(-)

diff --git a/packages/platforms/accton/armxx/arm-accton-as4610/modules/accton_as4610_cpld.c b/packages/platforms/accton/armxx/arm-accton-as4610/modules/accton_as4610_cpld.c
index ed36e041e7f0..d5a400075481 100644
--- a/packages/platforms/accton/armxx/arm-accton-as4610/modules/accton_as4610_cpld.c
+++ b/packages/platforms/accton/armxx/arm-accton-as4610/modules/accton_as4610_cpld.c
@@ -67,6 +67,7 @@ struct as4610_54_cpld_data {
     enum cpld_type   type;
     struct device   *hwmon_dev;
     struct platform_device *fan_pdev;
+    struct platform_device *led_pdev;
     struct mutex     update_lock;
 };
 
@@ -461,6 +462,7 @@ static int as4610_54_cpld_probe(struct i2c_client *client,
 	struct i2c_adapter *adap = to_i2c_adapter(client->dev.parent);
 	struct as4610_54_cpld_data *data;
 	int ret = -ENODEV;
+	int pid;
 
 	if (!i2c_check_functionality(adap, I2C_FUNC_SMBUS_BYTE))
 		goto exit;
@@ -484,7 +486,9 @@ static int as4610_54_cpld_probe(struct i2c_client *client,
 
     as4610_54_cpld_add_client(client);
 
-    switch (as4610_product_id()) {
+    pid = as4610_product_id();
+
+    switch (pid) {
     case PID_AS4610_30P:
     case PID_AS4610_54P:
     case PID_AS4610_54T_B:
@@ -499,8 +503,19 @@ static int as4610_54_cpld_probe(struct i2c_client *client,
 	    break;
     }
 
+    if (pid != PID_UNKNOWN) {
+	data->led_pdev = platform_device_register_simple("as4610_led", -1, NULL, 0);
+	    if (IS_ERR(data->led_pdev)) {
+		    ret = PTR_ERR(data->led_pdev);
+		    goto exit_unregister_fan;
+	    }
+    }
+
     return 0;
 
+exit_unregister_fan:
+    platform_device_unregister(data->fan_pdev);
+
 exit_unregister:
     as4610_54_cpld_remove_client(client);
     /* Remove sysfs hooks */
@@ -515,6 +530,9 @@ static int as4610_54_cpld_remove(struct i2c_client *client)
 {
     struct as4610_54_cpld_data *data = i2c_get_clientdata(client);
 
+    if (data->led_pdev)
+	    platform_device_unregister(data->led_pdev);
+
     if (data->fan_pdev)
 	    platform_device_unregister(data->fan_pdev);
 
diff --git a/packages/platforms/accton/armxx/arm-accton-as4610/modules/accton_as4610_leds.c b/packages/platforms/accton/armxx/arm-accton-as4610/modules/accton_as4610_leds.c
index 5771b0a55c1a..cb3859c1fabc 100644
--- a/packages/platforms/accton/armxx/arm-accton-as4610/modules/accton_as4610_leds.c
+++ b/packages/platforms/accton/armxx/arm-accton-as4610/modules/accton_as4610_leds.c
@@ -22,6 +22,7 @@
 /*#define DEBUG*/
 
 #include <linux/module.h>
+#include <linux/mod_devicetable.h>
 #include <linux/kernel.h>
 #include <linux/init.h>
 #include <linux/platform_device.h>
@@ -575,6 +576,19 @@ static int as4610_led_probe(struct platform_device *pdev)
 {
 	int ret = 0, i;
 
+	int pid = as4610_product_id();
+	if (pid == PID_UNKNOWN) {
+		return -ENODEV;
+	}
+
+	ledctl = kzalloc(sizeof(struct as4610_led_data), GFP_KERNEL);
+	if (!ledctl) {
+		return -ENOMEM;
+	}
+
+	ledctl->led_map = as4610_ledmaps[pid];
+	mutex_init(&ledctl->update_lock);
+
 	for (i = 0; i < NUM_OF_LED; i++) {
 		if (!(ledctl->led_map & BIT(i))) {
 			continue;
@@ -597,6 +611,7 @@ error:
 
 		led_classdev_unregister(&as4610_leds[i]);
 	}
+	kfree(ledctl);
 
 	return ret;
 }
@@ -612,72 +627,28 @@ static int as4610_led_remove(struct platform_device *pdev)
 
 		led_classdev_unregister(&as4610_leds[i]);
 	}
+	kfree(ledctl);
 
 	return 0;
 }
 
+static const struct platform_device_id as4610_led_id[] = {
+	{ "as4610_led", 0 },
+	{}
+};
+MODULE_DEVICE_TABLE(platform, as4610_led_id);
+
 static struct platform_driver as4610_led_driver = {
 	.probe		= as4610_led_probe,
 	.remove		= as4610_led_remove,
+	.id_table	= as4610_led_id,
 	.driver		= {
 	.name	= DRVNAME,
 	.owner	= THIS_MODULE,
 	},
 };
 
-static int __init as4610_led_init(void)
-{
-	int ret, pid;
-
-	if (as4610_product_id() == PID_UNKNOWN) {
-		return -ENODEV;
-	}
-
-	ret = platform_driver_register(&as4610_led_driver);
-	if (ret < 0) {
-		goto exit;
-	}
-
-	ledctl = kzalloc(sizeof(struct as4610_led_data), GFP_KERNEL);
-	if (!ledctl) {
-		ret = -ENOMEM;
-		platform_driver_unregister(&as4610_led_driver);
-		goto exit;
-	}
-
-	pid = as4610_product_id();
-	if (pid == PID_UNKNOWN) {
-		return -ENODEV;
-	}
-
-	ledctl->led_map = as4610_ledmaps[pid];
-	mutex_init(&ledctl->update_lock);
-
-	ledctl->pdev = platform_device_register_simple(DRVNAME, -1, NULL, 0);
-	if (IS_ERR(ledctl->pdev)) {
-		ret = PTR_ERR(ledctl->pdev);
-		platform_driver_unregister(&as4610_led_driver);
-		kfree(ledctl);
-		goto exit;
-	}
-
-exit:
-	return ret;
-}
-
-static void __exit as4610_led_exit(void)
-{
-	if (!ledctl) {
-		return;
-	}
-
-	platform_device_unregister(ledctl->pdev);
-	platform_driver_unregister(&as4610_led_driver);
-	kfree(ledctl);
-}
-
-late_initcall(as4610_led_init);
-module_exit(as4610_led_exit);
+module_platform_driver(as4610_led_driver);
 
 MODULE_AUTHOR("Brandon Chuang <brandon_chuang@accton.com.tw>");
 MODULE_DESCRIPTION("as4610_led driver");
-- 
2.42.0

