From 851111373c635111686703a5355760287425ca8e Mon Sep 17 00:00:00 2001
From: Jonas Gorski <jonas.gorski@bisdn.de>
Date: Tue, 18 Feb 2025 21:32:39 +0100
Subject: [PATCH 19/20] modules: update i2c_mux_add_adapter() usage for 6.10

Update i2c_mux_add_adapter() usage for 6.10 which lost its last
paramter.

// <smpl>
@r@
expression R,E1,E2,E3,E4;
position p;
@@
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,10,0)
+R = i2c_mux_add_adapter(E1, E2, E3);
+#else
 R = i2c_mux_add_adapter(E1, E2, E3, E4);
+#endif
@i depends on r@
@@
 #include <linux/version.h>
@depends on r && !i@
@@
 #include <...>
+#include <linux/version.h>
// </smpl>

applied with

  spatch --sp-file 6.10-i2c_mux_add_adapter.cocci --in-place --dir packages/

Result taken as is, without any code style fixes.

Upstream-Status: Inactive-Upstream [lastcommit: 2024-09-21]
Signed-off-by: Jonas Gorski <jonas.gorski@bisdn.de>
---
 .../modules/builds/x86-64-accton-as5712-54x-cpld.c   |  4 ++++
 .../modules/builds/x86-64-accton-as5812-54x-cpld.c   |  4 ++++
 .../modules/builds/x86-64-accton-as5915-18x-fpga.c   |  4 ++++
 .../modules/builds/x86-64-accton-as6712-32x-cpld.c   |  4 ++++
 .../modules/builds/x86-64-accton-as6812-32x-cpld.c   |  4 ++++
 .../modules/builds/x86-64-accton-as7315-27xb-cpld.c  |  4 ++++
 .../modules/builds/x86-64-accton-as7315-30x-fpga.c   |  4 ++++
 .../src/modules/x86-64-accton-as9817-64-mux.c        |  4 ++++
 .../src/modules/x86-64-accton-as9817-64-mux.c        |  4 ++++
 .../modules/builds/snj60d0-320f_i2c_mux_cpld.c       |  4 ++++
 .../builds/x86-64-delta-ag8032-i2c-mux-cpld.c        |  4 ++++
 .../modules/builds/delta_ag9032v2a_platform.c        |  8 ++++++++
 .../modules/builds/src/delta_ag9064_platform.c       |  4 ++++
 .../modules/builds/delta_agc7646slv1b_platform.c     | 12 ++++++++++++
 .../modules/builds/delta_agc7646v1_platform.c        | 12 ++++++++++++
 .../modules/builds/delta_agc7648sv1_platform.c       |  8 ++++++++
 .../d6356/modules/builds/src/inv-i2c-mux-pca9641.c   |  4 ++++
 .../d7332/modules/builds/src/inv-i2c-mux-pca9641.c   |  4 ++++
 .../modules/builds/src/net-i2c-mux-pca9641.c         |  4 ++++
 19 files changed, 100 insertions(+)

diff --git a/packages/platforms/accton/x86-64/as5712-54x/modules/builds/x86-64-accton-as5712-54x-cpld.c b/packages/platforms/accton/x86-64/as5712-54x/modules/builds/x86-64-accton-as5712-54x-cpld.c
index 2346a0b3457f..1909ca2459e6 100644
--- a/packages/platforms/accton/x86-64/as5712-54x/modules/builds/x86-64-accton-as5712-54x-cpld.c
+++ b/packages/platforms/accton/x86-64/as5712-54x/modules/builds/x86-64-accton-as5712-54x-cpld.c
@@ -1072,7 +1072,11 @@ static int as5712_54x_cpld_mux_probe(struct i2c_client *client,
 		force = 0;			  /* dynamic adap number */
 		class = 0;			  /* no class by default */
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,10,0)
+		ret = i2c_mux_add_adapter(muxc, force, num);
+#else
 		ret = i2c_mux_add_adapter(muxc, force, num, class);
+#endif
 
 		if (ret) {
 			dev_err(&client->dev,
diff --git a/packages/platforms/accton/x86-64/as5812-54x/modules/builds/x86-64-accton-as5812-54x-cpld.c b/packages/platforms/accton/x86-64/as5812-54x/modules/builds/x86-64-accton-as5812-54x-cpld.c
index bbe02a6be72e..ef2309d23f23 100644
--- a/packages/platforms/accton/x86-64/as5812-54x/modules/builds/x86-64-accton-as5812-54x-cpld.c
+++ b/packages/platforms/accton/x86-64/as5812-54x/modules/builds/x86-64-accton-as5812-54x-cpld.c
@@ -1073,7 +1073,11 @@ static int as5812_54x_cpld_mux_probe(struct i2c_client *client,
 		force = 0;			  /* dynamic adap number */
 		class = 0;			  /* no class by default */
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,10,0)
+		ret = i2c_mux_add_adapter(muxc, force, num);
+#else
 		ret = i2c_mux_add_adapter(muxc, force, num, class);
+#endif
 
 		if (ret) {
 			dev_err(&client->dev,
diff --git a/packages/platforms/accton/x86-64/as5915-18x/modules/builds/x86-64-accton-as5915-18x-fpga.c b/packages/platforms/accton/x86-64/as5915-18x/modules/builds/x86-64-accton-as5915-18x-fpga.c
index 3a1bcc499822..642a694526a9 100644
--- a/packages/platforms/accton/x86-64/as5915-18x/modules/builds/x86-64-accton-as5915-18x-fpga.c
+++ b/packages/platforms/accton/x86-64/as5915-18x/modules/builds/x86-64-accton-as5915-18x-fpga.c
@@ -300,7 +300,11 @@ static int as5915_18x_fpga_mux_probe(struct i2c_client *client,
         force = 0;              /* dynamic adap number */
         class = 0;              /* no class by default */
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,10,0)
+        ret = i2c_mux_add_adapter(muxc, force, num);
+#else
         ret = i2c_mux_add_adapter(muxc, force, num, class);
+#endif
 
         if (ret) {
             dev_err(&client->dev,
diff --git a/packages/platforms/accton/x86-64/as6712-32x/modules/builds/x86-64-accton-as6712-32x-cpld.c b/packages/platforms/accton/x86-64/as6712-32x/modules/builds/x86-64-accton-as6712-32x-cpld.c
index cfabe9668ad0..fe22ed3c39b4 100644
--- a/packages/platforms/accton/x86-64/as6712-32x/modules/builds/x86-64-accton-as6712-32x-cpld.c
+++ b/packages/platforms/accton/x86-64/as6712-32x/modules/builds/x86-64-accton-as6712-32x-cpld.c
@@ -523,7 +523,11 @@ static int as6712_32x_cpld_mux_probe(struct i2c_client *client,
 		force = 0;			  /* dynamic adap number */
 		class = 0;			  /* no class by default */
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,10,0)
+		ret = i2c_mux_add_adapter(muxc, force, num);
+#else
 		ret = i2c_mux_add_adapter(muxc, force, num, class);
+#endif
 
 		if (ret) {
 			dev_err(&client->dev,
diff --git a/packages/platforms/accton/x86-64/as6812-32x/modules/builds/x86-64-accton-as6812-32x-cpld.c b/packages/platforms/accton/x86-64/as6812-32x/modules/builds/x86-64-accton-as6812-32x-cpld.c
index 8a228f8a88cd..b8dd210881a1 100644
--- a/packages/platforms/accton/x86-64/as6812-32x/modules/builds/x86-64-accton-as6812-32x-cpld.c
+++ b/packages/platforms/accton/x86-64/as6812-32x/modules/builds/x86-64-accton-as6812-32x-cpld.c
@@ -524,7 +524,11 @@ static int as6812_32x_cpld_mux_probe(struct i2c_client *client,
 		force = 0;			  /* dynamic adap number */
 		class = 0;			  /* no class by default */
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,10,0)
+		ret = i2c_mux_add_adapter(muxc, force, num);
+#else
 		ret = i2c_mux_add_adapter(muxc, force, num, class);
+#endif
 
 		if (ret) {
 			dev_err(&client->dev,
diff --git a/packages/platforms/accton/x86-64/as7315-27xb/modules/builds/x86-64-accton-as7315-27xb-cpld.c b/packages/platforms/accton/x86-64/as7315-27xb/modules/builds/x86-64-accton-as7315-27xb-cpld.c
index 66178761752b..9d909a49b5fa 100755
--- a/packages/platforms/accton/x86-64/as7315-27xb/modules/builds/x86-64-accton-as7315-27xb-cpld.c
+++ b/packages/platforms/accton/x86-64/as7315-27xb/modules/builds/x86-64-accton-as7315-27xb-cpld.c
@@ -875,7 +875,11 @@ static int _add_mux_channels(struct i2c_client *client,
     for (num = 0; num < chips[model].nchans; num++) {
         force = 0;			  /* dynamic adap number */
         class = 0;			  /* no class by default */
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,10,0)
+        status = i2c_mux_add_adapter(muxc, force, num);
+#else
         status = i2c_mux_add_adapter(muxc, force, num, class);
+#endif
         if (status)
             return status ;
     }
diff --git a/packages/platforms/accton/x86-64/as7315-30x/modules/builds/x86-64-accton-as7315-30x-fpga.c b/packages/platforms/accton/x86-64/as7315-30x/modules/builds/x86-64-accton-as7315-30x-fpga.c
index 36ccc25fa173..906cabcc5657 100644
--- a/packages/platforms/accton/x86-64/as7315-30x/modules/builds/x86-64-accton-as7315-30x-fpga.c
+++ b/packages/platforms/accton/x86-64/as7315-30x/modules/builds/x86-64-accton-as7315-30x-fpga.c
@@ -483,7 +483,11 @@ static int as7315_30x_fpga_mux_probe(struct i2c_client *client,
 		force = 0;			  /* dynamic adap number */
 		class = 0;			  /* no class by default */
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,10,0)
+		ret = i2c_mux_add_adapter(muxc, force, num);
+#else
 		ret = i2c_mux_add_adapter(muxc, force, num, class);
+#endif
 
 		if (ret) {
 			dev_err(&client->dev,
diff --git a/packages/platforms/accton/x86-64/as9817-64-nb/src/modules/x86-64-accton-as9817-64-mux.c b/packages/platforms/accton/x86-64/as9817-64-nb/src/modules/x86-64-accton-as9817-64-mux.c
index abcebc344620..1ad81f36c62a 100644
--- a/packages/platforms/accton/x86-64/as9817-64-nb/src/modules/x86-64-accton-as9817-64-mux.c
+++ b/packages/platforms/accton/x86-64/as9817-64-nb/src/modules/x86-64-accton-as9817-64-mux.c
@@ -166,7 +166,11 @@ static int as9817_64_mux_probe(struct i2c_client *client,
 
 	/* Now create an adapter for each channel */
 	for (i = 0; i < chips[data->type].nchans; i++) {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,10,0)
+		ret = i2c_mux_add_adapter(muxc, 0, i);
+#else
 		ret = i2c_mux_add_adapter(muxc, 0, i, 0);
+#endif
 		if (ret)
 			goto exit_mux;
 	}
diff --git a/packages/platforms/accton/x86-64/as9817-64/src/modules/x86-64-accton-as9817-64-mux.c b/packages/platforms/accton/x86-64/as9817-64/src/modules/x86-64-accton-as9817-64-mux.c
index 674ae9df44b9..20ef76d511d6 100644
--- a/packages/platforms/accton/x86-64/as9817-64/src/modules/x86-64-accton-as9817-64-mux.c
+++ b/packages/platforms/accton/x86-64/as9817-64/src/modules/x86-64-accton-as9817-64-mux.c
@@ -160,7 +160,11 @@ static int as9817_64_mux_probe(struct i2c_client *client,
 
 	/* Now create an adapter for each channel */
 	for (i = 0; i < chips[data->type].nchans; i++) {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,10,0)
+		ret = i2c_mux_add_adapter(muxc, 0, i);
+#else
 		ret = i2c_mux_add_adapter(muxc, 0, i, 0);
+#endif
 		if (ret)
 			goto exit_mux;
 	}
diff --git a/packages/platforms/alphanetworks/x86-64/snj60d0-320f/modules/builds/snj60d0-320f_i2c_mux_cpld.c b/packages/platforms/alphanetworks/x86-64/snj60d0-320f/modules/builds/snj60d0-320f_i2c_mux_cpld.c
index 9a3840cb6853..e312dff0eb9d 100644
--- a/packages/platforms/alphanetworks/x86-64/snj60d0-320f/modules/builds/snj60d0-320f_i2c_mux_cpld.c
+++ b/packages/platforms/alphanetworks/x86-64/snj60d0-320f/modules/builds/snj60d0-320f_i2c_mux_cpld.c
@@ -1094,7 +1094,11 @@ static int snj60d0_320f_cpld_mux_probe(struct i2c_client *client,
         force = 0;              /* dynamic adap number */
         class = 0;              /* no class by default */
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,10,0)
+        ret = i2c_mux_add_adapter(muxc, force, num);
+#else
         ret = i2c_mux_add_adapter(muxc, force, num, class);
+#endif
 
         if (ret) {
             dev_err(&client->dev,
diff --git a/packages/platforms/delta/x86-64/ag8032/modules/builds/x86-64-delta-ag8032-i2c-mux-cpld.c b/packages/platforms/delta/x86-64/ag8032/modules/builds/x86-64-delta-ag8032-i2c-mux-cpld.c
index a0ad8bd4851f..d553217750f3 100644
--- a/packages/platforms/delta/x86-64/ag8032/modules/builds/x86-64-delta-ag8032-i2c-mux-cpld.c
+++ b/packages/platforms/delta/x86-64/ag8032/modules/builds/x86-64-delta-ag8032-i2c-mux-cpld.c
@@ -157,7 +157,11 @@ static int i2c_mux_cpld_probe(struct platform_device *pdev)
 	for (i = 0; i < mux->data.n_values; i++) {
 		nr = mux->data.base_nr ? (mux->data.base_nr + i) : 0;
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,10,0)
+		ret = i2c_mux_add_adapter(muxc, nr, mux->data.values[i]);
+#else
 		ret = i2c_mux_add_adapter (muxc, nr, mux->data.values[i], 0);
+#endif
 		if (ret) {
 			dev_err(&pdev->dev, "Failed to add adapter %d\n", i);
 			goto add_adapter_failed;
diff --git a/packages/platforms/delta/x86-64/ag9032v2a/modules/builds/delta_ag9032v2a_platform.c b/packages/platforms/delta/x86-64/ag9032v2a/modules/builds/delta_ag9032v2a_platform.c
index 0deb0a9f7579..cddd70850edc 100644
--- a/packages/platforms/delta/x86-64/ag9032v2a/modules/builds/delta_ag9032v2a_platform.c
+++ b/packages/platforms/delta/x86-64/ag9032v2a/modules/builds/delta_ag9032v2a_platform.c
@@ -2018,7 +2018,11 @@ static int __init cpld_mux_probe(struct platform_device *pdev)
     {
         int nr = pdata->base_nr + i;
         unsigned int class = 0;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,10,0)
+        ret = i2c_mux_add_adapter(muxc, nr, i);
+#else
         ret = i2c_mux_add_adapter(muxc, nr, i, class);
+#endif
         if (ret) {
             dev_err(&pdev->dev, "Failed to add adapter %d\n", i);
             goto add_adapter_failed;
@@ -2084,7 +2088,11 @@ static int __init swpld_mux_probe(struct platform_device *pdev)
     {
         int nr = pdata->base_nr + i;
         unsigned int class = 0;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,10,0)
+       	ret = i2c_mux_add_adapter(muxc, nr, i);
+#else
        	ret = i2c_mux_add_adapter(muxc, nr, i, class);
+#endif
         if (ret) {
             dev_err(&pdev->dev, "Failed to add adapter %d\n", i);
             goto add_adapter_failed;
diff --git a/packages/platforms/delta/x86-64/ag9064/modules/builds/src/delta_ag9064_platform.c b/packages/platforms/delta/x86-64/ag9064/modules/builds/src/delta_ag9064_platform.c
index 5f633cd50c48..42ecc1787bf4 100755
--- a/packages/platforms/delta/x86-64/ag9064/modules/builds/src/delta_ag9064_platform.c
+++ b/packages/platforms/delta/x86-64/ag9064/modules/builds/src/delta_ag9064_platform.c
@@ -806,7 +806,11 @@ static int __init swpld_mux_probe(struct platform_device *pdev)
     {
         int nr = pdata->base_nr + i;
         unsigned int class = 0;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,10,0)
+        ret = i2c_mux_add_adapter(muxc, nr, i);
+#else
         ret = i2c_mux_add_adapter(muxc, nr, i, class);
+#endif
         if (ret) {
             dev_err(&pdev->dev, "Failed to add adapter %d\n", i);
             goto add_adapter_failed;
diff --git a/packages/platforms/delta/x86-64/agc7646slv1b/modules/builds/delta_agc7646slv1b_platform.c b/packages/platforms/delta/x86-64/agc7646slv1b/modules/builds/delta_agc7646slv1b_platform.c
index 69a8b16271aa..9c95ad9cbaf7 100755
--- a/packages/platforms/delta/x86-64/agc7646slv1b/modules/builds/delta_agc7646slv1b_platform.c
+++ b/packages/platforms/delta/x86-64/agc7646slv1b/modules/builds/delta_agc7646slv1b_platform.c
@@ -2960,7 +2960,11 @@ static int __init cpld_mux_probe(struct platform_device *pdev)
     {
         int nr = pdata->base_nr + i;
         unsigned int class = 0;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,10,0)
+        ret = i2c_mux_add_adapter(muxc, nr, i);
+#else
         ret = i2c_mux_add_adapter(muxc, nr, i, class);
+#endif
         if (ret) {
             dev_err(&pdev->dev, "Failed to add adapter %d\n", i);
             goto add_adapter_failed;
@@ -3026,7 +3030,11 @@ static int __init swpld1_mux_probe(struct platform_device *pdev)
     {
         int nr = pdata->base_nr + i;
         unsigned int class = 0;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,10,0)
+        ret = i2c_mux_add_adapter(muxc, nr, i);
+#else
         ret = i2c_mux_add_adapter(muxc, nr, i, class);
+#endif
         if (ret) {
             dev_err(&pdev->dev, "Failed to add adapter %d\n", i);
             goto add_adapter_failed;
@@ -3093,7 +3101,11 @@ static int __init swpld3_mux_probe(struct platform_device *pdev)
     {
         int nr = pdata->base_nr + i;
         unsigned int class = 0;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,10,0)
+        ret = i2c_mux_add_adapter(muxc, nr, i);
+#else
         ret = i2c_mux_add_adapter(muxc, nr, i, class);
+#endif
         if (ret) {
             dev_err(&pdev->dev, "Failed to add adapter %d\n", i);
             goto add_adapter_failed;
diff --git a/packages/platforms/delta/x86-64/agc7646v1/modules/builds/delta_agc7646v1_platform.c b/packages/platforms/delta/x86-64/agc7646v1/modules/builds/delta_agc7646v1_platform.c
index ee99dce3509a..8b5688e0af66 100755
--- a/packages/platforms/delta/x86-64/agc7646v1/modules/builds/delta_agc7646v1_platform.c
+++ b/packages/platforms/delta/x86-64/agc7646v1/modules/builds/delta_agc7646v1_platform.c
@@ -2960,7 +2960,11 @@ static int __init cpld_mux_probe(struct platform_device *pdev)
     {
         int nr = pdata->base_nr + i;
         unsigned int class = 0;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,10,0)
+        ret = i2c_mux_add_adapter(muxc, nr, i);
+#else
         ret = i2c_mux_add_adapter(muxc, nr, i, class);
+#endif
         if (ret) {
             dev_err(&pdev->dev, "Failed to add adapter %d\n", i);
             goto add_adapter_failed;
@@ -3026,7 +3030,11 @@ static int __init swpld1_mux_probe(struct platform_device *pdev)
     {
         int nr = pdata->base_nr + i;
         unsigned int class = 0;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,10,0)
+        ret = i2c_mux_add_adapter(muxc, nr, i);
+#else
         ret = i2c_mux_add_adapter(muxc, nr, i, class);
+#endif
         if (ret) {
             dev_err(&pdev->dev, "Failed to add adapter %d\n", i);
             goto add_adapter_failed;
@@ -3093,7 +3101,11 @@ static int __init swpld3_mux_probe(struct platform_device *pdev)
     {
         int nr = pdata->base_nr + i;
         unsigned int class = 0;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,10,0)
+        ret = i2c_mux_add_adapter(muxc, nr, i);
+#else
         ret = i2c_mux_add_adapter(muxc, nr, i, class);
+#endif
         if (ret) {
             dev_err(&pdev->dev, "Failed to add adapter %d\n", i);
             goto add_adapter_failed;
diff --git a/packages/platforms/delta/x86-64/agc7648sv1/modules/builds/delta_agc7648sv1_platform.c b/packages/platforms/delta/x86-64/agc7648sv1/modules/builds/delta_agc7648sv1_platform.c
index c3d0c5423ed3..3b3dd00484e4 100755
--- a/packages/platforms/delta/x86-64/agc7648sv1/modules/builds/delta_agc7648sv1_platform.c
+++ b/packages/platforms/delta/x86-64/agc7648sv1/modules/builds/delta_agc7648sv1_platform.c
@@ -1472,7 +1472,11 @@ static int __init cpld_mux_probe(struct platform_device *pdev)
     {
         int nr = pdata->base_nr + i;
         unsigned int class = 0;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,10,0)
+        ret = i2c_mux_add_adapter(muxc, nr, i);
+#else
         ret = i2c_mux_add_adapter(muxc, nr, i, class);
+#endif
         if (ret) {
             dev_err(&pdev->dev, "Failed to add adapter %d\n", i);
             goto add_adapter_failed;
@@ -1538,7 +1542,11 @@ static int __init swpld3_mux_probe(struct platform_device *pdev)
     {
         int nr = pdata->base_nr + i;
         unsigned int class = 0;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,10,0)
+        ret = i2c_mux_add_adapter(muxc, nr, i);
+#else
         ret = i2c_mux_add_adapter(muxc, nr, i, class);
+#endif
         if (ret) {
             dev_err(&pdev->dev, "Failed to add adapter %d\n", i);
             goto add_adapter_failed;
diff --git a/packages/platforms/inventec/x86-64/d6356/modules/builds/src/inv-i2c-mux-pca9641.c b/packages/platforms/inventec/x86-64/d6356/modules/builds/src/inv-i2c-mux-pca9641.c
index 0a86a5d05002..4db7c84fc10e 100644
--- a/packages/platforms/inventec/x86-64/d6356/modules/builds/src/inv-i2c-mux-pca9641.c
+++ b/packages/platforms/inventec/x86-64/d6356/modules/builds/src/inv-i2c-mux-pca9641.c
@@ -537,7 +537,11 @@ static int pca9641_probe(struct i2c_client *client,
 
 	i2c_set_clientdata(client, muxc);
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,10,0)
+	ret = i2c_mux_add_adapter(muxc, force, 0);
+#else
 	ret = i2c_mux_add_adapter(muxc, force, 0, 0);
+#endif
 	if (ret) {
 		dev_err(&client->dev, "failed to register master selector\n");
 		return ret;
diff --git a/packages/platforms/inventec/x86-64/d7332/modules/builds/src/inv-i2c-mux-pca9641.c b/packages/platforms/inventec/x86-64/d7332/modules/builds/src/inv-i2c-mux-pca9641.c
index 0a86a5d05002..4db7c84fc10e 100644
--- a/packages/platforms/inventec/x86-64/d7332/modules/builds/src/inv-i2c-mux-pca9641.c
+++ b/packages/platforms/inventec/x86-64/d7332/modules/builds/src/inv-i2c-mux-pca9641.c
@@ -537,7 +537,11 @@ static int pca9641_probe(struct i2c_client *client,
 
 	i2c_set_clientdata(client, muxc);
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,10,0)
+	ret = i2c_mux_add_adapter(muxc, force, 0);
+#else
 	ret = i2c_mux_add_adapter(muxc, force, 0, 0);
+#endif
 	if (ret) {
 		dev_err(&client->dev, "failed to register master selector\n");
 		return ret;
diff --git a/packages/platforms/netberg/x86-64/aurora-820/modules/builds/src/net-i2c-mux-pca9641.c b/packages/platforms/netberg/x86-64/aurora-820/modules/builds/src/net-i2c-mux-pca9641.c
index 0a86a5d05002..4db7c84fc10e 100644
--- a/packages/platforms/netberg/x86-64/aurora-820/modules/builds/src/net-i2c-mux-pca9641.c
+++ b/packages/platforms/netberg/x86-64/aurora-820/modules/builds/src/net-i2c-mux-pca9641.c
@@ -537,7 +537,11 @@ static int pca9641_probe(struct i2c_client *client,
 
 	i2c_set_clientdata(client, muxc);
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,10,0)
+	ret = i2c_mux_add_adapter(muxc, force, 0);
+#else
 	ret = i2c_mux_add_adapter(muxc, force, 0, 0);
+#endif
 	if (ret) {
 		dev_err(&client->dev, "failed to register master selector\n");
 		return ret;
-- 
2.51.0

