Upstream-Status: Submitted [https://github.com/opencomputeproject/OpenNetworkLinux/pull/862]

From b0acedd32916464e57cbb23ed7c00ce7e4f920bf Mon Sep 17 00:00:00 2001
From: Jostar Yang <jostar_yang@accton.com.tw>
Date: Tue, 9 Nov 2021 17:55:55 +0800
Subject: [PATCH 2/3] Add rest/lpmode code to sfpi_control set/get api

Signed-off-by: Jostar Yang <jostar_yang@accton.com.tw>
---
 .../builds/x86-64-accton-as4630-54pe-psu.c    |   8 +-
 .../module/src/sfpi.c                         | 152 ++++++++++--------
 2 files changed, 94 insertions(+), 66 deletions(-)

diff --git a/packages/platforms/accton/x86-64/as4630-54pe/modules/builds/x86-64-accton-as4630-54pe-psu.c b/packages/platforms/accton/x86-64/as4630-54pe/modules/builds/x86-64-accton-as4630-54pe-psu.c
index 45ae898c..73f1e672 100755
--- a/packages/platforms/accton/x86-64/as4630-54pe/modules/builds/x86-64-accton-as4630-54pe-psu.c
+++ b/packages/platforms/accton/x86-64/as4630-54pe/modules/builds/x86-64-accton-as4630-54pe-psu.c
@@ -286,8 +286,12 @@ static struct as4630_54pe_psu_data *as4630_54pe_psu_update_device(struct device
         /* Read model name */
         memset(data->model_name, 0, sizeof(data->model_name));
         memset(data->serial_number, 0, sizeof(data->serial_number));
-        power_good = (data->status >> (3-data->index) & 0x1);
-       
+        
+        if(data->index==0)
+           power_good = ( (data->status >> 6) & 0x1);
+        else
+           power_good = ( (data->status >> 2) & 0x1); 
+
         if (power_good) {
             status = as4630_54pe_psu_read_block(client, 0x20, data->model_name,
                                                ARRAY_SIZE(data->model_name)-1);                                               
diff --git a/packages/platforms/accton/x86-64/as4630-54pe/onlp/builds/x86_64_accton_as4630_54pe/module/src/sfpi.c b/packages/platforms/accton/x86-64/as4630-54pe/onlp/builds/x86_64_accton_as4630_54pe/module/src/sfpi.c
index 1b9d16cf..54e9aaff 100755
--- a/packages/platforms/accton/x86-64/as4630-54pe/onlp/builds/x86_64_accton_as4630_54pe/module/src/sfpi.c
+++ b/packages/platforms/accton/x86-64/as4630-54pe/onlp/builds/x86_64_accton_as4630_54pe/module/src/sfpi.c
@@ -34,6 +34,8 @@
 #define MODULE_RXLOS_FORMAT             "/sys/bus/i2c/devices/%d-00%d/module_rx_los_%d"
 #define MODULE_TXFAULT_FORMAT           "/sys/bus/i2c/devices/%d-00%d/module_tx_fault_%d"
 #define MODULE_TXDISABLE_FORMAT         "/sys/bus/i2c/devices/%d-00%d/module_tx_disable_%d"
+#define MODULE_RESET_FORMAT             "/sys/bus/i2c/devices/%d-00%d/module_reset_%d"
+#define MODULE_LPMODE_FORMAT            "/sys/bus/i2c/devices/%d-00%d/module_lpmode_%d"
 
 int sfp_map_bus[] ={18, 19, 20, 21, 22, 23};
 
@@ -224,102 +226,124 @@ onlp_sfpi_dev_writew(int port, uint8_t devaddr, uint8_t addr, uint16_t value)
 int
 onlp_sfpi_control_set(int port, onlp_sfp_control_t control, int value)
 {
-    int rv;
     int addr = 60;
     int bus  = 3;
 
     switch(control)
-        {
+    {
         case ONLP_SFP_CONTROL_TX_DISABLE:
-            {
-                if(port>=48 && port<=51) {
-                    if (onlp_file_write_int(value, MODULE_TXDISABLE_FORMAT, bus, addr, (port+1)) < 0) {
-                        AIM_LOG_ERROR("Unable to set tx_disable status to port(%d)\r\n", port);
-                        rv = ONLP_STATUS_E_INTERNAL;
-                    }
-                    else {
-                        rv = ONLP_STATUS_OK;
-                    }
+        {
+            if(port>=48 && port<=51) {
+                if (onlp_file_write_int(value, MODULE_TXDISABLE_FORMAT, bus, addr, (port+1)) < 0) {
+                    AIM_LOG_ERROR("Unable to set tx_disable status to port(%d)\r\n", port);
+                    return ONLP_STATUS_E_INTERNAL;
                 }
-                else {
-                    rv = ONLP_STATUS_E_UNSUPPORTED;
+                return  ONLP_STATUS_OK;
+            }
+            return ONLP_STATUS_E_UNSUPPORTED;
+               
+        }
+        case ONLP_SFP_CONTROL_RESET:
+        {
+            if(port>=52 && port<=53) {
+                if (onlp_file_write_int(value, MODULE_RESET_FORMAT, bus, addr, (port+1)) < 0) {
+                    AIM_LOG_ERROR("Unable to write reset status to port(%d)\r\n", port);
+                    return ONLP_STATUS_E_INTERNAL;
                 }
-                break;
+                return ONLP_STATUS_OK;
             }
-
+            return ONLP_STATUS_E_UNSUPPORTED;
+        }
+        case ONLP_SFP_CONTROL_LP_MODE:
+        {
+            if(port>=52 && port<=53) {
+                if (onlp_file_write_int(value, MODULE_LPMODE_FORMAT, bus, addr, (port+1)) < 0) {
+                    AIM_LOG_ERROR("Unable to write lpmode status to port(%d)\r\n", port);
+                    return ONLP_STATUS_E_INTERNAL;
+                }
+                return ONLP_STATUS_OK;
+            }
+            return ONLP_STATUS_E_UNSUPPORTED;
+        }   
         default:
-            rv = ONLP_STATUS_E_UNSUPPORTED;
             break;
-        }
+    }
 
-    return rv;
+    return ONLP_STATUS_E_UNSUPPORTED;
 }
 
 int
 onlp_sfpi_control_get(int port, onlp_sfp_control_t control, int* value)
 {
-    int rv;
     int addr = 60;
     int bus  = 3;
-    
+
     switch(control)
-        {
+    {
         case ONLP_SFP_CONTROL_RX_LOS:
-            {
-                if(port>=48 && port<=51) {
-            	    if (onlp_file_read_int(value, MODULE_RXLOS_FORMAT, bus, addr, (port+1)) < 0) {
-                        AIM_LOG_ERROR("Unable to read rx_loss status from port(%d)\r\n", port);
-                        rv = ONLP_STATUS_E_INTERNAL;
-                    }
-                    else {
-                        rv = ONLP_STATUS_OK;
-                    }
-                }
-                else {
-                    rv = ONLP_STATUS_E_UNSUPPORTED;
+        {
+            if(port>=48 && port<=51) {
+                if (onlp_file_read_int(value, MODULE_RXLOS_FORMAT, bus, addr, (port+1)) < 0) {
+                    AIM_LOG_ERROR("Unable to read rx_loss status from port(%d)\r\n", port);
+                    return  ONLP_STATUS_E_INTERNAL;
                 }
-                break;
+                return  ONLP_STATUS_OK;
             }
+            return ONLP_STATUS_E_UNSUPPORTED;
+        }
 
         case ONLP_SFP_CONTROL_TX_FAULT:
-            {
-                if(port>=48 && port<=51) {
-            	    if (onlp_file_read_int(value, MODULE_TXFAULT_FORMAT, bus, addr, (port+1)) < 0) {
-                        AIM_LOG_ERROR("Unable to read tx_fault status from port(%d)\r\n", port);
-                        rv = ONLP_STATUS_E_INTERNAL;
-                    }
-                    else {
-                        rv = ONLP_STATUS_OK;
-                    }
-                }
-                else {
-                    rv = ONLP_STATUS_E_UNSUPPORTED;
+        {
+            if(port>=48 && port<=51) {
+                if (onlp_file_read_int(value, MODULE_TXFAULT_FORMAT, bus, addr, (port+1)) < 0) {
+                    AIM_LOG_ERROR("Unable to read tx_fault status from port(%d)\r\n", port);
+                    return  ONLP_STATUS_E_INTERNAL;
                 }
-                break;
-            }
+                return  ONLP_STATUS_OK;
+            }                
+            return ONLP_STATUS_E_UNSUPPORTED;
+        }
 
         case ONLP_SFP_CONTROL_TX_DISABLE:
-            {
-                if(port>=48 && port<=51) {
-            	    if (onlp_file_read_int(value, MODULE_TXDISABLE_FORMAT, bus, addr, (port+1)) < 0) {
-                        AIM_LOG_ERROR("Unable to read tx_disabled status from port(%d)\r\n", port);
-                        rv = ONLP_STATUS_E_INTERNAL;
-                    }
-                    else {
-                        rv = ONLP_STATUS_OK;
-                    }
+        {
+            if(port>=48 && port<=51) {
+                if (onlp_file_read_int(value, MODULE_TXDISABLE_FORMAT, bus, addr, (port+1)) < 0) {
+                    AIM_LOG_ERROR("Unable to read tx_disabled status from port(%d)\r\n", port);
+                    return  ONLP_STATUS_E_INTERNAL;
                 }
-                else {
-                    rv = ONLP_STATUS_E_UNSUPPORTED;
+                return  ONLP_STATUS_OK;
+            }
+            return  ONLP_STATUS_E_UNSUPPORTED;
+        }
+        case ONLP_SFP_CONTROL_RESET: 
+        {
+            if(port>=52 && port<=53) {
+                if (onlp_file_read_int(value, MODULE_RESET_FORMAT, bus, addr, (port+1)) < 0) {
+                    AIM_LOG_ERROR("Unable to read reset status from port(%d)\r\n", port);
+                    return ONLP_STATUS_E_INTERNAL;
+                 }
+                 return  ONLP_STATUS_OK;
+           }
+           return  ONLP_STATUS_E_UNSUPPORTED;
+           
+        }
+        
+        case ONLP_SFP_CONTROL_LP_MODE:
+        {
+            if(port>=52 && port<=53) {
+                if (onlp_file_read_int(value, MODULE_LPMODE_FORMAT, bus, addr,  (port+1)) < 0) {
+                    AIM_LOG_ERROR("Unable to read lpmode status from port(%d)\r\n", port);
+                    return ONLP_STATUS_E_INTERNAL;
                 }
-                break;
+                return ONLP_STATUS_OK;
             }
-
-        default:
-            rv = ONLP_STATUS_E_UNSUPPORTED;
+            return  ONLP_STATUS_E_UNSUPPORTED;
         }
+        default:
+            break;
+    }
 
-    return rv;
+    return ONLP_STATUS_E_UNSUPPORTED;
 }
 
 int
-- 
2.31.1

